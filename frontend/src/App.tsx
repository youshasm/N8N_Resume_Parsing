import { useState, useCallback } from 'react'
import { useDropzone } from 'react-dropzone'
import { Upload, FileText, CheckCircle, XCircle, AlertTriangle, Loader2 } from 'lucide-react'
import toast from 'react-hot-toast'
import axios from 'axios'

// Generated by Copilot
interface ProcessingResult {
  success: boolean
  filename?: string
  quality_score?: number
  processing_tier?: string
  status?: string
  extracted_data?: any
  error?: string
  timestamp?: string
}

interface ProcessingStats {
  total_processed: number
  high_quality_auto: number
  medium_quality_enhanced: number
  low_quality_manual: number
  processing_errors: number
}

function App() {
  const [uploading, setUploading] = useState(false)
  const [results, setResults] = useState<ProcessingResult[]>([])
  const [stats, setStats] = useState<ProcessingStats | null>(null)

  const uploadToN8n = async (file: File): Promise<ProcessingResult> => {
    const formData = new FormData()
    formData.append('file', file)

    try {
      const response = await axios.post('/webhook/document-upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        timeout: 30000,
      })

      return response.data || { 
        success: true, 
        filename: file.name,
        status: 'processed',
        timestamp: new Date().toISOString()
      }
    } catch (error: any) {
      console.error('Upload error:', error)
      return {
        success: false,
        filename: file.name,
        error: error.response?.data?.message || error.message || 'Upload failed',
        timestamp: new Date().toISOString()
      }
    }
  }

  const fetchStats = async () => {
    try {
      const response = await axios.get('/api/processing/stats')
      setStats(response.data)
    } catch (error) {
      console.error('Failed to fetch stats:', error)
    }
  }

  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    if (acceptedFiles.length === 0) return

    setUploading(true)
    const newResults: ProcessingResult[] = []

    for (const file of acceptedFiles) {
      toast.loading(`Processing ${file.name}...`, { id: file.name })
      
      try {
        const result = await uploadToN8n(file)
        newResults.push(result)
        
        if (result.success) {
          toast.success(`${file.name} processed successfully!`, { id: file.name })
        } else {
          toast.error(`${file.name}: ${result.error}`, { id: file.name })
        }
      } catch (error) {
        const errorResult: ProcessingResult = {
          success: false,
          filename: file.name,
          error: 'Processing failed',
          timestamp: new Date().toISOString()
        }
        newResults.push(errorResult)
        toast.error(`${file.name}: Processing failed`, { id: file.name })
      }
    }

    setResults(prev => [...newResults, ...prev])
    setUploading(false)
    fetchStats()
  }, [])

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'application/msword': ['.doc'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],
      'image/*': ['.jpg', '.jpeg', '.png', '.tiff', '.bmp']
    },
    disabled: uploading
  })

  const getQualityColor = (score: number | undefined) => {
    if (!score && score !== 0) return 'text-gray-500'
    if (score >= 75) return 'text-green-600'
    if (score >= 50) return 'text-yellow-600'
    return 'text-red-600'
  }

  const getStatusIcon = (result: ProcessingResult) => {
    if (result.success) {
      return <CheckCircle className="w-5 h-5 text-green-600" />
    }
    if (result.error?.includes('quality')) {
      return <AlertTriangle className="w-5 h-5 text-yellow-600" />
    }
    return <XCircle className="w-5 h-5 text-red-600" />
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                IMP Document Processing
              </h1>
              <p className="text-gray-600">Islamic Manpower Promoters - Smart Document Processing System</p>
            </div>
            {stats && (
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div className="text-center">
                  <div className="text-2xl font-bold text-primary-600">{stats.total_processed}</div>
                  <div className="text-gray-500">Total Processed</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">{stats.high_quality_auto}</div>
                  <div className="text-gray-500">Auto Processed</div>
                </div>
              </div>
            )}
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Upload Area */}
        <div className="card p-8 mb-8">
          <div
            {...getRootProps()}
            className={`upload-area ${isDragActive ? 'dragover' : ''} ${uploading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
          >
            <input {...getInputProps()} />
            <div className="flex flex-col items-center space-y-4">
              {uploading ? (
                <Loader2 className="w-12 h-12 text-primary-500 animate-spin" />
              ) : (
                <Upload className="w-12 h-12 text-gray-400" />
              )}
              <div className="text-center">
                <p className="text-lg font-medium text-gray-900 mb-2">
                  {isDragActive ? 'Drop files here...' : 'Upload Documents'}
                </p>
                <p className="text-gray-500">
                  Drag & drop your documents here, or click to select files
                </p>
                <p className="text-sm text-gray-400 mt-2">
                  Supports PDF, DOC, DOCX, and image files
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Results */}
        {results.length > 0 && (
          <div className="card">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-xl font-semibold text-gray-900">Processing Results</h2>
            </div>
            <div className="divide-y divide-gray-200">
              {results.map((result, index) => (
                <div key={index} className="px-6 py-4 flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    {getStatusIcon(result)}
                    <div>
                      <div className="flex items-center space-x-2">
                        <FileText className="w-4 h-4 text-gray-400" />
                        <span className="font-medium text-gray-900">{result.filename}</span>
                      </div>
                      {result.error && (
                        <p className="text-sm text-red-600 mt-1">{result.error}</p>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center space-x-6 text-sm">
                    {result.quality_score !== undefined && (
                      <div className="text-center">
                        <div className={`font-medium ${getQualityColor(result.quality_score)}`}>
                          {result.quality_score}/100
                        </div>
                        <div className="text-gray-500">Quality</div>
                      </div>
                    )}
                    {result.processing_tier && (
                      <div className="text-center">
                        <div className="font-medium text-gray-900 capitalize">
                          {result.processing_tier}
                        </div>
                        <div className="text-gray-500">Tier</div>
                      </div>
                    )}
                    <div className="text-center">
                      <div className={`font-medium ${result.success ? 'text-green-600' : 'text-red-600'}`}>
                        {result.status || (result.success ? 'Success' : 'Failed')}
                      </div>
                      <div className="text-gray-500">Status</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Info Cards */}
        <div className="grid md:grid-cols-3 gap-6 mt-8">
          <div className="card p-6">
            <h3 className="font-semibold text-gray-900 mb-2">High Quality (â‰¥75)</h3>
            <p className="text-sm text-gray-600">
              Automatically processed with AI OCR. Best accuracy and fastest processing.
            </p>
          </div>
          <div className="card p-6">
            <h3 className="font-semibold text-gray-900 mb-2">Medium Quality (50-74)</h3>
            <p className="text-sm text-gray-600">
              Enhanced processing with premium OCR APIs for improved accuracy.
            </p>
          </div>
          <div className="card p-6">
            <h3 className="font-semibold text-gray-900 mb-2">Low Quality (&lt;50)</h3>
            <p className="text-sm text-gray-600">
              Requires human verification. Only filename stored with NULL values.
            </p>
          </div>
        </div>
      </main>
    </div>
  )
}

export default App
