{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "classification",
        "options": {}
      },
      "id": "d99ec80a-9cba-4b68-8aaa-c440eef05a19",
      "name": "Classification Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -448,
        -80
      ],
      "webhookId": "classification"
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/documents/{{ $json.document_id }}",
        "options": {}
      },
      "id": "ebd546eb-b0f1-4670-a9a3-bf00f8bc828d",
      "name": "Get Document Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -224,
        -80
      ]
    },
    {
      "parameters": {
        "jsCode": "\n// Document Classification Engine - Phase 1\nconst documentData = $input.all()[0].json;\nconst timestamp = new Date().toISOString();\n\n// Initialize classification result\nlet documentType = 'unknown';\nlet confidence = 0;\nlet classificationFactors = [];\nlet subType = null;\n\n// Get filename and analyze\nconst filename = (documentData.filename || '').toLowerCase();\nconst fileType = documentData.file_type?.toLowerCase();\n\n// Primary classification based on filename patterns\nif (filename.includes('cv') || filename.includes('resume') || filename.includes('curriculum')) {\n  documentType = 'cv';\n  confidence = 85;\n  classificationFactors.push('filename_cv_pattern');\n  \n  // CV sub-classification\n  if (filename.includes('technical') || filename.includes('engineer') || filename.includes('developer')) {\n    subType = 'technical_cv';\n    confidence += 5;\n  } else if (filename.includes('manager') || filename.includes('executive')) {\n    subType = 'executive_cv';\n    confidence += 5;\n  } else {\n    subType = 'general_cv';\n  }\n  \n} else if (filename.includes('passport') || filename.includes('travel')) {\n  documentType = 'passport';\n  confidence = 90;\n  classificationFactors.push('filename_passport_pattern');\n  subType = 'travel_document';\n  \n} else if (filename.includes('certificate') || filename.includes('diploma') || filename.includes('degree')) {\n  documentType = 'certificate';\n  confidence = 80;\n  classificationFactors.push('filename_certificate_pattern');\n  \n  if (filename.includes('education') || filename.includes('university') || filename.includes('college')) {\n    subType = 'educational_certificate';\n  } else if (filename.includes('training') || filename.includes('course')) {\n    subType = 'training_certificate';\n  } else {\n    subType = 'general_certificate';\n  }\n  \n} else if (filename.includes('license') || filename.includes('permit')) {\n  documentType = 'license';\n  confidence = 85;\n  classificationFactors.push('filename_license_pattern');\n  subType = 'professional_license';\n  \n} else if (filename.includes('contract') || filename.includes('agreement')) {\n  documentType = 'contract';\n  confidence = 75;\n  classificationFactors.push('filename_contract_pattern');\n  subType = 'employment_contract';\n  \n} else if (filename.includes('id') || filename.includes('identity') || filename.includes('national')) {\n  documentType = 'identity';\n  confidence = 80;\n  classificationFactors.push('filename_id_pattern');\n  subType = 'national_id';\n}\n\n// File type-based classification boost\nif (fileType === '.pdf') {\n  confidence += 10;\n  classificationFactors.push('pdf_format_boost');\n} else if (['.doc', '.docx'].includes(fileType)) {\n  confidence += 8;\n  classificationFactors.push('word_format_boost');\n  // Word docs are more likely to be CVs\n  if (documentType === 'unknown') {\n    documentType = 'cv';\n    confidence = 60;\n    classificationFactors.push('word_document_cv_assumption');\n    subType = 'general_cv';\n  }\n} else if (['.jpg', '.jpeg', '.png', '.tiff'].includes(fileType)) {\n  confidence += 5;\n  classificationFactors.push('image_format');\n  // Images are more likely to be scanned documents\n  if (documentType === 'unknown') {\n    documentType = 'scanned_document';\n    confidence = 50;\n    classificationFactors.push('image_scanned_assumption');\n    subType = 'scanned_unknown';\n  }\n}\n\n// File size analysis\nconst fileSize = documentData.file_size || 0;\nif (fileSize > 2000000) { // > 2MB\n  if (documentType === 'unknown') {\n    documentType = 'high_res_scan';\n    confidence = 45;\n    classificationFactors.push('large_file_scan_assumption');\n    subType = 'high_resolution_document';\n  }\n  classificationFactors.push('large_file_size');\n} else if (fileSize < 100000) { // < 100KB\n  confidence = Math.max(confidence - 10, 20); // Reduce confidence for very small files\n  classificationFactors.push('small_file_size_penalty');\n}\n\n// Random simulation factor for content analysis (in real implementation, this would be OCR)\nconst contentAnalysisBonus = Math.floor(Math.random() * 16);\nconfidence += contentAnalysisBonus;\nif (contentAnalysisBonus > 10) {\n  classificationFactors.push('high_content_confidence');\n} else if (contentAnalysisBonus > 5) {\n  classificationFactors.push('medium_content_confidence');\n} else {\n  classificationFactors.push('low_content_confidence');\n}\n\n// Final fallback classification\nif (documentType === 'unknown') {\n  documentType = 'general_document';\n  confidence = 30;\n  subType = 'unclassified';\n  classificationFactors.push('fallback_classification');\n}\n\n// Cap confidence at 100\nconfidence = Math.min(confidence, 100);\n\n// Determine processing requirements\nconst processingRequirements = {\n  'cv': {\n    extractionFields: ['personal_info', 'work_experience', 'education', 'skills', 'languages'],\n    validationRules: ['name_required', 'contact_required', 'experience_format'],\n    expectedSections: 5\n  },\n  'passport': {\n    extractionFields: ['personal_info', 'passport_number', 'issue_date', 'expiry_date', 'issuing_country'],\n    validationRules: ['passport_number_format', 'date_validity', 'photo_present'],\n    expectedSections: 3\n  },\n  'certificate': {\n    extractionFields: ['certificate_name', 'issued_to', 'issued_by', 'issue_date', 'validity'],\n    validationRules: ['institution_name', 'date_format', 'signature_present'],\n    expectedSections: 4\n  },\n  'license': {\n    extractionFields: ['license_type', 'license_number', 'issued_to', 'issue_date', 'expiry_date'],\n    validationRules: ['license_number_format', 'validity_period', 'authority_stamp'],\n    expectedSections: 3\n  }\n}[documentType] || {\n  extractionFields: ['text_content', 'document_structure'],\n  validationRules: ['readable_text'],\n  expectedSections: 1\n};\n\nconst result = {\n  document_id: documentData.document_id,\n  document_type: documentType,\n  sub_type: subType,\n  confidence: confidence,\n  classification_factors: classificationFactors,\n  classification_timestamp: timestamp,\n  processing_requirements: processingRequirements,\n  estimated_extraction_time: {\n    'cv': '3-8 minutes',\n    'passport': '2-4 minutes',\n    'certificate': '2-5 minutes',\n    'license': '2-4 minutes'\n  }[documentType] || '1-3 minutes',\n  validation_complexity: confidence >= 80 ? 'low' : confidence >= 60 ? 'medium' : 'high',\n  file_type: fileType\n};\n\nreturn [{ json: result }];\n"
      },
      "id": "250f50d5-ae92-41a0-b2c8-8d53fd13bbca",
      "name": "Classification Engine",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -16,
        -80
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/classification/store",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "document_type",
              "value": "={{ $json.document_type }}"
            },
            {
              "name": "sub_type",
              "value": "={{ $json.sub_type }}"
            },
            {
              "name": "confidence",
              "value": "={{ $json.confidence }}"
            },
            {
              "name": "classification_factors",
              "value": "={{ $json.classification_factors }}"
            },
            {
              "name": "processing_requirements",
              "value": "={{ $json.processing_requirements }}"
            }
          ]
        },
        "options": {}
      },
      "id": "7ddb6353-a1c8-4238-b5c5-bc0d2522b2ae",
      "name": "Store Classification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        224,
        -80
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/webhook/data-extraction",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "document_type",
              "value": "={{ $json.document_type }}"
            },
            {
              "name": "sub_type",
              "value": "={{ $json.sub_type }}"
            },
            {
              "name": "confidence",
              "value": "={{ $json.confidence }}"
            },
            {
              "name": "processing_requirements",
              "value": "={{ $json.processing_requirements }}"
            }
          ]
        },
        "options": {}
      },
      "id": "124aff7f-d997-4784-aec4-a8527658faef",
      "name": "Trigger Data Extraction",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        432,
        -80
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "01177de8-9008-4b86-911e-0bd20bb81847",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        656,
        -80
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Classification Webhook": {
      "main": [
        [
          {
            "node": "Classification Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classification Engine": {
      "main": [
        [
          {
            "node": "Store Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Classification": {
      "main": [
        [
          {
            "node": "Trigger Data Extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Data Extraction": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3b665e52-eb51-47fc-a790-b607411899f0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c6a43a3bbd7a8cdc4527fdc9e7a353480fdc5f3249bab15191df3e3f7f430aed"
  },
  "id": "fqRntUdniLxMIi3J",
  "tags": [
    {
      "createdAt": "2025-07-19T08:39:02.958Z",
      "updatedAt": "2025-07-19T08:39:02.958Z",
      "id": "D1jLS32p3iufGygd",
      "name": "IMP Phase 1"
    }
  ]
}