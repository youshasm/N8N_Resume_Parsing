{
  "name": "IMP Document Classification",
  "nodes": [
    {
      "parameters": {
        "path": "/classify",
        "httpMethod": "POST",
        "responseMode": "responseNode"
      },
      "id": "dc1-webhook-start",
      "name": "Classification Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "imp-classification"
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Extract document info and prepare for classification\nconst input = $json;\nconst documentId = input.document_id;\nconst qualityScore = input.quality_score || 50;\nconst processingTier = input.processing_tier || 'medium_quality';\n\n// Get file path for classification\nconst filePath = `/documents/uploads/${documentId}`;\n\n// Determine classification approach based on quality and format\nlet classificationMethod;\nif (qualityScore >= 75) {\n  classificationMethod = 'huggingface_donut'; // High quality - use AI\n} else if (qualityScore >= 50) {\n  classificationMethod = 'hybrid_analysis'; // Medium quality - combine methods\n} else {\n  classificationMethod = 'basic_rules'; // Low quality - rule-based\n}\n\nreturn {\n  json: {\n    document_id: documentId,\n    quality_score: qualityScore,\n    processing_tier: processingTier,\n    file_path: filePath,\n    classification_method: classificationMethod,\n    supported_document_types: [\n      'cv_resume',\n      'passport',\n      'educational_certificate',\n      'experience_letter',\n      'cnic_national_id',\n      'medical_certificate',\n      'training_certificate',\n      'reference_letter'\n    ]\n  }\n};"
      },
      "id": "dc2-extract-info",
      "name": "Extract Classification Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "method_check",
              "leftValue": "={{ $json.classification_method }}",
              "rightValue": "huggingface_donut",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "dc3-method-check",
      "name": "Classification Method?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [660, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Simulate HuggingFace Donut classification (Phase 1 - simulation)\n// In Phase 2, this will call actual HuggingFace Donut API\n\nconst documentId = $json.document_id;\nconst qualityScore = $json.quality_score;\n\n// Simulate Donut classification results\nconst documentTypes = [\n  { type: 'cv_resume', keywords: ['resume', 'cv', 'experience', 'education', 'skills'] },\n  { type: 'passport', keywords: ['passport', 'mrz', 'nationality', 'place of birth'] },\n  { type: 'educational_certificate', keywords: ['degree', 'certificate', 'university', 'graduated'] },\n  { type: 'experience_letter', keywords: ['experience', 'employment', 'worked', 'position'] },\n  { type: 'cnic_national_id', keywords: ['national', 'identity', 'citizen', 'id card'] },\n  { type: 'medical_certificate', keywords: ['medical', 'health', 'doctor', 'hospital'] },\n  { type: 'training_certificate', keywords: ['training', 'course', 'completion', 'certified'] },\n  { type: 'reference_letter', keywords: ['reference', 'recommendation', 'character'] }\n];\n\n// Simulate random but weighted classification\nconst randomIndex = Math.floor(Math.random() * documentTypes.length);\nconst primaryType = documentTypes[randomIndex];\n\n// Simulate confidence based on quality score\nconst baseConfidence = Math.min(95, Math.max(60, qualityScore + Math.random() * 20));\n\n// Simulate secondary predictions\nconst secondaryPredictions = documentTypes\n  .filter(dt => dt.type !== primaryType.type)\n  .slice(0, 2)\n  .map((dt, index) => ({\n    document_type: dt.type,\n    confidence: Math.max(10, baseConfidence - 20 - (index * 10) + Math.random() * 10)\n  }));\n\n// Simulate extracted features that led to classification\nconst extractedFeatures = {\n  detected_text_patterns: primaryType.keywords.slice(0, 3),\n  layout_analysis: {\n    has_photo: primaryType.type === 'passport' || primaryType.type === 'cnic_national_id',\n    has_table_structure: primaryType.type === 'cv_resume',\n    has_letterhead: primaryType.type === 'experience_letter' || primaryType.type === 'reference_letter',\n    text_density: Math.random() * 100\n  },\n  language_detection: 'english', // Simplified for Phase 1\n  estimated_accuracy: baseConfidence\n};\n\nreturn {\n  json: {\n    document_id: documentId,\n    classification_result: {\n      primary_prediction: {\n        document_type: primaryType.type,\n        confidence: Math.round(baseConfidence * 100) / 100,\n        method: 'huggingface_donut_simulated'\n      },\n      secondary_predictions: secondaryPredictions.map(sp => ({\n        ...sp,\n        confidence: Math.round(sp.confidence * 100) / 100\n      })),\n      extracted_features: extractedFeatures,\n      processing_time: '2.5 seconds',\n      model_version: 'naver-clova-ix/donut-base-finetuned-cord-v2'\n    },\n    next_step: 'data_extraction'\n  }\n};"
      },
      "id": "dc4-donut-classification",
      "name": "HuggingFace Donut Classification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 240]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "hybrid_check",
              "leftValue": "={{ $json.classification_method }}",
              "rightValue": "hybrid_analysis",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "dc5-hybrid-check",
      "name": "Is Hybrid Method?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [860, 360]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Hybrid classification - combine rule-based and basic AI\nconst documentId = $json.document_id;\nconst qualityScore = $json.quality_score;\n\n// Simulate filename and basic content analysis\nconst filename = `${documentId}_document`; // Simplified for simulation\n\n// Rule-based classification based on common patterns\nlet documentType = 'unknown';\nlet confidence = 50;\nlet method = 'hybrid_rule_based';\n\n// Filename pattern matching\nif (filename.toLowerCase().includes('cv') || filename.toLowerCase().includes('resume')) {\n  documentType = 'cv_resume';\n  confidence = 80;\n} else if (filename.toLowerCase().includes('passport')) {\n  documentType = 'passport';\n  confidence = 85;\n} else if (filename.toLowerCase().includes('certificate') || filename.toLowerCase().includes('degree')) {\n  documentType = 'educational_certificate';\n  confidence = 75;\n} else if (filename.toLowerCase().includes('experience') || filename.toLowerCase().includes('employment')) {\n  documentType = 'experience_letter';\n  confidence = 70;\n} else {\n  // Default classification for medium quality documents\n  const commonTypes = ['cv_resume', 'educational_certificate', 'experience_letter'];\n  documentType = commonTypes[Math.floor(Math.random() * commonTypes.length)];\n  confidence = 60;\n}\n\n// Adjust confidence based on quality score\nconfidence = Math.min(90, confidence * (qualityScore / 100));\n\nreturn {\n  json: {\n    document_id: documentId,\n    classification_result: {\n      primary_prediction: {\n        document_type: documentType,\n        confidence: Math.round(confidence * 100) / 100,\n        method: method\n      },\n      secondary_predictions: [],\n      extracted_features: {\n        filename_analysis: true,\n        pattern_matching: true,\n        quality_adjusted: true\n      },\n      processing_time: '0.5 seconds',\n      model_version: 'rule_based_v1'\n    },\n    next_step: 'data_extraction'\n  }\n};"
      },
      "id": "dc6-hybrid-classification",
      "name": "Hybrid Classification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Basic rule-based classification for low quality documents\nconst documentId = $json.document_id;\nconst qualityScore = $json.quality_score;\n\n// For low quality documents, use conservative classification\nconst documentType = 'general_document'; // Safe default\nconst confidence = Math.max(30, qualityScore * 0.6); // Lower confidence for low quality\n\nreturn {\n  json: {\n    document_id: documentId,\n    classification_result: {\n      primary_prediction: {\n        document_type: documentType,\n        confidence: Math.round(confidence * 100) / 100,\n        method: 'basic_rules'\n      },\n      secondary_predictions: [\n        { document_type: 'cv_resume', confidence: 40 },\n        { document_type: 'educational_certificate', confidence: 35 }\n      ],\n      extracted_features: {\n        low_quality_detected: true,\n        requires_human_review: true\n      },\n      processing_time: '0.1 seconds',\n      model_version: 'basic_rules_v1'\n    },\n    next_step: 'human_review_queue'\n  }\n};"
      },
      "id": "dc7-basic-classification",
      "name": "Basic Rule Classification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 420]
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/v1/documents/{{ $json.document_id }}/classification",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.classification_result) }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "dc8-store-classification",
      "name": "Store Classification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1260, 360]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Prepare for next workflow based on classification\nconst result = $json;\nconst classification = result.classification_result;\nconst documentType = classification.primary_prediction.document_type;\nconst confidence = classification.primary_prediction.confidence;\n\n// Determine next workflow based on document type and confidence\nlet nextWorkflow;\nlet webhookUrl;\n\nif (confidence >= 70) {\n  // High confidence - proceed to data extraction\n  nextWorkflow = 'Data_Extraction_Primary';\n  webhookUrl = 'http://localhost:5678/webhook/imp-data-extraction';\n} else {\n  // Low confidence - route through smart router for review\n  nextWorkflow = 'Smart_Router';\n  webhookUrl = 'http://localhost:5678/webhook/imp-smart-router';\n}\n\n// Add extraction hints based on document type\nconst extractionHints = {\n  cv_resume: {\n    expected_fields: ['name', 'email', 'phone', 'experience', 'education', 'skills'],\n    extraction_priority: 'high'\n  },\n  passport: {\n    expected_fields: ['name', 'passport_number', 'nationality', 'date_of_birth', 'expiry_date'],\n    extraction_priority: 'high',\n    requires_mrz: true\n  },\n  educational_certificate: {\n    expected_fields: ['name', 'degree', 'institution', 'graduation_date', 'grade'],\n    extraction_priority: 'medium'\n  },\n  experience_letter: {\n    expected_fields: ['name', 'company', 'position', 'duration', 'responsibilities'],\n    extraction_priority: 'medium'\n  },\n  general_document: {\n    expected_fields: ['text_content'],\n    extraction_priority: 'low'\n  }\n};\n\nconst hints = extractionHints[documentType] || extractionHints['general_document'];\n\nreturn {\n  json: {\n    ...result,\n    next_workflow: nextWorkflow,\n    webhook_url: webhookUrl,\n    extraction_hints: hints,\n    ready_for_extraction: confidence >= 70\n  }\n};"
      },
      "id": "dc9-prepare-next",
      "name": "Prepare Next Step",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1460, 360]
    },
    {
      "parameters": {
        "url": "={{ $json.webhook_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "dc10-trigger-next",
      "name": "Trigger Next Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1660, 360]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, classification: $json.classification_result, next_step: $json.next_workflow } }}"
      },
      "id": "dc11-response",
      "name": "Classification Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1860, 360]
    }
  ],
  "pinData": {},
  "connections": {
    "Classification Trigger": {
      "main": [
        [
          {
            "node": "Extract Classification Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Classification Info": {
      "main": [
        [
          {
            "node": "Classification Method?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classification Method?": {
      "main": [
        [
          {
            "node": "HuggingFace Donut Classification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is Hybrid Method?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HuggingFace Donut Classification": {
      "main": [
        [
          {
            "node": "Store Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Hybrid Method?": {
      "main": [
        [
          {
            "node": "Hybrid Classification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic Rule Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hybrid Classification": {
      "main": [
        [
          {
            "node": "Store Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic Rule Classification": {
      "main": [
        [
          {
            "node": "Store Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Classification": {
      "main": [
        [
          {
            "node": "Prepare Next Step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Next Step": {
      "main": [
        [
          {
            "node": "Trigger Next Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Next Workflow": {
      "main": [
        [
          {
            "node": "Classification Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "imp_phase1_document_classification"
  },
  "id": "imp_document_classification_phase1",
  "tags": [
    {
      "createdAt": "2025-07-04T00:00:00.000Z",
      "updatedAt": "2025-07-04T00:00:00.000Z",
      "id": "imp_phase1",
      "name": "IMP Phase 1"
    }
  ]
}
