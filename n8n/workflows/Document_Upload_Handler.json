{
  "name": "Document Upload Handler",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload",
        "options": {}
      },
      "id": "upload-webhook",
      "name": "Document Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "document-upload"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "file-exists",
              "leftValue": "={{ $json.files }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "file-validation",
      "name": "File Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "\n// Document Upload Handler - Phase 1\nconst files = $input.all()[0].json.files;\nconst timestamp = new Date().toISOString();\n\nif (!files || files.length === 0) {\n  throw new Error('No files uploaded');\n}\n\nconst processedFiles = [];\n\nfor (const file of files) {\n  // Validate file type\n  const allowedTypes = ['.pdf', '.doc', '.docx', '.jpg', '.jpeg', '.png', '.tiff'];\n  const fileExt = file.filename.toLowerCase().substring(file.filename.lastIndexOf('.'));\n  \n  if (!allowedTypes.includes(fileExt)) {\n    throw new Error(`Unsupported file type: ${fileExt}`);\n  }\n  \n  // Validate file size (max 10MB)\n  if (file.size > 10 * 1024 * 1024) {\n    throw new Error('File size exceeds 10MB limit');\n  }\n  \n  // Generate unique document ID\n  const documentId = `doc_${timestamp.replace(/[^0-9]/g, '')}_${Math.random().toString(36).substr(2, 9)}`;\n  \n  processedFiles.push({\n    document_id: documentId,\n    filename: file.filename,\n    file_size: file.size,\n    file_type: fileExt,\n    upload_timestamp: timestamp,\n    processing_status: 'uploaded',\n    file_data: file.data,\n    metadata: {\n      original_name: file.filename,\n      upload_ip: $json.headers?.['x-forwarded-for'] || 'unknown',\n      user_agent: $json.headers?.['user-agent'] || 'unknown'\n    }\n  });\n}\n\nreturn processedFiles.map(file => ({ json: file }));\n"
      },
      "id": "file-processor",
      "name": "File Processing Logic",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 220]
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/documents/store",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "filename",
              "value": "={{ $json.filename }}"
            },
            {
              "name": "file_size",
              "value": "={{ $json.file_size }}"
            },
            {
              "name": "file_type",
              "value": "={{ $json.file_type }}"
            },
            {
              "name": "file_data",
              "value": "={{ $json.file_data }}"
            },
            {
              "name": "metadata",
              "value": "={{ $json.metadata }}"
            }
          ]
        },
        "options": {}
      },
      "id": "store-document",
      "name": "Store Document",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 220]
    },
    {
      "parameters": {
        "url": "http://localhost:5678/webhook/quality-assessment",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "filename",
              "value": "={{ $json.filename }}"
            },
            {
              "name": "file_type",
              "value": "={{ $json.file_type }}"
            }
          ]
        },
        "options": {}
      },
      "id": "trigger-quality",
      "name": "Trigger Quality Assessment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 220]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Document uploaded successfully\",\n  \"document_id\": \"{{ $json.document_id }}\",\n  \"filename\": \"{{ $json.filename }}\",\n  \"status\": \"processing\",\n  \"timestamp\": \"{{ $json.upload_timestamp }}\"\n}"
      },
      "id": "upload-response",
      "name": "Upload Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 220]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"error\": \"File validation failed\",\n  \"message\": \"{{ $json.error || 'Invalid file or no files provided' }}\"\n}",
        "responseCode": 400
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 400]
    }
  ],
  "connections": {
    "Document Upload Webhook": {
      "main": [
        [
          {
            "node": "File Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Validation": {
      "main": [
        [
          {
            "node": "File Processing Logic",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Processing Logic": {
      "main": [
        [
          {
            "node": "Store Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Document": {
      "main": [
        [
          {
            "node": "Trigger Quality Assessment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Quality Assessment": {
      "main": [
        [
          {
            "node": "Upload Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "doc-upload-handler",
  "tags": [
    {
      "createdAt": "2025-01-07T12:00:00.000Z",
      "updatedAt": "2025-01-07T12:00:00.000Z",
      "id": "imp-phase1",
      "name": "IMP Phase 1"
    }
  ]
}
