{
  "name": "IMP Document Upload Handler",
  "nodes": [
    {
      "parameters": {
        "path": "/upload",
        "httpMethod": "POST",
        "responseMode": "responseNode",
        "options": {
          "binaryData": true
        }
      },
      "id": "c5e8c5f0-1c5a-4d5c-9b2e-4f3e1a8c6d9f",
      "name": "Document Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "imp-upload-handler"
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Validate uploaded file and extract metadata\nconst uploadedFile = $input.first().binary;\nconst fileData = uploadedFile.data;\n\n// Extract file information\nconst fileName = fileData.fileName || 'unknown';\nconst mimeType = fileData.mimeType || 'application/octet-stream';\nconst fileSize = fileData.fileSize || Buffer.byteLength(fileData.data);\n\n// Supported file formats from README\nconst supportedFormats = [\n  'application/pdf',\n  'application/msword',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'image/jpeg',\n  'image/png',\n  'image/tiff',\n  'image/bmp'\n];\n\n// Validate file size (50MB max from config)\nconst maxSizeBytes = 50 * 1024 * 1024; // 50MB\nif (fileSize > maxSizeBytes) {\n  return {\n    json: {\n      success: false,\n      error: 'File size exceeds 50MB limit',\n      file_size_mb: Math.round(fileSize / (1024 * 1024) * 100) / 100\n    }\n  };\n}\n\n// Validate file format\nif (!supportedFormats.includes(mimeType)) {\n  return {\n    json: {\n      success: false,\n      error: 'Unsupported file format',\n      supported_formats: supportedFormats,\n      received_format: mimeType\n    }\n  };\n}\n\n// Generate unique document ID\nconst documentId = `doc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n// Create document metadata\nconst documentMetadata = {\n  id: documentId,\n  original_filename: fileName,\n  mime_type: mimeType,\n  file_size_bytes: fileSize,\n  file_size_mb: Math.round(fileSize / (1024 * 1024) * 100) / 100,\n  upload_timestamp: new Date().toISOString(),\n  processing_status: 'uploaded',\n  quality_score: null,\n  document_type: null,\n  processing_tier: null\n};\n\nreturn {\n  json: {\n    success: true,\n    document: documentMetadata,\n    next_step: 'quality_assessment'\n  },\n  binary: {\n    data: fileData\n  }\n};"
      },
      "id": "f8d7e6c9-2a1b-4c3d-8e9f-5g4h3i2j1k0l",
      "name": "File Validation & Metadata",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.document.id }}_{{ $json.document.original_filename }}",
        "dataPropertyName": "data"
      },
      "id": "a9b8c7d6-3e2f-4a5b-9c8d-7e6f5g4h3i2j",
      "name": "Save to Upload Directory",
      "type": "n8n-nodes-base.writeFile",
      "typeVersion": 1,
      "position": [660, 300]
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/v1/quality/assess",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.document) }}",
        "options": {
          "headers": {
            "Content-Type": "application/json"
          }
        }
      },
      "id": "b1c2d3e4-5f6g-7h8i-9j0k-1l2m3n4o5p6q",
      "name": "Trigger Quality Assessment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [860, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success_condition",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c2d3e4f5-6g7h-8i9j-0k1l-2m3n4o5p6q7r",
      "name": "Upload Success Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1060, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Log successful upload and prepare response\nconst document = $json.document;\nconst qualityResult = $json.quality_result || {};\n\n// Update document with quality score if available\nif (qualityResult.quality_score) {\n  document.quality_score = qualityResult.quality_score;\n  document.processing_tier = qualityResult.processing_tier;\n}\n\n// Log upload success\nconsole.log(`Document uploaded successfully: ${document.id}`);\nconsole.log(`File: ${document.original_filename} (${document.file_size_mb}MB)`);\nconsole.log(`Quality Score: ${document.quality_score || 'Pending assessment'}`);\n\nreturn {\n  json: {\n    success: true,\n    message: 'Document uploaded and queued for processing',\n    document_id: document.id,\n    quality_score: document.quality_score,\n    processing_tier: document.processing_tier,\n    next_steps: [\n      'quality_assessment',\n      'document_classification',\n      'data_extraction'\n    ],\n    api_endpoints: {\n      status: `/api/v1/documents/${document.id}/status`,\n      results: `/api/v1/documents/${document.id}/results`\n    }\n  }\n};"
      },
      "id": "d3e4f5g6-7h8i-9j0k-1l2m-3n4o5p6q7r8s",
      "name": "Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1260, 240]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Handle upload errors and prepare error response\nconst error = $json.error || 'Unknown upload error';\nconst details = $json.details || {};\n\n// Log error\nconsole.error(`Document upload failed: ${error}`);\nconsole.error('Error details:', details);\n\nreturn {\n  json: {\n    success: false,\n    error: error,\n    details: details,\n    supported_formats: [\n      'PDF documents',\n      'Word documents (.doc, .docx)',\n      'Images (JPG, PNG, TIFF, BMP)'\n    ],\n    max_file_size: '50MB',\n    help: 'Please ensure your file is in a supported format and under 50MB'\n  }\n};"
      },
      "id": "e4f5g6h7-8i9j-0k1l-2m3n-4o5p6q7r8s9t",
      "name": "Error Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1260, 360]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "f5g6h7i8-9j0k-1l2m-3n4o-5p6q7r8s9t0u",
      "name": "HTTP Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1460, 300]
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/v1/documents/store",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.document) }}",
        "options": {
          "headers": {
            "Content-Type": "application/json"
          }
        }
      },
      "id": "g6h7i8j9-0k1l-2m3n-4o5p-6q7r8s9t0u1v",
      "name": "Store Document Metadata",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [860, 180]
    }
  ],
  "pinData": {},
  "connections": {
    "Document Upload Webhook": {
      "main": [
        [
          {
            "node": "File Validation & Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Validation & Metadata": {
      "main": [
        [
          {
            "node": "Save to Upload Directory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Upload Directory": {
      "main": [
        [
          {
            "node": "Store Document Metadata",
            "type": "main",
            "index": 0
          },
          {
            "node": "Trigger Quality Assessment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Quality Assessment": {
      "main": [
        [
          {
            "node": "Upload Success Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Success Check": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Response": {
      "main": [
        [
          {
            "node": "HTTP Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Response": {
      "main": [
        [
          {
            "node": "HTTP Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Document Metadata": {
      "main": [
        [
          {
            "node": "Upload Success Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "imp_phase1_upload_handler"
  },
  "id": "imp_upload_handler_phase1",
  "tags": [
    {
      "createdAt": "2025-07-04T00:00:00.000Z",
      "updatedAt": "2025-07-04T00:00:00.000Z",
      "id": "imp_phase1",
      "name": "IMP Phase 1"
    }
  ]
}
