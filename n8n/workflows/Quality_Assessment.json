{
  "name": "IMP Quality Assessment",
  "nodes": [
    {
      "parameters": {
        "path": "/quality/assess",
        "httpMethod": "POST",
        "responseMode": "responseNode"
      },
      "id": "qa1-webhook-start",
      "name": "Quality Assessment Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "imp-quality-assessment"
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Extract document information and prepare for quality assessment\nconst document = $json.document || $json;\n\n// Validate required fields\nif (!document.id || !document.mime_type) {\n  throw new Error('Missing required document fields: id, mime_type');\n}\n\n// Determine if document is image-based for quality assessment\nconst imageFormats = ['image/jpeg', 'image/png', 'image/tiff', 'image/bmp'];\nconst isImageDocument = imageFormats.includes(document.mime_type);\nconst isPdfDocument = document.mime_type === 'application/pdf';\nconst isWordDocument = document.mime_type.includes('word');\n\n// Initialize quality factors\nconst qualityFactors = {\n  file_format: isImageDocument ? 'image' : (isPdfDocument ? 'pdf' : 'document'),\n  file_size_mb: document.file_size_mb || 0,\n  is_mobile_photo: false, // Will be determined by image analysis\n  has_text_layer: isPdfDocument || isWordDocument,\n  estimated_pages: 1 // Default, will be updated\n};\n\n// Base quality score calculation\nlet baseQualityScore = 50; // Start with medium quality\n\n// Format-based scoring\nif (isWordDocument) {\n  baseQualityScore = 95; // Word docs have structured text\n} else if (isPdfDocument) {\n  baseQualityScore = 85; // PDFs usually have good quality\n} else if (isImageDocument) {\n  baseQualityScore = 60; // Images need analysis\n}\n\n// File size considerations (very large or very small files may have issues)\nif (document.file_size_mb > 20) {\n  baseQualityScore -= 10; // Large files may have quality issues\n} else if (document.file_size_mb < 0.1) {\n  baseQualityScore -= 15; // Very small files likely low quality\n}\n\nreturn {\n  json: {\n    document_id: document.id,\n    quality_factors: qualityFactors,\n    base_quality_score: baseQualityScore,\n    needs_image_analysis: isImageDocument || isPdfDocument,\n    processing_priority: baseQualityScore >= 75 ? 'high' : (baseQualityScore >= 50 ? 'medium' : 'low')\n  }\n};"
      },
      "id": "qa2-extract-info",
      "name": "Extract Document Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "needs_analysis",
              "leftValue": "={{ $json.needs_image_analysis }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "qa3-check-analysis-needed",
      "name": "Needs Image Analysis?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [660, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Simulate image quality analysis (Phase 1 - basic simulation)\n// In Phase 2, this will integrate with actual image analysis APIs\n\nconst documentId = $json.document_id;\nconst baseScore = $json.base_quality_score;\nconst qualityFactors = $json.quality_factors;\n\n// Simulate image analysis results based on file characteristics\nlet simulatedAnalysis = {\n  blur_score: Math.random() * 100, // 0-100 (higher is better)\n  contrast_score: Math.random() * 100,\n  resolution_score: Math.random() * 100,\n  text_clarity: Math.random() * 100,\n  skew_angle: (Math.random() - 0.5) * 20, // -10 to +10 degrees\n  mobile_photo_indicators: {\n    exif_data: Math.random() > 0.7, // 30% chance of mobile EXIF\n    aspect_ratio: Math.random() > 0.5 ? '4:3' : '16:9',\n    compression_artifacts: Math.random() > 0.6\n  }\n};\n\n// Determine if it's likely a mobile photo\nconst isMobilePhoto = (\n  simulatedAnalysis.mobile_photo_indicators.exif_data ||\n  simulatedAnalysis.blur_score < 60 ||\n  simulatedAnalysis.contrast_score < 50\n);\n\n// Calculate quality adjustments\nlet qualityAdjustment = 0;\n\n// Blur penalty\nif (simulatedAnalysis.blur_score < 50) {\n  qualityAdjustment -= 20;\n} else if (simulatedAnalysis.blur_score < 70) {\n  qualityAdjustment -= 10;\n}\n\n// Contrast adjustment\nif (simulatedAnalysis.contrast_score > 80) {\n  qualityAdjustment += 10;\n} else if (simulatedAnalysis.contrast_score < 40) {\n  qualityAdjustment -= 15;\n}\n\n// Resolution penalty\nif (simulatedAnalysis.resolution_score < 60) {\n  qualityAdjustment -= 10;\n}\n\n// Mobile photo penalty\nif (isMobilePhoto) {\n  qualityAdjustment -= 15;\n}\n\n// Calculate final quality score\nconst finalQualityScore = Math.max(0, Math.min(100, baseScore + qualityAdjustment));\n\n// Determine processing tier based on README thresholds\nlet processingTier;\nlet tierDescription;\nlet estimatedCost;\n\nif (finalQualityScore >= 75) {\n  processingTier = 'high_quality';\n  tierDescription = 'Fully automated processing';\n  estimatedCost = 0.02;\n} else if (finalQualityScore >= 50) {\n  processingTier = 'medium_quality';\n  tierDescription = 'Enhanced processing + auto-validation';\n  estimatedCost = 0.15;\n} else {\n  processingTier = 'low_quality';\n  tierDescription = 'Human verification required';\n  estimatedCost = 0.25;\n}\n\nreturn {\n  json: {\n    document_id: documentId,\n    quality_score: Math.round(finalQualityScore),\n    processing_tier: processingTier,\n    tier_description: tierDescription,\n    estimated_cost: estimatedCost,\n    is_mobile_photo: isMobilePhoto,\n    quality_analysis: {\n      blur_score: Math.round(simulatedAnalysis.blur_score),\n      contrast_score: Math.round(simulatedAnalysis.contrast_score),\n      resolution_score: Math.round(simulatedAnalysis.resolution_score),\n      text_clarity: Math.round(simulatedAnalysis.text_clarity),\n      skew_angle: Math.round(simulatedAnalysis.skew_angle * 100) / 100\n    },\n    recommendations: {\n      auto_rotate: Math.abs(simulatedAnalysis.skew_angle) > 2,\n      enhance_contrast: simulatedAnalysis.contrast_score < 60,\n      sharpen_image: simulatedAnalysis.blur_score < 70,\n      requires_human_review: finalQualityScore < 50\n    },\n    processing_time_estimate: finalQualityScore >= 75 ? '30 seconds' : (finalQualityScore >= 50 ? '2 minutes' : '5-10 minutes'),\n    confidence: Math.round((finalQualityScore / 100) * 90 + 10) // 10-100% confidence\n  }\n};"
      },
      "id": "qa4-image-analysis",
      "name": "Simulate Image Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 240]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Skip image analysis for text-based documents\nconst documentId = $json.document_id;\nconst baseScore = $json.base_quality_score;\n\n// Text-based documents get high quality scores\nconst finalQualityScore = baseScore;\n\nlet processingTier;\nlet tierDescription;\nlet estimatedCost;\n\nif (finalQualityScore >= 75) {\n  processingTier = 'high_quality';\n  tierDescription = 'Fully automated processing';\n  estimatedCost = 0.02;\n} else if (finalQualityScore >= 50) {\n  processingTier = 'medium_quality';\n  tierDescription = 'Enhanced processing + auto-validation';\n  estimatedCost = 0.15;\n} else {\n  processingTier = 'low_quality';\n  tierDescription = 'Human verification required';\n  estimatedCost = 0.25;\n}\n\nreturn {\n  json: {\n    document_id: documentId,\n    quality_score: finalQualityScore,\n    processing_tier: processingTier,\n    tier_description: tierDescription,\n    estimated_cost: estimatedCost,\n    is_mobile_photo: false,\n    quality_analysis: {\n      has_text_layer: true,\n      format_quality: 'high',\n      structured_content: true\n    },\n    recommendations: {\n      direct_text_extraction: true,\n      requires_human_review: false\n    },\n    processing_time_estimate: '15 seconds',\n    confidence: 95\n  }\n};"
      },
      "id": "qa5-text-document",
      "name": "Text Document Quality",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 360]
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/v1/documents/{{ $json.document_id }}/quality",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "qa6-store-results",
      "name": "Store Quality Results",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1060, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Trigger next workflow based on quality results\nconst qualityResult = $json;\nconst processingTier = qualityResult.processing_tier;\n\n// Determine next workflow based on tier\nlet nextWorkflow;\nlet webhookUrl;\n\nswitch (processingTier) {\n  case 'high_quality':\n    nextWorkflow = 'Data_Extraction_Primary';\n    webhookUrl = 'http://localhost:5678/webhook/imp-data-extraction';\n    break;\n  case 'medium_quality':\n    nextWorkflow = 'Document_Classification';\n    webhookUrl = 'http://localhost:5678/webhook/imp-classification';\n    break;\n  case 'low_quality':\n    nextWorkflow = 'Smart_Router';\n    webhookUrl = 'http://localhost:5678/webhook/imp-smart-router';\n    break;\n  default:\n    nextWorkflow = 'Smart_Router';\n    webhookUrl = 'http://localhost:5678/webhook/imp-smart-router';\n}\n\nreturn {\n  json: {\n    ...qualityResult,\n    next_workflow: nextWorkflow,\n    webhook_url: webhookUrl,\n    trigger_next_step: true\n  }\n};"
      },
      "id": "qa7-prepare-routing",
      "name": "Prepare Smart Routing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1260, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.webhook_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "qa8-trigger-next",
      "name": "Trigger Next Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1460, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, quality_assessment: $json } }}"
      },
      "id": "qa9-response",
      "name": "Quality Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1660, 300]
    }
  ],
  "pinData": {},
  "connections": {
    "Quality Assessment Trigger": {
      "main": [
        [
          {
            "node": "Extract Document Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Document Info": {
      "main": [
        [
          {
            "node": "Needs Image Analysis?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Image Analysis?": {
      "main": [
        [
          {
            "node": "Simulate Image Analysis",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text Document Quality",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simulate Image Analysis": {
      "main": [
        [
          {
            "node": "Store Quality Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Document Quality": {
      "main": [
        [
          {
            "node": "Store Quality Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Quality Results": {
      "main": [
        [
          {
            "node": "Prepare Smart Routing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Smart Routing": {
      "main": [
        [
          {
            "node": "Trigger Next Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Next Workflow": {
      "main": [
        [
          {
            "node": "Quality Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "imp_phase1_quality_assessment"
  },
  "id": "imp_quality_assessment_phase1",
  "tags": [
    {
      "createdAt": "2025-07-04T00:00:00.000Z",
      "updatedAt": "2025-07-04T00:00:00.000Z",
      "id": "imp_phase1",
      "name": "IMP Phase 1"
    }
  ]
}
