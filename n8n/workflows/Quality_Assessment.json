{
  "name": "Quality Assessment",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "quality-assessment",
        "options": {}
      },
      "id": "quality-webhook",
      "name": "Quality Assessment Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "quality-assessment"
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/documents/{{ $json.document_id }}",
        "authentication": "none",
        "requestMethod": "GET",
        "options": {}
      },
      "id": "get-document",
      "name": "Get Document Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "\n// Quality Assessment Engine - Phase 1\nconst documentData = $input.all()[0].json;\nconst timestamp = new Date().toISOString();\n\n// Initialize quality score\nlet qualityScore = 0;\nlet qualityFactors = [];\nlet processingTier = 'low';\n\n// File size assessment (20 points max)\nconst fileSize = documentData.file_size || 0;\nif (fileSize > 100000 && fileSize < 5000000) { // 100KB - 5MB optimal\n  qualityScore += 20;\n  qualityFactors.push('optimal_file_size');\n} else if (fileSize > 50000) {\n  qualityScore += 10;\n  qualityFactors.push('acceptable_file_size');\n}\n\n// File type assessment (15 points max)\nconst fileType = documentData.file_type?.toLowerCase();\nif (['.pdf'].includes(fileType)) {\n  qualityScore += 15;\n  qualityFactors.push('pdf_format');\n} else if (['.doc', '.docx'].includes(fileType)) {\n  qualityScore += 12;\n  qualityFactors.push('word_format');\n} else if (['.jpg', '.jpeg', '.png'].includes(fileType)) {\n  qualityScore += 8;\n  qualityFactors.push('image_format');\n}\n\n// Filename quality assessment (15 points max)\nconst filename = documentData.filename?.toLowerCase() || '';\nif (filename.includes('cv') || filename.includes('resume')) {\n  qualityScore += 15;\n  qualityFactors.push('cv_filename');\n} else if (filename.includes('passport') || filename.includes('certificate')) {\n  qualityScore += 12;\n  qualityFactors.push('document_filename');\n} else if (filename.length > 5 && !filename.includes('untitled')) {\n  qualityScore += 8;\n  qualityFactors.push('descriptive_filename');\n}\n\n// Metadata quality (10 points max)\nif (documentData.metadata) {\n  qualityScore += 5;\n  qualityFactors.push('has_metadata');\n  if (documentData.metadata.upload_ip && documentData.metadata.upload_ip !== 'unknown') {\n    qualityScore += 3;\n    qualityFactors.push('valid_ip');\n  }\n  if (documentData.metadata.user_agent && documentData.metadata.user_agent !== 'unknown') {\n    qualityScore += 2;\n    qualityFactors.push('valid_user_agent');\n  }\n}\n\n// Upload recency bonus (10 points max)\nconst uploadTime = new Date(documentData.upload_timestamp || timestamp);\nconst timeDiff = Date.now() - uploadTime.getTime();\nconst hoursDiff = timeDiff / (1000 * 60 * 60);\nif (hoursDiff < 1) {\n  qualityScore += 10;\n  qualityFactors.push('recent_upload');\n} else if (hoursDiff < 24) {\n  qualityScore += 5;\n  qualityFactors.push('same_day_upload');\n}\n\n// File extension validation bonus (5 points max)\nif (fileType && !fileType.includes('tmp') && !fileType.includes('temp')) {\n  qualityScore += 5;\n  qualityFactors.push('valid_extension');\n}\n\n// Random simulation factor for demo (15 points max)\n// In real implementation, this would be actual OCR pre-scan\nconst randomFactor = Math.floor(Math.random() * 16);\nqualityScore += randomFactor;\nif (randomFactor > 10) {\n  qualityFactors.push('high_readability');\n} else if (randomFactor > 5) {\n  qualityFactors.push('medium_readability');\n} else {\n  qualityFactors.push('low_readability');\n}\n\n// Determine processing tier based on quality score\nif (qualityScore >= 75) {\n  processingTier = 'high';\n} else if (qualityScore >= 50) {\n  processingTier = 'medium';\n} else {\n  processingTier = 'low';\n}\n\n// Cap at 100\nqualityScore = Math.min(qualityScore, 100);\n\nconst result = {\n  document_id: documentData.document_id,\n  quality_score: qualityScore,\n  processing_tier: processingTier,\n  quality_factors: qualityFactors,\n  assessment_timestamp: timestamp,\n  recommended_workflow: {\n    'high': 'Data_Extraction_Primary',\n    'medium': 'Data_Extraction_Primary',\n    'low': 'Manual_Review_Queue'\n  }[processingTier],\n  estimated_processing_time: {\n    'high': '2-5 minutes',\n    'medium': '5-10 minutes', \n    'low': '15-30 minutes'\n  }[processingTier],\n  confidence_level: qualityScore >= 75 ? 'high' : qualityScore >= 50 ? 'medium' : 'low'\n};\n\nreturn [{ json: result }];\n"
      },
      "id": "quality-engine",
      "name": "Quality Assessment Engine",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/quality/store",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "quality_score",
              "value": "={{ $json.quality_score }}"
            },
            {
              "name": "processing_tier",
              "value": "={{ $json.processing_tier }}"
            },
            {
              "name": "quality_factors",
              "value": "={{ $json.quality_factors }}"
            },
            {
              "name": "assessment_timestamp",
              "value": "={{ $json.assessment_timestamp }}"
            }
          ]
        },
        "options": {}
      },
      "id": "store-quality",
      "name": "Store Quality Assessment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:5678/webhook/smart-router",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "quality_score",
              "value": "={{ $json.quality_score }}"
            },
            {
              "name": "processing_tier",
              "value": "={{ $json.processing_tier }}"
            },
            {
              "name": "recommended_workflow",
              "value": "={{ $json.recommended_workflow }}"
            }
          ]
        },
        "options": {}
      },
      "id": "trigger-router",
      "name": "Trigger Smart Router",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 300]
    }
  ],
  "connections": {
    "Quality Assessment Webhook": {
      "main": [
        [
          {
            "node": "Get Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Document Data": {
      "main": [
        [
          {
            "node": "Quality Assessment Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quality Assessment Engine": {
      "main": [
        [
          {
            "node": "Store Quality Assessment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Quality Assessment": {
      "main": [
        [
          {
            "node": "Trigger Smart Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "quality-assessment",
  "tags": [
    {
      "createdAt": "2025-01-07T12:00:00.000Z",
      "updatedAt": "2025-01-07T12:00:00.000Z",
      "id": "imp-phase1",
      "name": "IMP Phase 1"
    }
  ]
}
