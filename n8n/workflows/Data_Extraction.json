{
  "name": "Data Extraction Primary",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "data-extraction",
        "options": {}
      },
      "id": "extraction-webhook",
      "name": "Data Extraction Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "data-extraction"
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/documents/{{ $json.document_id }}/full",
        "authentication": "none",
        "requestMethod": "GET",
        "options": {}
      },
      "id": "get-full-document",
      "name": "Get Full Document Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "tier-check",
              "leftValue": "={{ $json.processing_tier }}",
              "rightValue": "high",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "tier-switch",
      "name": "Processing Tier Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "\n// High-Tier Data Extraction - Phase 1 (AI Simulation)\nconst documentData = $input.all()[0].json;\nconst timestamp = new Date().toISOString();\n\n// Simulate AI-powered OCR and data extraction\nconst documentType = documentData.document_type || 'unknown';\nconst confidence = documentData.confidence || 50;\n\n// Initialize extraction result\nlet extractedData = {};\nlet extractionConfidence = 0;\nlet extractionMethod = 'ai_simulation';\nlet processingTime = Math.floor(Math.random() * 180) + 120; // 2-5 minutes\n\n// CV-specific extraction\nif (documentType === 'cv') {\n  extractedData = {\n    personal_info: {\n      full_name: `John Doe ${Math.floor(Math.random() * 1000)}`,\n      email: `john.doe${Math.floor(Math.random() * 1000)}@email.com`,\n      phone: `+92-300-${Math.floor(Math.random() * 9000000) + 1000000}`,\n      address: 'Karachi, Pakistan',\n      nationality: 'Pakistani'\n    },\n    work_experience: [\n      {\n        position: 'Software Engineer',\n        company: 'Tech Solutions Ltd',\n        duration: '2020-2023',\n        responsibilities: ['Software development', 'Team collaboration', 'Project management']\n      },\n      {\n        position: 'Junior Developer',\n        company: 'StartUp Inc',\n        duration: '2018-2020',\n        responsibilities: ['Web development', 'Database design', 'Bug fixing']\n      }\n    ],\n    education: [\n      {\n        degree: 'Bachelor of Computer Science',\n        institution: 'University of Karachi',\n        year: '2018',\n        grade: 'First Class'\n      }\n    ],\n    skills: ['JavaScript', 'Python', 'React', 'Node.js', 'SQL', 'Git'],\n    languages: ['English (Fluent)', 'Urdu (Native)', 'Arabic (Basic)']\n  };\n  extractionConfidence = 88 + Math.floor(Math.random() * 10);\n  \n} else if (documentType === 'passport') {\n  extractedData = {\n    personal_info: {\n      full_name: `Passport Holder ${Math.floor(Math.random() * 1000)}`,\n      passport_number: `AA${Math.floor(Math.random() * 9000000) + 1000000}`,\n      nationality: 'Pakistani',\n      date_of_birth: '1990-05-15',\n      place_of_birth: 'Karachi',\n      gender: 'M'\n    },\n    passport_details: {\n      issue_date: '2020-01-15',\n      expiry_date: '2030-01-15',\n      issuing_authority: 'Government of Pakistan',\n      place_of_issue: 'Karachi'\n    }\n  };\n  extractionConfidence = 92 + Math.floor(Math.random() * 6);\n  \n} else if (documentType === 'certificate') {\n  extractedData = {\n    certificate_info: {\n      certificate_name: 'Certificate of Completion',\n      issued_to: `Certificate Holder ${Math.floor(Math.random() * 1000)}`,\n      issued_by: 'Educational Institute',\n      issue_date: '2023-06-15',\n      field_of_study: 'Information Technology',\n      grade: 'A+'\n    },\n    validity: {\n      valid_from: '2023-06-15',\n      valid_until: 'Lifetime',\n      verification_code: `CERT${Math.floor(Math.random() * 900000) + 100000}`\n    }\n  };\n  extractionConfidence = 85 + Math.floor(Math.random() * 12);\n  \n} else {\n  // Generic document extraction\n  extractedData = {\n    document_content: {\n      text_content: 'Sample document text content extracted using AI OCR simulation',\n      structure: 'Standard document format',\n      metadata: {\n        pages: 1,\n        language: 'English',\n        format: 'Standard'\n      }\n    }\n  };\n  extractionConfidence = 70 + Math.floor(Math.random() * 20);\n}\n\n// Add quality metrics\nconst qualityMetrics = {\n  text_clarity: Math.floor(Math.random() * 20) + 80,\n  structure_detection: Math.floor(Math.random() * 15) + 85,\n  field_completeness: Math.floor(Math.random() * 10) + 90,\n  data_accuracy: extractionConfidence\n};\n\n// Processing statistics\nconst processingStats = {\n  processing_time_seconds: processingTime,\n  extraction_method: extractionMethod,\n  ai_model_confidence: extractionConfidence,\n  fields_extracted: Object.keys(extractedData).length,\n  validation_status: extractionConfidence >= 85 ? 'auto_approved' : 'requires_review'\n};\n\nconst result = {\n  document_id: documentData.document_id,\n  extraction_timestamp: timestamp,\n  extracted_data: extractedData,\n  extraction_confidence: extractionConfidence,\n  quality_metrics: qualityMetrics,\n  processing_stats: processingStats,\n  next_step: extractionConfidence >= 85 ? 'completion' : 'validation',\n  estimated_accuracy: `${extractionConfidence}%`\n};\n\nreturn [{ json: result }];\n"
      },
      "id": "high-tier-extraction",
      "name": "High-Tier AI Extraction",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "jsCode": "\n// Medium-Tier Data Extraction - Phase 1 (Hybrid Simulation)\nconst documentData = $input.all()[0].json;\nconst timestamp = new Date().toISOString();\n\n// Simulate hybrid OCR + rule-based extraction\nconst documentType = documentData.document_type || 'unknown';\nconst confidence = documentData.confidence || 50;\n\nlet extractedData = {};\nlet extractionConfidence = 0;\nlet extractionMethod = 'hybrid_simulation';\nlet processingTime = Math.floor(Math.random() * 300) + 300; // 5-10 minutes\n\n// Reduced confidence compared to high-tier\nif (documentType === 'cv') {\n  extractedData = {\n    personal_info: {\n      full_name: `CV Holder ${Math.floor(Math.random() * 1000)}`,\n      email: `cv.holder${Math.floor(Math.random() * 1000)}@email.com`,\n      phone: `+92-300-${Math.floor(Math.random() * 9000000) + 1000000}`,\n      address: 'Pakistan' // Less specific\n    },\n    work_experience: [\n      {\n        position: 'Position Title',\n        company: 'Company Name',\n        duration: '2020-Present',\n        responsibilities: ['Extracted text may need verification']\n      }\n    ],\n    education: [\n      {\n        degree: 'Degree Title',\n        institution: 'Institution Name',\n        year: 'Year'\n      }\n    ],\n    skills: ['Skill extraction may be incomplete'],\n    languages: ['Language detection limited']\n  };\n  extractionConfidence = 70 + Math.floor(Math.random() * 15);\n  \n} else if (documentType === 'passport') {\n  extractedData = {\n    personal_info: {\n      full_name: `Name Extraction ${Math.floor(Math.random() * 1000)}`,\n      passport_number: 'Number may need verification',\n      nationality: 'Pakistani',\n      date_of_birth: 'Date extraction uncertain'\n    },\n    passport_details: {\n      issue_date: 'Date needs verification',\n      expiry_date: 'Date needs verification',\n      issuing_authority: 'Authority identification uncertain'\n    }\n  };\n  extractionConfidence = 75 + Math.floor(Math.random() * 10);\n  \n} else {\n  extractedData = {\n    document_content: {\n      text_content: 'Partial text extraction - some content may be missing',\n      structure: 'Basic structure detection',\n      metadata: {\n        pages: 1,\n        language: 'Detected language uncertain',\n        format: 'Format detection limited'\n      }\n    }\n  };\n  extractionConfidence = 60 + Math.floor(Math.random() * 20);\n}\n\nconst qualityMetrics = {\n  text_clarity: Math.floor(Math.random() * 30) + 60,\n  structure_detection: Math.floor(Math.random() * 25) + 65,\n  field_completeness: Math.floor(Math.random() * 30) + 60,\n  data_accuracy: extractionConfidence\n};\n\nconst processingStats = {\n  processing_time_seconds: processingTime,\n  extraction_method: extractionMethod,\n  hybrid_confidence: extractionConfidence,\n  fields_extracted: Object.keys(extractedData).length,\n  validation_status: 'requires_review' // Always requires review for medium tier\n};\n\nconst result = {\n  document_id: documentData.document_id,\n  extraction_timestamp: timestamp,\n  extracted_data: extractedData,\n  extraction_confidence: extractionConfidence,\n  quality_metrics: qualityMetrics,\n  processing_stats: processingStats,\n  next_step: 'validation',\n  estimated_accuracy: `${extractionConfidence}%`,\n  requires_human_review: true\n};\n\nreturn [{ json: result }];\n"
      },
      "id": "medium-tier-extraction",
      "name": "Medium-Tier Hybrid Extraction",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 380]
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/extraction/store",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "extracted_data",
              "value": "={{ $json.extracted_data }}"
            },
            {
              "name": "extraction_confidence",
              "value": "={{ $json.extraction_confidence }}"
            },
            {
              "name": "quality_metrics",
              "value": "={{ $json.quality_metrics }}"
            },
            {
              "name": "processing_stats",
              "value": "={{ $json.processing_stats }}"
            }
          ]
        },
        "options": {}
      },
      "id": "store-extraction",
      "name": "Store Extraction Results",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "high-confidence",
              "leftValue": "={{ $json.extraction_confidence }}",
              "rightValue": 85,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "confidence-check",
      "name": "Confidence Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/documents/complete",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "status",
              "value": "completed"
            },
            {
              "name": "completion_timestamp",
              "value": "={{ $json.extraction_timestamp }}"
            }
          ]
        },
        "options": {}
      },
      "id": "mark-complete",
      "name": "Mark as Complete",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 240]
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/validation/queue",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "reason",
              "value": "Low extraction confidence - requires validation"
            },
            {
              "name": "confidence",
              "value": "={{ $json.extraction_confidence }}"
            }
          ]
        },
        "options": {}
      },
      "id": "queue-validation",
      "name": "Queue for Validation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 360]
    }
  ],
  "connections": {
    "Data Extraction Webhook": {
      "main": [
        [
          {
            "node": "Get Full Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Full Document Data": {
      "main": [
        [
          {
            "node": "Processing Tier Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processing Tier Switch": {
      "main": [
        [
          {
            "node": "High-Tier AI Extraction",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Medium-Tier Hybrid Extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "High-Tier AI Extraction": {
      "main": [
        [
          {
            "node": "Store Extraction Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Medium-Tier Hybrid Extraction": {
      "main": [
        [
          {
            "node": "Store Extraction Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Extraction Results": {
      "main": [
        [
          {
            "node": "Confidence Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Confidence Check": {
      "main": [
        [
          {
            "node": "Mark as Complete",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Queue for Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "data-extraction-primary",
  "tags": [
    {
      "createdAt": "2025-01-07T12:00:00.000Z",
      "updatedAt": "2025-01-07T12:00:00.000Z",
      "id": "imp-phase1",
      "name": "IMP Phase 1"
    }
  ]
}
