{
  "nodes": [
    {
      "parameters": {
        "fileSelector": "={{ $json.image_files.replace('./documents', '/documents') }}",
        "options": {
          "dataPropertyName": "file"
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        848,
        -64
      ],
      "id": "95e862ef-e83d-4f5f-9d47-c36978e8d1c5",
      "name": "Read/Write Files from Disk",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "image_files",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        608,
        -64
      ],
      "id": "c6e687f8-0bb1-4f0d-9619-21919f29672b",
      "name": "Split Out"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/extract-images",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        400,
        -64
      ],
      "id": "c5277224-a9a5-475a-a344-5e4e5c5310cd",
      "name": "Extract Images"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "original_filename",
              "field2": "original_filename"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -672,
        96
      ],
      "id": "073bfebb-1b5c-40a4-96da-5d2ae5168a90",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "file"
            }
          }
        }
      },
      "id": "678e3890-d1f1-484c-a14f-8617439ad704",
      "name": "Convert DOCX to PDF (FastAPI)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -16,
        -64
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "doc",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "30e3bc04-df43-4991-976f-5d54389e6854"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8b5d390e-d2e6-4180-8bde-b5f9e6c18698",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "docx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3e126769-faf2-4943-859e-abe29e904eb0",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a7951a45-f1ca-4cea-89a9-b44027f36cf1",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -400,
        64
      ],
      "id": "2ea163c3-b315-49c8-8a95-cd3c3cf36dc2",
      "name": "Switch1"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced file type classification with better detection\nconst items = $input.all();\nconst processedItems = [];\n\nfunction detectFormat(documentType, filename, mimetype) {\n  // Priority 1: Use backend classification if reliable\n  if (documentType && documentType !== 'unknown') {\n    return documentType;\n  }\n  \n  // Priority 2: MIME type analysis\n  if (mimetype) {\n    const mimeType = mimetype.toLowerCase();\n    if (mimeType.includes('pdf')) return 'pdf';\n    if (mimeType.includes('msword') || mimeType.includes('word')) return 'doc';\n    if (mimeType.includes('officedocument.wordprocessingml.document')) return 'docx';\n    if (mimeType.includes('image')) {\n      if (mimeType.includes('jpeg') || mimeType.includes('jpg')) return 'jpg';\n      if (mimeType.includes('png')) return 'png';\n      return 'image';\n    }\n  }\n  \n  // Priority 3: Filename extension\n  if (filename) {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    const validExtensions = ['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png'];\n    if (validExtensions.includes(ext)) {\n      return ext === 'jpeg' ? 'jpg' : ext;\n    }\n  }\n  \n  return 'unknown';\n}\n\nfor (const item of items) {\n  const data = item.json;\n  \n  const documentType = data.document_type;\n  const filename = data.original_filename || data.fileName || data.filename;\n  const mimetype = data.mimeType || data.mimetype;\n  \n  const format = detectFormat(documentType, filename, mimetype);\n  \n  // Add additional metadata for processing\n  const result = {\n    json: {\n      ...data, // Preserve all original data\n      format: format,\n      file_extension: filename ? filename.split('.').pop()?.toLowerCase() : null,\n      mime_type: mimetype,\n      classification_complete: true,\n      processing_ready: format !== 'unknown',\n      // Ensure filename is preserved\n      original_filename: filename || `document_${data.document_id || 'unknown'}`,\n      // Add debugging info\n      format_detection: {\n        input_type: documentType,\n        input_filename: filename,\n        input_mimetype: mimetype,\n        final_format: format\n      }\n    }\n  };\n  \n  processedItems.push(result);\n}\n\nreturn processedItems;"
      },
      "id": "9e34dcfe-f614-40b3-821d-2861af2a4ebb",
      "name": "Classify File Type1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        448
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced classification logic with binary data preservation\nconst items = $input.all();\nconst processedItems = [];\n\nfunction extractFilename(data) {\n  if (data.converted_pdf) return data.converted_pdf.split(/[\\/]/).pop();\n  if (data.converted_docx) return data.converted_docx.split(/[\\/]/).pop();\n  if (data.original_filename && data.original_filename !== 'undefined' && data.original_filename !== 'null') return data.original_filename;\n  if (data.fileName) return data.fileName;\n  if (data.filename) return data.filename;\n  if (data.name) return data.name;\n  if (Array.isArray(data.file) && data.file.length > 0 && data.file[0].filename) return data.file[0].filename;\n  if (data.document_id) return `document_${data.document_id}.pdf`;\n  return 'document_unknown.pdf';\n}\n\nfunction preserveBinaryData(item) {\n  // Preserve all binary data properties\n  if (item.binary) {\n    return { ...item.binary };\n  }\n  return null;\n}\n\nfunction detectType(filename, mimetype) {\n  const ext = filename.split('.').pop()?.toLowerCase();\n  // Prefer mimetype if it is very specific\n  if (mimetype) {\n    const mt = mimetype.toLowerCase();\n    if (mt.includes('officedocument.wordprocessingml.document')) return 'docx';\n    if (mt.includes('msword')) {\n      // Some browsers send .docx as msword, so check extension\n      if (ext === 'docx') return 'docx';\n      return 'doc';\n    }\n    if (mt.includes('pdf')) return 'pdf';\n    if (mt.includes('image')) return 'image';\n  }\n  // Fallback to extension\n  if (ext === 'docx') return 'docx';\n  if (ext === 'doc') return 'doc';\n  if (ext === 'pdf') return 'pdf';\n  if (['jpg','jpeg','png'].includes(ext)) return 'image';\n  return 'unknown';\n}\n\nfor (const item of items) {\n  const data = item.json;\n  const documentId = data.document_id;\n  const mimetype = data.mimeType || data.mimetype || (Array.isArray(data.file) && data.file.length > 0 && data.file[0].mimetype) || undefined;\n  const preferredFilename = extractFilename(data);\n  const detectedType = detectType(preferredFilename, mimetype);\n  const qualityScore = data.quality_score || 0;\n  const confidence = data.confidence || 0;\n  let classificationFactors = [];\n  let processingRequirements = [];\n  if (detectedType === 'pdf') {\n    classificationFactors.push('PDF document detected');\n    processingRequirements.push('OCR processing', 'Text extraction');\n  } else if (detectedType === 'docx') {\n    classificationFactors.push('DOCX document detected');\n    processingRequirements.push('Direct text extraction', 'Format parsing');\n  } else if (detectedType === 'doc') {\n    classificationFactors.push('DOC document detected');\n    processingRequirements.push('Convert to DOCX', 'Direct text extraction');\n  } else if (detectedType === 'image') {\n    classificationFactors.push('Image document detected');\n    processingRequirements.push('OCR processing', 'Image enhancement');\n  } else {\n    classificationFactors.push('Unknown document type');\n    processingRequirements.push('Manual review');\n  }\n  if (qualityScore >= 0.8) {\n    classificationFactors.push('High quality document');\n    processingRequirements.push('Standard processing');\n  } else if (qualityScore >= 0.5) {\n    classificationFactors.push('Medium quality document');\n    processingRequirements.push('Enhanced processing', 'Quality improvement');\n  } else {\n    classificationFactors.push('Low quality document');\n    processingRequirements.push('Manual review', 'Quality enhancement');\n  }\n  const filename = preferredFilename.toLowerCase();\n  let subType = 'general';\n  if (filename.includes('cv') || filename.includes('resume')) {\n    classificationFactors.push('Resume/CV document identified');\n    processingRequirements.push('Personal info extraction', 'Skills parsing');\n    subType = 'resume';\n  } else if (filename.includes('application')) {\n    classificationFactors.push('Application form identified');\n    processingRequirements.push('Form field extraction', 'Structured data parsing');\n    subType = 'application_form';\n  } else if (filename.includes('certificate')) {\n    subType = 'certificate';\n  }\n  processedItems.push({\n    json: {\n      document_id: documentId,\n      document_type: detectedType,\n      sub_type: subType,\n      confidence: confidence,\n      classification_factors: classificationFactors,\n      processing_requirements: processingRequirements,\n      original_filename: preferredFilename,\n      quality_score: qualityScore,\n      classification_metadata: {\n        source_filename: preferredFilename,\n        detected_extension: preferredFilename.split('.').pop()?.toLowerCase(),\n        original_type: data.document_type || 'unknown',\n        final_type: detectedType,\n        mimetype: mimetype\n      }\n    }\n  });\n}\n\nreturn processedItems;"
      },
      "id": "7ff93279-1642-461a-b1d2-78b8b655c323",
      "name": "Classification Engine1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1344,
        448
      ]
    },
    {
      "parameters": {
        "formTitle": "upload",
        "formFields": {
          "values": [
            {
              "fieldLabel": "file",
              "fieldType": "file"
            }
          ]
        },
        "responseMode": "lastNode",
        "options": {
          "buttonLabel": "Submit"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -1456,
        80
      ],
      "id": "0e605e9a-4b01-4a4d-a662-82ed479e353a",
      "name": "On form submission",
      "webhookId": "e5dee929-3e06-407f-aac1-3a32bf6a505e"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d5e8589-09d6-4b11-b17a-e29fb8f032db",
              "name": "original_filename",
              "value": "={{ $json.file[0].filename }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -896,
        80
      ],
      "id": "c53af63a-5cde-47f4-841a-c1d479540c3c",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d505e596-8a4b-4118-adac-5c1be8492a60",
              "name": "original_filename",
              "value": "={{ $json.data.original_filename }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -784,
        448
      ],
      "id": "5e969a18-e418-439d-abea-0811ec8274df",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "jsCode": "// Move file[0] to binary.file if needed\nreturn $input.all().map(item => {\n  if (item.json.file && Array.isArray(item.json.file) && item.json.file[0]) {\n    item.binary = item.binary || {};\n    item.binary.file = item.binary.file || item.json.file[0];\n    delete item.json.file; // Clean up JSON if you want\n  }\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        400
      ],
      "id": "05850976-f01d-485d-bede-04d2d4a2a300",
      "name": "Code",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Aggregate all OCR results into a single string\nlet allText = $input.all()\n  .map(item => item.json.extractedText || \"\")\n  .join(\"\\n\\n---\\n\\n\"); // separator between pages\n\nreturn [{\n  json: {\n    fullText: allText\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2352,
        560
        1104,
        112
      ],
      "id": "f26bc64c-2e49-4959-8f1e-acc32a1951db",
      "name": "Code4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.fullText }}\n\nExtract ALL available information from this CV/resume and return it as a comprehensive JSON object. Include:\n\n1. **Personal Information**:\n   - Full name, email, phone, address, date of birth, nationality, LinkedIn, website, profile photo\n\n2. **Work Experience**:\n   - Company names, job titles, dates, responsibilities, achievements, technologies used\n\n3. **Education**:\n   - Institutions, degrees, majors, graduation dates, GPA, honors, relevant coursework\n\n4. **Skills**:\n   - Technical skills, programming languages, frameworks, tools, soft skills, languages spoken\n\n5. **Projects**:\n   - Project names, descriptions, technologies, links, outcomes, team size\n\n6. **Certifications**:\n   - Certification names, issuing organizations, dates, expiry dates, credential IDs\n\n7. **Awards & Honors**:\n   - Award names, organizations, dates, descriptions\n\n8. **Publications**:\n   - Paper titles, journals, dates, co-authors, DOI\n\n9. **Volunteer Work**:\n   - Organizations, roles, dates, responsibilities\n\n10. **References**:\n    - Names, titles, companies, contact information\n\n11. **Additional Information**:\n    - Interests, hobbies, memberships, achievements, summary/objective\n\nIMPORTANT: Return ONLY valid JSON with no additional text, markdown formatting, or explanations. Start with { and end with }. Use camelCase for field names. Structure the data logically and preserve all details found in the document.",
        "hasOutputParser": true,
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1344,
        112
      ],
      "id": "6196c2ad-edbe-411a-a0df-7923e7780cf1",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1344,
        304
      ],
      "id": "dcfbc7a6-efb7-47c3-97ad-c2b69e778241",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "ygZ1rEEaZo29cjcm",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "content": "## File Format Classification",
        "height": 224,
        "width": 816,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1440,
        368
      ],
      "typeVersion": 1,
      "id": "08422ee2-e6a9-4b08-9dda-68123cf5b43e",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## DOCX to PDF",
        "height": 224,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -272,
        -144
      ],
      "typeVersion": 1,
      "id": "981c3f3f-7a66-4f6c-9f45-5eeb6f8527fa",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## OCR of pdf",
        "height": 240,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        752,
        176
      ],
      "typeVersion": 1,
      "id": "7aa813f7-3f57-4889-9236-dd46db828b2b",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## AI",
        "height": 368,
        "width": 480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1296,
        64
      ],
      "typeVersion": 1,
      "id": "8b868463-a951-4018-8b82-abeba09ca251",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Preprocessing",
        "height": 240,
        "width": 624,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        368,
        -128
      ],
      "typeVersion": 1,
      "id": "1c1a71fb-af4e-490a-a320-24ba61c7bc59",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "binaryProperty": "file",
        "options": {}
      },
      "type": "n8n-nodes-base.mistralAi",
      "typeVersion": 1,
      "position": [
        816,
        256
      ],
      "id": "466db1e1-434f-4723-8011-b505b221ae7e",
      "name": "Extract text",
      "credentials": {
        "mistralCloudApi": {
          "id": "TM0dQDVCdBHABbQq",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/classification/store",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "document_type",
              "value": "={{ $json.document_type }}"
            },
            {
              "name": "sub_type",
              "value": "={{ $json.sub_type }}"
            },
            {
              "name": "confidence",
              "value": "={{ $json.confidence }}"
            },
            {
              "name": "classification_factors",
              "value": "={{ $json.classification_factors }}"
            },
            {
              "name": "processing_requirements",
              "value": "={{ $json.processing_requirements }}"
            },
            {
              "name": "original_filename",
              "value": "={{ $json.original_filename }}"
            },
            {
              "name": "quality_score",
              "value": "={{ $json.quality_score }}"
            },
            {
              "name": "classification_metadata",
              "value": "={{ $json.classification_metadata }}"
            }
          ]
        },
        "options": {}
      },
      "id": "afd97fda-8901-4b2b-83df-cceba0e465f3",
      "name": "Store Classification1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -1168,
        448
      ]
    },
    {
      "parameters": {
        "content": "## OCR of image",
        "height": 256,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        608,
        512
      ],
      "typeVersion": 1,
      "id": "b3450a25-13a5-4d65-9609-980f3981f66d",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "documentType": "image_url",
        "binaryProperty": "file",
        "options": {}
      },
      "type": "n8n-nodes-base.mistralAi",
      "typeVersion": 1,
      "position": [
        672,
        576
      ],
      "id": "ff9d521d-0ac5-49fa-bb79-0666d8c9d548",
      "name": "Extract text1",
      "credentials": {
        "mistralCloudApi": {
          "id": "TM0dQDVCdBHABbQq",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"personalInformation\": {\n    \"fullName\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phoneNumber\": \"+1234567890\",\n    \"address\": \"123 Main Street, City, State 12345\",\n    \"dateOfBirth\": \"1990-01-01\",\n    \"nationality\": \"American\",\n    \"linkedin\": \"linkedin.com/in/johndoe\",\n    \"github\": \"github.com/johndoe\",\n    \"website\": \"https://johndoe.com\",\n    \"profilePhoto\": \"https://example.com/photo.jpg\"\n  },\n  \"workExperience\": [\n    {\n      \"company\": \"Tech Company Inc\",\n      \"jobTitle\": \"Senior Software Engineer\",\n      \"startDate\": \"2020-01-01\",\n      \"endDate\": \"2023-12-31\",\n      \"location\": \"San Francisco, CA\",\n      \"description\": \"Led development of web applications using modern technologies\",\n      \"responsibilities\": [\n        \"Developed and maintained web applications\",\n        \"Led a team of 5 developers\",\n        \"Implemented CI/CD pipelines\"\n      ],\n      \"achievements\": [\n        \"Reduced application load time by 50%\",\n        \"Successfully delivered 10+ major features\"\n      ],\n      \"technologiesUsed\": [\n        \"React\",\n        \"Node.js\",\n        \"Python\",\n        \"AWS\"\n      ]\n    }\n  ],\n  \"education\": [\n    {\n      \"institution\": \"University of Technology\",\n      \"degree\": \"Bachelor of Science in Computer Science\",\n      \"major\": \"Computer Science\",\n      \"graduationDate\": \"2019-05-15\",\n      \"gpa\": \"3.8\",\n      \"honors\": \"Magna Cum Laude\",\n      \"relevantCoursework\": [\n        \"Data Structures and Algorithms\",\n        \"Database Systems\",\n        \"Software Engineering\",\n        \"Web Development\"\n      ],\n      \"location\": \"Boston, MA\"\n    }\n  ],\n  \"skills\": {\n    \"programming\": [\n      \"JavaScript\",\n      \"Python\",\n      \"Java\",\n      \"C++\",\n      \"TypeScript\"\n    ],\n    \"webDevelopment\": [\n      \"React\",\n      \"Node.js\",\n      \"Express.js\",\n      \"HTML/CSS\",\n      \"Bootstrap\"\n    ],\n    \"mobileDevelopment\": [\n      \"React Native\",\n      \"Flutter\",\n      \"iOS Development\"\n    ],\n    \"backendDevelopment\": [\n      \"REST APIs\",\n      \"GraphQL\",\n      \"Microservices\",\n      \"Docker\"\n    ],\n    \"devOps\": [\n      \"AWS\",\n      \"Docker\",\n      \"Kubernetes\",\n      \"CI/CD\",\n      \"Jenkins\"\n    ],\n    \"tools\": [\n      \"Git\",\n      \"VS Code\",\n      \"Postman\",\n      \"JIRA\",\n      \"Figma\"\n    ],\n    \"databases\": [\n      \"MySQL\",\n      \"MongoDB\",\n      \"PostgreSQL\",\n      \"Redis\"\n    ],\n    \"softwareEngineering\": [\n      \"Agile\",\n      \"Scrum\",\n      \"TDD\",\n      \"Design Patterns\",\n      \"System Design\"\n    ],\n    \"soft_skills\": [\n      \"Leadership\",\n      \"Communication\",\n      \"Problem Solving\",\n      \"Team Collaboration\"\n    ],\n    \"languages\": [\n      \"English (Native)\",\n      \"Spanish (Fluent)\",\n      \"French (Intermediate)\"\n    ]\n  },\n  \"projects\": [\n    {\n      \"name\": \"E-commerce Platform\",\n      \"description\": \"Built a full-stack e-commerce platform with payment integration\",\n      \"technologies\": [\n        \"React\",\n        \"Node.js\",\n        \"MongoDB\",\n        \"Stripe\"\n      ],\n      \"links\": \"https://github.com/johndoe/ecommerce\",\n      \"outcomes\": \"Successfully processed 1000+ transactions\",\n      \"team_size\": \"3\",\n      \"duration\": \"6 months\",\n      \"role\": \"Full Stack Developer\"\n    }\n  ],\n  \"certifications\": [\n    {\n      \"name\": \"AWS Certified Solutions Architect\",\n      \"issuing_organization\": \"Amazon Web Services\",\n      \"issue_date\": \"2022-03-15\",\n      \"expiry_date\": \"2025-03-15\",\n      \"credential_id\": \"AWS-123456\",\n      \"url\": \"https://aws.amazon.com/certification\"\n    }\n  ],\n  \"awardsAndHonors\": [\n    {\n      \"name\": \"Employee of the Year\",\n      \"organization\": \"Tech Company Inc\",\n      \"date\": \"2023-12-01\",\n      \"description\": \"Recognized for outstanding performance and leadership\"\n    }\n  ],\n  \"publications\": [\n    {\n      \"title\": \"Modern Web Development Practices\",\n      \"journal\": \"Tech Journal\",\n      \"date\": \"2023-06-01\",\n      \"co_authors\": [\"Jane Smith\"],\n      \"doi\": \"10.1000/tech.2023.001\"\n    }\n  ],\n  \"volunteerWork\": [\n    {\n      \"organization\": \"Code for Good\",\n      \"role\": \"Mentor\",\n      \"startDate\": \"2021-01-01\",\n      \"endDate\": \"2023-12-31\",\n      \"responsibilities\": [\n        \"Mentored 20+ junior developers\",\n        \"Organized coding workshops\"\n      ]\n    }\n  ],\n  \"references\": [\n    {\n      \"name\": \"Jane Smith\",\n      \"title\": \"Engineering Manager\",\n      \"company\": \"Tech Company Inc\",\n      \"email\": \"jane.smith@techcompany.com\",\n      \"phone\": \"+1234567891\"\n    }\n  ],\n  \"additionalInformation\": {\n    \"objective\": \"Experienced software engineer seeking challenging opportunities in full-stack development\",\n    \"interests\": [\n      \"Open Source\",\n      \"Machine Learning\",\n      \"Blockchain Technology\"\n    ],\n    \"hobbies\": [\n      \"Hiking\",\n      \"Photography\",\n      \"Reading\"\n    ],\n    \"memberships\": [\n      \"IEEE\",\n      \"ACM\"\n    ]\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1488,
        320
      ],
      "id": "8509db0b-39ca-4b65-966f-f817afe38f7f",
      "name": "Structured Output Parser"
    }
  ],
  "connections": {
    "Split Out": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Images": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    },
    {
      "parameters": {
        "path": "=a9c831e1-74a4-442a-9bec-f7f97cc331eb",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -192,
        64
      ],
      "id": "d8b58cd8-6826-4c27-b395-60a5607bb1bd",
      "name": "Webhook",
      "webhookId": "a9c831e1-74a4-442a-9bec-f7f97cc331eb"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"name\": \"John Doe\",\n\t\"email\": \"johndoe@unknown.com\",\n  \"city\":\"XYZ\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2800,
        752
      ],
      "id": "9ad7e908-5d6f-4eee-9249-21a2e4acb18a",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "operation": "getAll",
        "docType": "Job%20Opening",
        "returnAll": true,
        "options": {
          "fields": [
            "*"
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        832,
        80
      ],
      "id": "6734b671-d69b-4fc1-8419-6459f25cfbef",
      "name": "Get many documents",
      "credentials": {
        "erpNextApi": {
          "id": "bNlyHP0hCgv4Uy7g",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3200,
        528
      ],
      "id": "e72ca50e-aa65-4a37-a057-ee0abdfb93f5",
      "name": "Merge1"
    }
  ],
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert DOCX to PDF (FastAPI)": {
      "main": [
        [
          {
            "node": "Extract text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify File Type1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classification Engine1": {
      "main": [
        [
          {
            "node": "Store Classification1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Classification Engine1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get many documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Convert DOCX to PDF (FastAPI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        []
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Extract text": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Classification1": {
      "main": [
        [
          {
            "node": "Classify File Type1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract text1": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Get many documents": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7693beb9f060fb055ddcb840a80e799fb74cb4fff1463f01809186570f775489"
  }
}