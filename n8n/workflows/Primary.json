{
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Move file[0] to binary.file if needed\nreturn $input.all().map(item => {\n  if (item.json.file && Array.isArray(item.json.file) && item.json.file[0]) {\n    item.binary = item.binary || {};\n    item.binary.file = item.binary.file || item.json.file[0];\n    delete item.json.file; // Clean up JSON if you want\n  }\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        144
      ],
      "id": "a821ad2a-cf02-4bdf-ac5a-4cffd70ae8e5",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d505e596-8a4b-4118-adac-5c1be8492a60",
              "name": "original_filename",
              "value": "={{ $json.data.original_filename }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1536,
        624
      ],
      "id": "f4cce5fd-f002-4d05-b923-1c8c3c93dcb4",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d5e8589-09d6-4b11-b17a-e29fb8f032db",
              "name": "original_filename",
              "value": "={{ $json.file[0].filename }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1648,
        272
      ],
      "id": "55c0393e-ec5e-452f-8ec2-7268da7ab6a0",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "formTitle": "upload",
        "formFields": {
          "values": [
            {
              "fieldLabel": "file",
              "fieldType": "file"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -2208,
        272
      ],
      "id": "b418fa67-1bb8-40c9-8946-a6f27632b20a",
      "name": "On form submission",
      "webhookId": "e5dee929-3e06-407f-aac1-3a32bf6a505e"
    },
    {
      "parameters": {
        "jsCode": "// Further improved classification logic for robust docx detection\nconst items = $input.all();\nconst processedItems = [];\n\nfunction extractFilename(data) {\n  if (data.converted_pdf) return data.converted_pdf.split(/[\\/]/).pop();\n  if (data.converted_docx) return data.converted_docx.split(/[\\/]/).pop();\n  if (data.original_filename && data.original_filename !== 'undefined' && data.original_filename !== 'null') return data.original_filename;\n  if (data.fileName) return data.fileName;\n  if (data.filename) return data.filename;\n  if (data.name) return data.name;\n  if (Array.isArray(data.file) && data.file.length > 0 && data.file[0].filename) return data.file[0].filename;\n  if (data.document_id) return `document_${data.document_id}.pdf`;\n  return 'document_unknown.pdf';\n}\n\nfunction detectType(filename, mimetype) {\n  const ext = filename.split('.').pop()?.toLowerCase();\n  // Prefer mimetype if it is very specific\n  if (mimetype) {\n    const mt = mimetype.toLowerCase();\n    if (mt.includes('officedocument.wordprocessingml.document')) return 'docx';\n    if (mt.includes('msword')) {\n      // Some browsers send .docx as msword, so check extension\n      if (ext === 'docx') return 'docx';\n      return 'doc';\n    }\n    if (mt.includes('pdf')) return 'pdf';\n    if (mt.includes('image')) return 'image';\n  }\n  // Fallback to extension\n  if (ext === 'docx') return 'docx';\n  if (ext === 'doc') return 'doc';\n  if (ext === 'pdf') return 'pdf';\n  if (['jpg','jpeg','png'].includes(ext)) return 'image';\n  return 'unknown';\n}\n\nfor (const item of items) {\n  const data = item.json;\n  const documentId = data.document_id;\n  const mimetype = data.mimeType || data.mimetype || (Array.isArray(data.file) && data.file.length > 0 && data.file[0].mimetype) || undefined;\n  const preferredFilename = extractFilename(data);\n  const detectedType = detectType(preferredFilename, mimetype);\n  const qualityScore = data.quality_score || 0;\n  const confidence = data.confidence || 0;\n  let classificationFactors = [];\n  let processingRequirements = [];\n  if (detectedType === 'pdf') {\n    classificationFactors.push('PDF document detected');\n    processingRequirements.push('OCR processing', 'Text extraction');\n  } else if (detectedType === 'docx') {\n    classificationFactors.push('DOCX document detected');\n    processingRequirements.push('Direct text extraction', 'Format parsing');\n  } else if (detectedType === 'doc') {\n    classificationFactors.push('DOC document detected');\n    processingRequirements.push('Convert to DOCX', 'Direct text extraction');\n  } else if (detectedType === 'image') {\n    classificationFactors.push('Image document detected');\n    processingRequirements.push('OCR processing', 'Image enhancement');\n  } else {\n    classificationFactors.push('Unknown document type');\n    processingRequirements.push('Manual review');\n  }\n  if (qualityScore >= 0.8) {\n    classificationFactors.push('High quality document');\n    processingRequirements.push('Standard processing');\n  } else if (qualityScore >= 0.5) {\n    classificationFactors.push('Medium quality document');\n    processingRequirements.push('Enhanced processing', 'Quality improvement');\n  } else {\n    classificationFactors.push('Low quality document');\n    processingRequirements.push('Manual review', 'Quality enhancement');\n  }\n  const filename = preferredFilename.toLowerCase();\n  let subType = 'general';\n  if (filename.includes('cv') || filename.includes('resume')) {\n    classificationFactors.push('Resume/CV document identified');\n    processingRequirements.push('Personal info extraction', 'Skills parsing');\n    subType = 'resume';\n  } else if (filename.includes('application')) {\n    classificationFactors.push('Application form identified');\n    processingRequirements.push('Form field extraction', 'Structured data parsing');\n    subType = 'application_form';\n  } else if (filename.includes('certificate')) {\n    subType = 'certificate';\n  }\n  processedItems.push({\n    json: {\n      document_id: documentId,\n      document_type: detectedType,\n      sub_type: subType,\n      confidence: confidence,\n      classification_factors: classificationFactors,\n      processing_requirements: processingRequirements,\n      original_filename: preferredFilename,\n      quality_score: qualityScore,\n      classification_metadata: {\n        source_filename: preferredFilename,\n        detected_extension: preferredFilename.split('.').pop()?.toLowerCase(),\n        original_type: data.document_type || 'unknown',\n        final_type: detectedType,\n        mimetype: mimetype\n      }\n    }\n  });\n}\n\nreturn processedItems;"
      },
      "id": "0db008aa-c84c-4ce5-9338-38a45dbd25ac",
      "name": "Classification Engine1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2096,
        624
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/classification/store",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "document_type",
              "value": "={{ $json.document_type }}"
            },
            {
              "name": "sub_type",
              "value": "={{ $json.sub_type }}"
            },
            {
              "name": "confidence",
              "value": "={{ $json.confidence }}"
            },
            {
              "name": "classification_factors",
              "value": "={{ $json.classification_factors }}"
            },
            {
              "name": "processing_requirements",
              "value": "={{ $json.processing_requirements }}"
            },
            {
              "name": "original_filename",
              "value": "={{ $json.original_filename }}"
            },
            {
              "name": "quality_score",
              "value": "={{ $json.quality_score }}"
            },
            {
              "name": "classification_metadata",
              "value": "={{ $json.classification_metadata }}"
            }
          ]
        },
        "options": {}
      },
      "id": "437d6cf0-c8fb-4bc5-a944-07460ce93f72",
      "name": "Store Classification1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -1920,
        624
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced file type classification with better detection\nconst items = $input.all();\nconst processedItems = [];\n\nfunction detectFormat(documentType, filename, mimetype) {\n  // Priority 1: Use backend classification if reliable\n  if (documentType && documentType !== 'unknown') {\n    return documentType;\n  }\n  \n  // Priority 2: MIME type analysis\n  if (mimetype) {\n    const mimeType = mimetype.toLowerCase();\n    if (mimeType.includes('pdf')) return 'pdf';\n    if (mimeType.includes('msword') || mimeType.includes('word')) return 'doc';\n    if (mimeType.includes('officedocument.wordprocessingml.document')) return 'docx';\n    if (mimeType.includes('image')) {\n      if (mimeType.includes('jpeg') || mimeType.includes('jpg')) return 'jpg';\n      if (mimeType.includes('png')) return 'png';\n      return 'image';\n    }\n  }\n  \n  // Priority 3: Filename extension\n  if (filename) {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    const validExtensions = ['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png'];\n    if (validExtensions.includes(ext)) {\n      return ext === 'jpeg' ? 'jpg' : ext;\n    }\n  }\n  \n  return 'unknown';\n}\n\nfor (const item of items) {\n  const data = item.json;\n  \n  const documentType = data.document_type;\n  const filename = data.original_filename || data.fileName || data.filename;\n  const mimetype = data.mimeType || data.mimetype;\n  \n  const format = detectFormat(documentType, filename, mimetype);\n  \n  // Add additional metadata for processing\n  const result = {\n    json: {\n      ...data, // Preserve all original data\n      format: format,\n      file_extension: filename ? filename.split('.').pop()?.toLowerCase() : null,\n      mime_type: mimetype,\n      classification_complete: true,\n      processing_ready: format !== 'unknown',\n      // Ensure filename is preserved\n      original_filename: filename || `document_${data.document_id || 'unknown'}`,\n      // Add debugging info\n      format_detection: {\n        input_type: documentType,\n        input_filename: filename,\n        input_mimetype: mimetype,\n        final_format: format\n      }\n    }\n  };\n  \n  processedItems.push(result);\n}\n\nreturn processedItems;"
      },
      "id": "b7432a8f-fed8-4069-b7f2-b11e1211eeb7",
      "name": "Classify File Type1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1712,
        624
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "doc",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "30e3bc04-df43-4991-976f-5d54389e6854"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8b5d390e-d2e6-4180-8bde-b5f9e6c18698",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "docx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3e126769-faf2-4943-859e-abe29e904eb0",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a7951a45-f1ca-4cea-89a9-b44027f36cf1",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1152,
        256
      ],
      "id": "b95258f8-6ab1-4807-984e-370a55c05ab6",
      "name": "Switch1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "file"
            }
          }
        }
      },
      "id": "65ebbec1-52f5-48b4-8284-4c2ace6e4030",
      "name": "Convert DOCX to PDF (FastAPI)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -768,
        144
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "original_filename",
              "field2": "original_filename"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1424,
        288
      ],
      "id": "016c07c8-4308-4922-b90b-0f3edc2d2a5e",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/extract-images",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -368,
        304
      ],
      "id": "c9c22a7a-0269-4e26-945d-4bdfa5b42450",
      "name": "Extract Images"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  if (item.binary && item.binary.data) {\n    item.binary.file = item.binary.data;\n    delete item.binary.data;\n  }\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        304
      ],
      "id": "a6d0ba92-6208-4a24-be57-b87b1ff49abc",
      "name": "Code1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "<OCR_WITH_REGION>Extract name, email, qualifications, and contact information",
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "messageType": "imageBinary",
              "binaryImageDataKey": "file"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1360,
        544
      ],
      "id": "b2e55f79-8b4e-43ce-a7e6-3c712c30044c",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "fieldToSplitOut": "image_files",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -160,
        304
      ],
      "id": "aafce211-963e-450f-b467-1d95a7898958",
      "name": "Split Out"
    },
    {
      "parameters": {
        "fileSelector": "={{ $json.image_files.replace('./documents', '/documents') }}",
        "options": {
          "dataPropertyName": "file"
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        80,
        304
      ],
      "id": "c19cf192-d22c-4cde-99f2-9431a1c86c92",
      "name": "Read/Write Files from Disk",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  if (item.binary && item.binary.file && typeof item.binary.file.data === 'string') {\n    // Decode base64 string to Buffer\n    const buf = Buffer.from(item.binary.file.data, 'base64');\n    return {\n      json: {\n        ...item.json,\n        original_filename: item.binary.file.fileName || item.json?.original_filename || 'page.png',\n        document_type: item.json?.document_type || 'image',\n        page_number: item.json?.page_number || 1,\n        processing_timestamp: new Date().toISOString(),\n        extraction_task: 'document_analysis',\n        expected_content: item.json?.sub_type || 'general_document',\n        image_info: {\n          size_bytes: buf.length,\n          mime_type: item.binary.file.mimeType || 'image/png',\n          file_name: item.binary.file.fileName || 'page.png'\n        }\n      },\n      binary: {\n        file: {\n          data: buf,\n          fileName: item.binary.file.fileName || 'page.png',\n          mimeType: item.binary.file.mimeType || 'image/png'\n        }\n      }\n    };\n  }\n  return null;\n}).filter(Boolean);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        544
      ],
      "id": "14871aa4-1af5-4dc7-9c17-1774111cca57",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// Inspect and log binary.file properties before LLM\nreturn $input.all().map(item => {\n  const hasBinary = !!item.binary && !!item.binary.file;\n  const hasData = hasBinary && !!item.binary.file.data;\n  const fileName = hasBinary ? item.binary.file.fileName : undefined;\n  const mimeType = hasBinary ? item.binary.file.mimeType : undefined;\n  item.json = {\n    ...item.json,\n    _debug_binary_file_present: hasBinary,\n    _debug_binary_file_data_present: hasData,\n    _debug_binary_file_fileName: fileName,\n    _debug_binary_file_mimeType: mimeType\n  };\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        752,
        544
      ],
      "id": "1a758003-ab1d-49b0-b487-bbabded72e4d",
      "name": "Debug Binary Before LLM"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().filter(item => item.binary && item.binary.file && item.binary.file.data);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        544
      ],
      "id": "221a52f1-070c-46ad-8822-8a7379d6775b",
      "name": "Code3"
    },
    {
      "parameters": {
        "model": "microsoft/Florence-2-large",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmOpenHuggingFaceInference",
      "typeVersion": 1,
      "position": [
        1136,
        832
      ],
      "id": "22e173f2-f721-403c-8b3b-62c5b86f3072",
      "name": "Hugging Face Inference Model",
      "credentials": {
        "huggingFaceApi": {
          "id": "EWI13xI6NzMSPuyl",
          "name": "HuggingFaceApi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => ({\n  json: {\n    ...item.json,\n    _debug_binary: !!item.binary,\n    _debug_binary_file: !!item.binary?.file,\n    _debug_binary_file_data_type: typeof item.binary?.file?.data,\n    _debug_binary_file_data_isBuffer: Buffer.isBuffer(item.binary?.file?.data),\n    _debug_binary_file_data_length: item.binary?.file?.data?.length\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        288,
        304
      ],
      "id": "227930ed-fd44-4f9c-a62f-39d7da8f74a6",
      "name": "Debug Code2"
    }
  ],
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "Convert DOCX to PDF (FastAPI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          },
          {
            "node": "Classification Engine1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classification Engine1": {
      "main": [
        [
          {
            "node": "Store Classification1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Classification1": {
      "main": [
        [
          {
            "node": "Classify File Type1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify File Type1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Convert DOCX to PDF (FastAPI)": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Images": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Extract Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Debug Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Debug Binary Before LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug Binary Before LLM": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hugging Face Inference Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Debug Code2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "041eddc42e8d6ee241e9e999a065d6008656c8550e121b35ce86ff040bc3c386"
  }
}