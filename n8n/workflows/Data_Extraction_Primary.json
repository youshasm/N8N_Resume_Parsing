{
  "name": "IMP Data Extraction Primary",
  "nodes": [
    {
      "parameters": {
        "path": "/extract",
        "httpMethod": "POST",
        "responseMode": "responseNode"
      },
      "id": "de1-webhook-start",
      "name": "Data Extraction Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "imp-data-extraction"
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Extract document information for data extraction\nconst input = $json;\nconst documentId = input.document_id;\nconst documentType = input.classification_result?.primary_prediction?.document_type || 'general_document';\nconst qualityScore = input.quality_score || 50;\nconst extractionHints = input.extraction_hints || {};\n\n// Determine extraction method based on quality and document type\nlet extractionMethod;\nif (qualityScore >= 75) {\n  extractionMethod = 'ai_powered'; // Use simulated HuggingFace Donut\n} else if (qualityScore >= 50) {\n  extractionMethod = 'hybrid_extraction'; // Combine OCR + rules\n} else {\n  extractionMethod = 'basic_ocr'; // Simple OCR\n}\n\n// Get expected fields for this document type\nconst expectedFields = extractionHints.expected_fields || ['text_content'];\n\nreturn {\n  json: {\n    document_id: documentId,\n    document_type: documentType,\n    quality_score: qualityScore,\n    extraction_method: extractionMethod,\n    expected_fields: expectedFields,\n    extraction_priority: extractionHints.extraction_priority || 'medium',\n    requires_mrz: extractionHints.requires_mrz || false,\n    file_path: `/documents/uploads/${documentId}`\n  }\n};"
      },
      "id": "de2-extract-info",
      "name": "Extract Document Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "method_check",
              "leftValue": "={{ $json.extraction_method }}",
              "rightValue": "ai_powered",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "de3-method-check",
      "name": "Extraction Method?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [660, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Simulate AI-powered data extraction (Phase 1 - HuggingFace Donut simulation)\n// In Phase 2, this will call actual HuggingFace Donut API\n\nconst documentId = $json.document_id;\nconst documentType = $json.document_type;\nconst expectedFields = $json.expected_fields;\nconst qualityScore = $json.quality_score;\n\n// Simulate extraction based on document type\nlet extractedData = {};\nlet confidence = Math.min(95, Math.max(70, qualityScore + Math.random() * 15));\n\n// Document type specific extraction simulation\nswitch (documentType) {\n  case 'cv_resume':\n    extractedData = {\n      name: {\n        value: 'Muhammad Ahmed Khan',\n        confidence: confidence,\n        location: { x: 100, y: 50, width: 200, height: 25 }\n      },\n      email: {\n        value: 'ahmed.khan@email.com',\n        confidence: confidence - 5,\n        location: { x: 100, y: 80, width: 180, height: 20 }\n      },\n      phone: {\n        value: '+92-300-1234567',\n        confidence: confidence - 3,\n        location: { x: 100, y: 100, width: 150, height: 20 }\n      },\n      experience: {\n        value: '5 years in Software Development',\n        confidence: confidence - 10,\n        location: { x: 50, y: 200, width: 400, height: 100 }\n      },\n      education: {\n        value: 'BS Computer Science, University of Karachi',\n        confidence: confidence - 8,\n        location: { x: 50, y: 320, width: 350, height: 50 }\n      },\n      skills: {\n        value: 'Python, JavaScript, React, Node.js',\n        confidence: confidence - 5,\n        location: { x: 50, y: 380, width: 300, height: 40 }\n      }\n    };\n    break;\n\n  case 'passport':\n    extractedData = {\n      name: {\n        value: 'AHMED KHAN MUHAMMAD',\n        confidence: confidence,\n        location: { x: 150, y: 100, width: 250, height: 30 }\n      },\n      passport_number: {\n        value: 'AB1234567',\n        confidence: confidence - 2,\n        location: { x: 300, y: 50, width: 100, height: 25 }\n      },\n      nationality: {\n        value: 'PAKISTANI',\n        confidence: confidence,\n        location: { x: 150, y: 140, width: 120, height: 20 }\n      },\n      date_of_birth: {\n        value: '15 JAN 1990',\n        confidence: confidence - 3,\n        location: { x: 150, y: 170, width: 100, height: 20 }\n      },\n      expiry_date: {\n        value: '14 JAN 2030',\n        confidence: confidence - 3,\n        location: { x: 300, y: 170, width: 100, height: 20 }\n      }\n    };\n    break;\n\n  case 'educational_certificate':\n    extractedData = {\n      name: {\n        value: 'Muhammad Ahmed Khan',\n        confidence: confidence,\n        location: { x: 200, y: 150, width: 200, height: 30 }\n      },\n      degree: {\n        value: 'Bachelor of Science in Computer Science',\n        confidence: confidence - 5,\n        location: { x: 100, y: 200, width: 300, height: 25 }\n      },\n      institution: {\n        value: 'University of Karachi',\n        confidence: confidence - 3,\n        location: { x: 150, y: 250, width: 200, height: 25 }\n      },\n      graduation_date: {\n        value: 'June 2023',\n        confidence: confidence - 8,\n        location: { x: 200, y: 300, width: 100, height: 20 }\n      },\n      grade: {\n        value: 'A Grade (3.5 CGPA)',\n        confidence: confidence - 10,\n        location: { x: 180, y: 330, width: 140, height: 20 }\n      }\n    };\n    break;\n\n  case 'experience_letter':\n    extractedData = {\n      name: {\n        value: 'Muhammad Ahmed Khan',\n        confidence: confidence,\n        location: { x: 100, y: 120, width: 200, height: 25 }\n      },\n      company: {\n        value: 'Tech Solutions Pvt Ltd',\n        confidence: confidence - 5,\n        location: { x: 50, y: 50, width: 250, height: 30 }\n      },\n      position: {\n        value: 'Senior Software Developer',\n        confidence: confidence - 3,\n        location: { x: 100, y: 150, width: 200, height: 25 }\n      },\n      duration: {\n        value: 'January 2021 to December 2023',\n        confidence: confidence - 8,\n        location: { x: 100, y: 180, width: 220, height: 20 }\n      },\n      responsibilities: {\n        value: 'Led development team, built web applications, managed client projects',\n        confidence: confidence - 12,\n        location: { x: 50, y: 220, width: 400, height: 80 }\n      }\n    };\n    break;\n\n  default:\n    // General document extraction\n    extractedData = {\n      text_content: {\n        value: 'Extracted text content from the document. This is a simulation of OCR results.',\n        confidence: confidence - 20,\n        location: { x: 50, y: 50, width: 500, height: 400 }\n      },\n      document_language: {\n        value: 'English',\n        confidence: confidence,\n        location: null\n      }\n    };\n}\n\n// Calculate overall extraction confidence\nconst fieldConfidences = Object.values(extractedData).map(field => field.confidence);\nconst overallConfidence = fieldConfidences.reduce((sum, conf) => sum + conf, 0) / fieldConfidences.length;\n\n// Simulate processing metrics\nconst processingMetrics = {\n  extraction_time: '3.2 seconds',\n  model_used: 'naver-clova-ix/donut-base-finetuned-cord-v2',\n  fields_extracted: Object.keys(extractedData).length,\n  fields_expected: expectedFields.length,\n  completion_rate: Math.round((Object.keys(extractedData).length / expectedFields.length) * 100),\n  confidence_score: Math.round(overallConfidence * 100) / 100\n};\n\nreturn {\n  json: {\n    document_id: documentId,\n    document_type: documentType,\n    extraction_result: {\n      success: true,\n      method: 'ai_powered_simulated',\n      extracted_data: extractedData,\n      processing_metrics: processingMetrics,\n      quality_score: qualityScore,\n      requires_validation: overallConfidence < 85\n    }\n  }\n};"
      },
      "id": "de4-ai-extraction",
      "name": "AI-Powered Extraction",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 240]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "hybrid_check",
              "leftValue": "={{ $json.extraction_method }}",
              "rightValue": "hybrid_extraction",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "de5-hybrid-check",
      "name": "Is Hybrid Method?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [860, 360]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Hybrid extraction - combine OCR with rule-based processing\nconst documentId = $json.document_id;\nconst documentType = $json.document_type;\nconst expectedFields = $json.expected_fields;\nconst qualityScore = $json.quality_score;\n\n// Simulate OCR + pattern matching extraction\nlet extractedData = {};\nlet confidence = Math.min(80, Math.max(50, qualityScore + Math.random() * 10));\n\n// Basic extraction for medium quality documents\nif (documentType === 'cv_resume') {\n  extractedData = {\n    name: {\n      value: 'Ahmed Khan', // Simplified extraction\n      confidence: confidence,\n      location: null\n    },\n    email: {\n      value: 'ahmed@email.com',\n      confidence: confidence - 10,\n      location: null\n    },\n    phone: {\n      value: '+92-300-1234567',\n      confidence: confidence - 5,\n      location: null\n    }\n  };\n} else if (documentType === 'passport') {\n  extractedData = {\n    name: {\n      value: 'AHMED KHAN',\n      confidence: confidence,\n      location: null\n    },\n    passport_number: {\n      value: 'AB1234567',\n      confidence: confidence - 5,\n      location: null\n    }\n  };\n} else {\n  // Generic text extraction\n  extractedData = {\n    text_content: {\n      value: 'Basic OCR text extraction results. Quality may vary.',\n      confidence: confidence - 15,\n      location: null\n    }\n  };\n}\n\nconst fieldConfidences = Object.values(extractedData).map(field => field.confidence);\nconst overallConfidence = fieldConfidences.reduce((sum, conf) => sum + conf, 0) / fieldConfidences.length;\n\nconst processingMetrics = {\n  extraction_time: '1.8 seconds',\n  model_used: 'tesseract_ocr + pattern_matching',\n  fields_extracted: Object.keys(extractedData).length,\n  fields_expected: expectedFields.length,\n  completion_rate: Math.round((Object.keys(extractedData).length / expectedFields.length) * 100),\n  confidence_score: Math.round(overallConfidence * 100) / 100\n};\n\nreturn {\n  json: {\n    document_id: documentId,\n    document_type: documentType,\n    extraction_result: {\n      success: true,\n      method: 'hybrid_extraction',\n      extracted_data: extractedData,\n      processing_metrics: processingMetrics,\n      quality_score: qualityScore,\n      requires_validation: true // Medium quality always needs validation\n    }\n  }\n};"
      },
      "id": "de6-hybrid-extraction",
      "name": "Hybrid Extraction",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Basic OCR extraction for low quality documents\nconst documentId = $json.document_id;\nconst documentType = $json.document_type;\nconst expectedFields = $json.expected_fields;\nconst qualityScore = $json.quality_score;\n\n// Basic OCR with limited accuracy\nlet extractedData = {\n  text_content: {\n    value: 'Basic OCR text extraction. Low quality document detected. Manual review recommended.',\n    confidence: Math.max(30, qualityScore * 0.8),\n    location: null\n  }\n};\n\n// Try to extract basic information if possible\nif (documentType === 'cv_resume') {\n  extractedData.partial_name = {\n    value: 'Name extraction attempted',\n    confidence: 40,\n    location: null\n  };\n}\n\nconst fieldConfidences = Object.values(extractedData).map(field => field.confidence);\nconst overallConfidence = fieldConfidences.reduce((sum, conf) => sum + conf, 0) / fieldConfidences.length;\n\nconst processingMetrics = {\n  extraction_time: '0.8 seconds',\n  model_used: 'basic_tesseract_ocr',\n  fields_extracted: Object.keys(extractedData).length,\n  fields_expected: expectedFields.length,\n  completion_rate: Math.round((Object.keys(extractedData).length / expectedFields.length) * 100),\n  confidence_score: Math.round(overallConfidence * 100) / 100\n};\n\nreturn {\n  json: {\n    document_id: documentId,\n    document_type: documentType,\n    extraction_result: {\n      success: false, // Low quality extraction failed\n      method: 'basic_ocr',\n      extracted_data: extractedData,\n      processing_metrics: processingMetrics,\n      quality_score: qualityScore,\n      requires_validation: true,\n      requires_human_review: true // Low quality needs human review\n    }\n  }\n};"
      },
      "id": "de7-basic-extraction",
      "name": "Basic OCR Extraction",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 420]
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/v1/documents/{{ $json.document_id }}/extraction",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.extraction_result) }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "de8-store-extraction",
      "name": "Store Extraction Results",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1260, 360]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Validate extraction results and determine next steps\nconst extractionResult = $json.extraction_result;\nconst documentId = $json.document_id;\nconst success = extractionResult.success;\nconst confidence = extractionResult.processing_metrics.confidence_score;\nconst requiresValidation = extractionResult.requires_validation;\nconst requiresHumanReview = extractionResult.requires_human_review;\n\n// Determine next workflow based on results\nlet nextWorkflow;\nlet webhookUrl;\nlet processingStatus;\n\nif (success && confidence >= 85 && !requiresValidation) {\n  // High confidence extraction - complete processing\n  nextWorkflow = 'Auto_Complete';\n  webhookUrl = null; // No further processing needed\n  processingStatus = 'completed';\n} else if (success && confidence >= 70) {\n  // Medium confidence - route to validation\n  nextWorkflow = 'Validation_Queue';\n  webhookUrl = 'http://localhost:5678/webhook/imp-validation';\n  processingStatus = 'pending_validation';\n} else {\n  // Low confidence or failed - route to human review\n  nextWorkflow = 'Human_Review_Queue';\n  webhookUrl = 'http://localhost:5678/webhook/imp-smart-router';\n  processingStatus = 'pending_human_review';\n}\n\n// Generate standardized output\nconst standardizedData = {\n  document_id: documentId,\n  processing_status: processingStatus,\n  extraction_summary: {\n    fields_extracted: extractionResult.processing_metrics.fields_extracted,\n    overall_confidence: confidence,\n    extraction_method: extractionResult.method,\n    processing_time: extractionResult.processing_metrics.extraction_time\n  },\n  extracted_fields: extractionResult.extracted_data,\n  next_action: nextWorkflow,\n  cost_estimate: success ? (confidence >= 85 ? 0.02 : 0.15) : 0.25 // Based on README pricing\n};\n\nreturn {\n  json: {\n    ...standardizedData,\n    next_workflow: nextWorkflow,\n    webhook_url: webhookUrl,\n    ready_for_completion: processingStatus === 'completed'\n  }\n};"
      },
      "id": "de9-validate-results",
      "name": "Validate & Route Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1460, 360]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "completion_check",
              "leftValue": "={{ $json.ready_for_completion }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "de10-completion-check",
      "name": "Ready for Completion?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1660, 360]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Complete processing for high-confidence extractions\nconst result = $json;\n\n// Mark document as completed\nconst completionData = {\n  document_id: result.document_id,\n  status: 'processing_complete',\n  completion_timestamp: new Date().toISOString(),\n  final_confidence: result.extraction_summary.overall_confidence,\n  processing_cost: result.cost_estimate,\n  total_processing_time: result.extraction_summary.processing_time\n};\n\nreturn {\n  json: {\n    success: true,\n    message: 'Document processing completed successfully',\n    ...completionData,\n    extracted_data: result.extracted_fields\n  }\n};"
      },
      "id": "de11-complete-processing",
      "name": "Complete Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1860, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.webhook_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "de12-trigger-next",
      "name": "Trigger Next Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1860, 420]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "de13-response",
      "name": "Extraction Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2060, 360]
    }
  ],
  "pinData": {},
  "connections": {
    "Data Extraction Trigger": {
      "main": [
        [
          {
            "node": "Extract Document Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Document Info": {
      "main": [
        [
          {
            "node": "Extraction Method?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extraction Method?": {
      "main": [
        [
          {
            "node": "AI-Powered Extraction",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is Hybrid Method?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI-Powered Extraction": {
      "main": [
        [
          {
            "node": "Store Extraction Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Hybrid Method?": {
      "main": [
        [
          {
            "node": "Hybrid Extraction",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic OCR Extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hybrid Extraction": {
      "main": [
        [
          {
            "node": "Store Extraction Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic OCR Extraction": {
      "main": [
        [
          {
            "node": "Store Extraction Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Extraction Results": {
      "main": [
        [
          {
            "node": "Validate & Route Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Route Results": {
      "main": [
        [
          {
            "node": "Ready for Completion?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ready for Completion?": {
      "main": [
        [
          {
            "node": "Complete Processing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Trigger Next Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Complete Processing": {
      "main": [
        [
          {
            "node": "Extraction Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Next Workflow": {
      "main": [
        [
          {
            "node": "Extraction Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "imp_phase1_data_extraction"
  },
  "id": "imp_data_extraction_primary_phase1",
  "tags": [
    {
      "createdAt": "2025-07-04T00:00:00.000Z",
      "updatedAt": "2025-07-04T00:00:00.000Z",
      "id": "imp_phase1",
      "name": "IMP Phase 1"
    }
  ]
}
