{
  "name": "IMP Smart Router",
  "nodes": [
    {
      "parameters": {
        "path": "/route",
        "httpMethod": "POST",
        "responseMode": "responseNode"
      },
      "id": "sr1-webhook-start",
      "name": "Smart Router Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "imp-smart-router"
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Analyze document processing status and determine optimal routing\nconst input = $json;\nconst documentId = input.document_id;\nconst qualityScore = input.quality_score || 50;\nconst processingTier = input.processing_tier;\nconst extractionResult = input.extraction_result;\nconst classificationResult = input.classification_result;\n\n// Extract key metrics for routing decision\nconst documentType = classificationResult?.primary_prediction?.document_type || 'unknown';\nconst classificationConfidence = classificationResult?.primary_prediction?.confidence || 0;\nconst extractionConfidence = extractionResult?.processing_metrics?.confidence_score || 0;\nconst extractionSuccess = extractionResult?.success || false;\nconst requiresHumanReview = extractionResult?.requires_human_review || false;\n\n// Determine current processing stage\nlet currentStage = 'initial';\nif (extractionResult) {\n  currentStage = 'extraction_complete';\n} else if (classificationResult) {\n  currentStage = 'classification_complete';\n} else {\n  currentStage = 'quality_assessed';\n}\n\n// Calculate overall confidence score\nconst overallConfidence = (classificationConfidence + extractionConfidence) / 2;\n\nreturn {\n  json: {\n    document_id: documentId,\n    quality_score: qualityScore,\n    processing_tier: processingTier,\n    document_type: documentType,\n    current_stage: currentStage,\n    classification_confidence: classificationConfidence,\n    extraction_confidence: extractionConfidence,\n    overall_confidence: overallConfidence,\n    extraction_success: extractionSuccess,\n    requires_human_review: requiresHumanReview,\n    processing_status: input.processing_status || 'in_progress'\n  }\n};"
      },
      "id": "sr2-analyze-status",
      "name": "Analyze Processing Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "quality_threshold",
              "leftValue": "={{ $json.quality_score }}",
              "rightValue": 75,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "confidence_threshold",
              "leftValue": "={{ $json.overall_confidence }}",
              "rightValue": 80,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "sr3-quality-gate",
      "name": "High Quality Route?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [660, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Route high quality documents for automated processing\nconst input = $json;\nconst documentId = input.document_id;\nconst currentStage = input.current_stage;\n\n// Determine next step based on current processing stage\nlet nextWorkflow;\nlet webhookUrl;\nlet action;\n\nswitch (currentStage) {\n  case 'quality_assessed':\n    // High quality -> go to classification\n    nextWorkflow = 'Document_Classification';\n    webhookUrl = 'http://localhost:5678/webhook/imp-classification';\n    action = 'classify_document';\n    break;\n    \n  case 'classification_complete':\n    // Classification done -> go to extraction\n    nextWorkflow = 'Data_Extraction_Primary';\n    webhookUrl = 'http://localhost:5678/webhook/imp-data-extraction';\n    action = 'extract_data';\n    break;\n    \n  case 'extraction_complete':\n    // Extraction done -> complete processing\n    nextWorkflow = 'Auto_Complete';\n    webhookUrl = null;\n    action = 'complete_processing';\n    break;\n    \n  default:\n    nextWorkflow = 'Document_Classification';\n    webhookUrl = 'http://localhost:5678/webhook/imp-classification';\n    action = 'classify_document';\n}\n\n// Calculate processing metrics\nconst processingMetrics = {\n  tier: 'high_quality',\n  automation_level: 'fully_automated',\n  estimated_cost: 0.02, // From README\n  estimated_time: '30 seconds',\n  human_intervention_required: false\n};\n\nreturn {\n  json: {\n    document_id: documentId,\n    routing_decision: {\n      route: 'automated_processing',\n      next_workflow: nextWorkflow,\n      webhook_url: webhookUrl,\n      action: action,\n      processing_metrics: processingMetrics\n    },\n    processing_tier: 'high_quality',\n    automation_level: 'full'\n  }\n};"
      },
      "id": "sr4-high-quality-route",
      "name": "High Quality Automated Route",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 240]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "medium_quality_check",
              "leftValue": "={{ $json.quality_score }}",
              "rightValue": 50,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "medium_confidence_check",
              "leftValue": "={{ $json.overall_confidence }}",
              "rightValue": 60,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "sr5-medium-quality-gate",
      "name": "Medium Quality Route?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [860, 360]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Route medium quality documents for enhanced processing\nconst input = $json;\nconst documentId = input.document_id;\nconst currentStage = input.current_stage;\nconst extractionSuccess = input.extraction_success;\n\n// Medium quality documents need enhanced processing + validation\nlet nextWorkflow;\nlet webhookUrl;\nlet action;\n\nif (currentStage === 'extraction_complete' && extractionSuccess) {\n  // Extraction completed but needs validation\n  nextWorkflow = 'Validation_Queue';\n  webhookUrl = 'http://localhost:5678/webhook/imp-validation';\n  action = 'validate_extraction';\n} else if (currentStage === 'extraction_complete' && !extractionSuccess) {\n  // Extraction failed -> human review\n  nextWorkflow = 'Human_Review_Queue';\n  webhookUrl = 'http://localhost:5678/webhook/imp-human-review';\n  action = 'queue_human_review';\n} else {\n  // Continue processing pipeline\n  nextWorkflow = 'Data_Extraction_Primary';\n  webhookUrl = 'http://localhost:5678/webhook/imp-data-extraction';\n  action = 'enhanced_extraction';\n}\n\nconst processingMetrics = {\n  tier: 'medium_quality',\n  automation_level: 'enhanced_processing',\n  estimated_cost: 0.15, // From README\n  estimated_time: '2 minutes',\n  human_intervention_required: true,\n  validation_required: true\n};\n\nreturn {\n  json: {\n    document_id: documentId,\n    routing_decision: {\n      route: 'enhanced_processing',\n      next_workflow: nextWorkflow,\n      webhook_url: webhookUrl,\n      action: action,\n      processing_metrics: processingMetrics\n    },\n    processing_tier: 'medium_quality',\n    automation_level: 'enhanced'\n  }\n};"
      },
      "id": "sr6-medium-quality-route",
      "name": "Medium Quality Enhanced Route",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Route low quality documents for human review\nconst input = $json;\nconst documentId = input.document_id;\nconst qualityScore = input.quality_score;\nconst overallConfidence = input.overall_confidence;\n\n// Low quality or low confidence -> human review required\nconst nextWorkflow = 'Human_Review_Queue';\nconst webhookUrl = 'http://localhost:5678/webhook/imp-human-review';\nconst action = 'queue_human_review';\n\n// Determine review priority based on quality\nlet reviewPriority;\nif (qualityScore < 30) {\n  reviewPriority = 'high'; // Very poor quality\n} else if (qualityScore < 50) {\n  reviewPriority = 'medium'; // Poor quality\n} else {\n  reviewPriority = 'low'; // Borderline quality\n}\n\nconst processingMetrics = {\n  tier: 'low_quality',\n  automation_level: 'human_review_required',\n  estimated_cost: 0.25, // From README\n  estimated_time: '5-10 minutes',\n  human_intervention_required: true,\n  review_priority: reviewPriority\n};\n\nreturn {\n  json: {\n    document_id: documentId,\n    routing_decision: {\n      route: 'human_review',\n      next_workflow: nextWorkflow,\n      webhook_url: webhookUrl,\n      action: action,\n      processing_metrics: processingMetrics,\n      review_priority: reviewPriority\n    },\n    processing_tier: 'low_quality',\n    automation_level: 'manual'\n  }\n};"
      },
      "id": "sr7-low-quality-route",
      "name": "Low Quality Human Review Route",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 420]
    },
    {
      "parameters": {
        "url": "http://imp-fastapi:8000/api/v1/documents/{{ $json.document_id }}/routing",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.routing_decision) }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "sr8-store-routing",
      "name": "Store Routing Decision",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1260, 360]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Update document processing statistics\nconst routingData = $json;\nconst documentId = routingData.document_id;\nconst routingDecision = routingData.routing_decision;\nconst processingTier = routingData.processing_tier;\n\n// Generate processing statistics update\nconst statsUpdate = {\n  document_id: documentId,\n  processing_tier: processingTier,\n  automation_level: routingData.automation_level,\n  estimated_cost: routingDecision.processing_metrics.estimated_cost,\n  estimated_time: routingDecision.processing_metrics.estimated_time,\n  route_timestamp: new Date().toISOString(),\n  next_action: routingDecision.action\n};\n\n// Log routing decision\nconsole.log(`Document ${documentId} routed to: ${routingDecision.route}`);\nconsole.log(`Processing tier: ${processingTier}`);\nconsole.log(`Next workflow: ${routingDecision.next_workflow}`);\nconsole.log(`Estimated cost: $${routingDecision.processing_metrics.estimated_cost}`);\n\nreturn {\n  json: {\n    ...routingData,\n    stats_update: statsUpdate,\n    ready_for_next_step: !!routingDecision.webhook_url\n  }\n};"
      },
      "id": "sr9-update-stats",
      "name": "Update Processing Stats",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1460, 360]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "next_step_check",
              "leftValue": "={{ $json.ready_for_next_step }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "sr10-next-step-check",
      "name": "Trigger Next Step?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1660, 360]
    },
    {
      "parameters": {
        "url": "={{ $json.routing_decision.webhook_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "sr11-trigger-next",
      "name": "Trigger Next Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1860, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Prepare final routing response\nconst routingData = $json;\n\nconst response = {\n  success: true,\n  document_id: routingData.document_id,\n  routing_decision: routingData.routing_decision.route,\n  processing_tier: routingData.processing_tier,\n  next_workflow: routingData.routing_decision.next_workflow,\n  estimated_cost: routingData.routing_decision.processing_metrics.estimated_cost,\n  estimated_time: routingData.routing_decision.processing_metrics.estimated_time,\n  requires_human_review: routingData.routing_decision.processing_metrics.human_intervention_required || false,\n  automation_level: routingData.automation_level\n};\n\nreturn { json: response };"
      },
      "id": "sr12-final-response",
      "name": "Prepare Final Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1860, 420]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "sr13-response",
      "name": "Smart Router Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2060, 360]
    }
  ],
  "pinData": {},
  "connections": {
    "Smart Router Trigger": {
      "main": [
        [
          {
            "node": "Analyze Processing Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Processing Status": {
      "main": [
        [
          {
            "node": "High Quality Route?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "High Quality Route?": {
      "main": [
        [
          {
            "node": "High Quality Automated Route",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Medium Quality Route?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "High Quality Automated Route": {
      "main": [
        [
          {
            "node": "Store Routing Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Medium Quality Route?": {
      "main": [
        [
          {
            "node": "Medium Quality Enhanced Route",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Low Quality Human Review Route",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Medium Quality Enhanced Route": {
      "main": [
        [
          {
            "node": "Store Routing Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Low Quality Human Review Route": {
      "main": [
        [
          {
            "node": "Store Routing Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Routing Decision": {
      "main": [
        [
          {
            "node": "Update Processing Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Processing Stats": {
      "main": [
        [
          {
            "node": "Trigger Next Step?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Next Step?": {
      "main": [
        [
          {
            "node": "Trigger Next Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Next Workflow": {
      "main": [
        [
          {
            "node": "Smart Router Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Final Response": {
      "main": [
        [
          {
            "node": "Smart Router Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "imp_phase1_smart_router"
  },
  "id": "imp_smart_router_phase1",
  "tags": [
    {
      "createdAt": "2025-07-04T00:00:00.000Z",
      "updatedAt": "2025-07-04T00:00:00.000Z",
      "id": "imp_phase1",
      "name": "IMP Phase 1"
    }
  ]
}
