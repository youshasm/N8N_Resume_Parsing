{
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/classification/store",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "document_type",
              "value": "={{ $json.document_type }}"
            },
            {
              "name": "sub_type",
              "value": "={{ $json.sub_type }}"
            },
            {
              "name": "confidence",
              "value": "={{ $json.confidence }}"
            },
            {
              "name": "classification_factors",
              "value": "={{ $json.classification_factors }}"
            },
            {
              "name": "processing_requirements",
              "value": "={{ $json.processing_requirements }}"
            },
            {
              "name": "original_filename",
              "value": "={{ $json.original_filename }}"
            },
            {
              "name": "quality_score",
              "value": "={{ $json.quality_score }}"
            },
            {
              "name": "classification_metadata",
              "value": "={{ $json.classification_metadata }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d13cfde2-a292-44c6-9409-0c3d2ed950c6",
      "name": "Store Classification1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -1408,
        -384
      ]
    },
    {
      "parameters": {
        "content": "## AI",
        "height": 368,
        "width": 480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        928,
        -448
      ],
      "typeVersion": 1,
      "id": "d330e8f3-328e-4ec6-b3f5-d514f1a6b468",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## DOCX to PDF",
        "height": 224,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -256,
        -320
      ],
      "typeVersion": 1,
      "id": "4afb3ff5-3d63-48d0-bfcd-8fe63442e016",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## File Format Classification",
        "height": 224,
        "width": 816,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1664,
        -448
      ],
      "typeVersion": 1,
      "id": "c755f7a7-d281-466f-a357-125343a01af0",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "// Move file[0] to binary.file if needed\nreturn $input.all().map(item => {\n  if (item.json.file && Array.isArray(item.json.file) && item.json.file[0]) {\n    item.binary = item.binary || {};\n    item.binary.file = item.binary.file || item.json.file[0];\n    delete item.json.file; // Clean up JSON if you want\n  }\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        -256
      ],
      "id": "a3c5002b-f86c-4381-ad54-217c5f630657",
      "name": "Code",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d505e596-8a4b-4118-adac-5c1be8492a60",
              "name": "original_filename",
              "value": "={{ $json.data.original_filename }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -960,
        -384
      ],
      "id": "c24d04b2-4cc0-4b0c-bd0d-276ef55383a1",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d5e8589-09d6-4b11-b17a-e29fb8f032db",
              "name": "original_filename",
              "value": "={{ $json.file[0].filename }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -960,
        -576
      ],
      "id": "436efa40-e7a7-4f7b-ae09-ccf5cf80bf37",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "formTitle": "upload",
        "formFields": {
          "values": [
            {
              "fieldLabel": "file",
              "fieldType": "file"
            }
          ]
        },
        "responseMode": "lastNode",
        "options": {
          "buttonLabel": "Submit"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -1856,
        -688
      ],
      "id": "25257f02-b40f-45a0-96ad-189fcc63564b",
      "name": "On form submission",
      "webhookId": "e5dee929-3e06-407f-aac1-3a32bf6a505e"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced classification logic with binary data preservation\nconst items = $input.all();\nconst processedItems = [];\n\nfunction extractFilename(data) {\n  if (data.converted_pdf) return data.converted_pdf.split(/[\\/]/).pop();\n  if (data.converted_docx) return data.converted_docx.split(/[\\/]/).pop();\n  if (data.original_filename && data.original_filename !== 'undefined' && data.original_filename !== 'null') return data.original_filename;\n  if (data.fileName) return data.fileName;\n  if (data.filename) return data.filename;\n  if (data.name) return data.name;\n  if (Array.isArray(data.file) && data.file.length > 0 && data.file[0].filename) return data.file[0].filename;\n  if (data.document_id) return `document_${data.document_id}.pdf`;\n  return 'document_unknown.pdf';\n}\n\nfunction preserveBinaryData(item) {\n  // Preserve all binary data properties\n  if (item.binary) {\n    return { ...item.binary };\n  }\n  return null;\n}\n\nfunction detectType(filename, mimetype) {\n  const ext = filename.split('.').pop()?.toLowerCase();\n  // Prefer mimetype if it is very specific\n  if (mimetype) {\n    const mt = mimetype.toLowerCase();\n    if (mt.includes('officedocument.wordprocessingml.document')) return 'docx';\n    if (mt.includes('msword')) {\n      // Some browsers send .docx as msword, so check extension\n      if (ext === 'docx') return 'docx';\n      return 'doc';\n    }\n    if (mt.includes('pdf')) return 'pdf';\n    if (mt.includes('image')) return 'image';\n  }\n  // Fallback to extension\n  if (ext === 'docx') return 'docx';\n  if (ext === 'doc') return 'doc';\n  if (ext === 'pdf') return 'pdf';\n  if (['jpg','jpeg','png'].includes(ext)) return 'image';\n  return 'unknown';\n}\n\nfor (const item of items) {\n  const data = item.json;\n  const documentId = data.document_id;\n  const mimetype = data.mimeType || data.mimetype || (Array.isArray(data.file) && data.file.length > 0 && data.file[0].mimetype) || undefined;\n  const preferredFilename = extractFilename(data);\n  const detectedType = detectType(preferredFilename, mimetype);\n  const qualityScore = data.quality_score || 0;\n  const confidence = data.confidence || 0;\n  let classificationFactors = [];\n  let processingRequirements = [];\n  if (detectedType === 'pdf') {\n    classificationFactors.push('PDF document detected');\n    processingRequirements.push('OCR processing', 'Text extraction');\n  } else if (detectedType === 'docx') {\n    classificationFactors.push('DOCX document detected');\n    processingRequirements.push('Direct text extraction', 'Format parsing');\n  } else if (detectedType === 'doc') {\n    classificationFactors.push('DOC document detected');\n    processingRequirements.push('Convert to DOCX', 'Direct text extraction');\n  } else if (detectedType === 'image') {\n    classificationFactors.push('Image document detected');\n    processingRequirements.push('OCR processing', 'Image enhancement');\n  } else {\n    classificationFactors.push('Unknown document type');\n    processingRequirements.push('Manual review');\n  }\n  if (qualityScore >= 0.8) {\n    classificationFactors.push('High quality document');\n    processingRequirements.push('Standard processing');\n  } else if (qualityScore >= 0.5) {\n    classificationFactors.push('Medium quality document');\n    processingRequirements.push('Enhanced processing', 'Quality improvement');\n  } else {\n    classificationFactors.push('Low quality document');\n    processingRequirements.push('Manual review', 'Quality enhancement');\n  }\n  const filename = preferredFilename.toLowerCase();\n  let subType = 'general';\n  if (filename.includes('cv') || filename.includes('resume')) {\n    classificationFactors.push('Resume/CV document identified');\n    processingRequirements.push('Personal info extraction', 'Skills parsing');\n    subType = 'resume';\n  } else if (filename.includes('application')) {\n    classificationFactors.push('Application form identified');\n    processingRequirements.push('Form field extraction', 'Structured data parsing');\n    subType = 'application_form';\n  } else if (filename.includes('certificate')) {\n    subType = 'certificate';\n  }\n  processedItems.push({\n    json: {\n      document_id: documentId,\n      document_type: detectedType,\n      sub_type: subType,\n      confidence: confidence,\n      classification_factors: classificationFactors,\n      processing_requirements: processingRequirements,\n      original_filename: preferredFilename,\n      quality_score: qualityScore,\n      classification_metadata: {\n        source_filename: preferredFilename,\n        detected_extension: preferredFilename.split('.').pop()?.toLowerCase(),\n        original_type: data.document_type || 'unknown',\n        final_type: detectedType,\n        mimetype: mimetype\n      }\n    }\n  });\n}\n\nreturn processedItems;"
      },
      "id": "0668cca0-c536-40de-9acf-50f9528bc47b",
      "name": "Classification Engine1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1632,
        -384
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced file type classification with better detection\nconst items = $input.all();\nconst processedItems = [];\n\nfunction detectFormat(documentType, filename, mimetype) {\n  // Priority 1: Use backend classification if reliable\n  if (documentType && documentType !== 'unknown') {\n    return documentType;\n  }\n  \n  // Priority 2: MIME type analysis\n  if (mimetype) {\n    const mimeType = mimetype.toLowerCase();\n    if (mimeType.includes('pdf')) return 'pdf';\n    if (mimeType.includes('msword') || mimeType.includes('word')) return 'doc';\n    if (mimeType.includes('officedocument.wordprocessingml.document')) return 'docx';\n    if (mimeType.includes('image')) {\n      if (mimeType.includes('jpeg') || mimeType.includes('jpg')) return 'jpg';\n      if (mimeType.includes('png')) return 'png';\n      return 'image';\n    }\n  }\n  \n  // Priority 3: Filename extension\n  if (filename) {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    const validExtensions = ['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png'];\n    if (validExtensions.includes(ext)) {\n      return ext === 'jpeg' ? 'jpg' : ext;\n    }\n  }\n  \n  return 'unknown';\n}\n\nfor (const item of items) {\n  const data = item.json;\n  \n  const documentType = data.document_type;\n  const filename = data.original_filename || data.fileName || data.filename;\n  const mimetype = data.mimeType || data.mimetype;\n  \n  const format = detectFormat(documentType, filename, mimetype);\n  \n  // Add additional metadata for processing\n  const result = {\n    json: {\n      ...data, // Preserve all original data\n      format: format,\n      file_extension: filename ? filename.split('.').pop()?.toLowerCase() : null,\n      mime_type: mimetype,\n      classification_complete: true,\n      processing_ready: format !== 'unknown',\n      // Ensure filename is preserved\n      original_filename: filename || `document_${data.document_id || 'unknown'}`,\n      // Add debugging info\n      format_detection: {\n        input_type: documentType,\n        input_filename: filename,\n        input_mimetype: mimetype,\n        final_format: format\n      }\n    }\n  };\n  \n  processedItems.push(result);\n}\n\nreturn processedItems;"
      },
      "id": "43aa6b0f-af95-4f79-ac3a-d9630e60d456",
      "name": "Classify File Type1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1184,
        -384
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "doc",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "30e3bc04-df43-4991-976f-5d54389e6854"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8b5d390e-d2e6-4180-8bde-b5f9e6c18698",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "docx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3e126769-faf2-4943-859e-abe29e904eb0",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a7951a45-f1ca-4cea-89a9-b44027f36cf1",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -512,
        -528
      ],
      "id": "eff66f16-d79e-4ee3-89a2-91a622f112dd",
      "name": "Switch1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "file"
            }
          }
        }
      },
      "id": "47e1db95-bdff-45b7-99ee-e6e3d3ccae51",
      "name": "Convert DOCX to PDF (FastAPI)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        16,
        -256
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "original_filename",
              "field2": "original_filename"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -736,
        -496
      ],
      "id": "aefe14f6-3f54-4b72-8499-c5cef4a0d9ed",
      "name": "Merge"
    },
    {
      "parameters": {
        "docType": "Job%20Applicant",
        "properties": {
          "customProperty": [
            {
              "field": "applicant_name",
              "value": "={{ $json.applicant_name }}"
            },
            {
              "field": "email_id",
              "value": "={{ $json.email_id }}"
            },
            {
              "field": "phone_number",
              "value": "={{ $json.phone_number }}"
            },
            {
              "field": "country",
              "value": "={{ $json.country }}"
            },
            {
              "field": "date_of_birth",
              "value": "={{ $json.date_of_birth }}"
            },
            {
              "field": "cnic_number",
              "value": "={{ $json.cnic_number }}"
            },
            {
              "field": "gender",
              "value": "={{ $json.gender }}"
            },
            {
              "field": "skills",
              "value": "={{ $json.skills }}"
            },
            {
              "field": "father_name",
              "value": "={{ $json.father_name }}"
            },
            {
              "field": "mother_name",
              "value": "={{ $json.mother_name }}"
            },
            {
              "field": "street_address",
              "value": "={{ $json.street_address }}"
            },
            {
              "field": "city",
              "value": "={{ $json.city }}"
            },
            {
              "field": "province",
              "value": "={{ $json.province }}"
            },
            {
              "field": "marital_status",
              "value": "={{ $json.marital_status }}"
            },
            {
              "field": "religion",
              "value": "={{ $json.religion }}"
            },
            {
              "field": "sect",
              "value": "={{ $json.sect }}"
            },
            {
              "field": "telephone_number",
              "value": "={{ $json.telephone_number }}"
            },
            {
              "field": "known_languages",
              "value": "={{ $json.known_languages[0] }}"
            },
            {
              "field": "nationality",
              "value": "={{ $json.nationality }}"
            },
            {
              "field": "designation",
              "value": "={{ $json.selected_designation }}"
            },
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        5472,
        -672
      ],
      "id": "c8d8580d-3b9e-4f2d-95be-4b6db3f94067",
      "name": "Create a document",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract just the fieldnames from the doctype response\nconst response = $input.all()[0].json;\n\n// Handle different response structures\nlet fields = [];\n\n// Try to get fields from different possible response structures\nif (response.message?.docs?.[0]?.fields) {\n  fields = response.message.docs[0].fields;\n} else if (response.docs?.[0]?.fields) {\n  fields = response.docs[0].fields;\n} else if (Array.isArray(response.fields)) {\n  fields = response.fields;\n}\n\nif (fields.length > 0) {\n  const fieldnames = fields.map(field => field.fieldname).filter(name => name);\n  return [{\n    json: {\n      fieldnames: fieldnames,\n      total_fields: fieldnames.length\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    error: 'Could not retrieve field information',\n    response: response,\n    tip: 'Please check if you are properly authenticated and have permissions to access the Job Applicant doctype'\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        -736
      ],
      "name": "Get Field Names",
      "id": "299ed68b-67e8-4994-b598-b3d544bba5f8"
    },
    {
      "parameters": {
        "url": "https://app.alphaworkforce.org/api/method/frappe.desk.form.load.getdoctype?doctype=Job%20Applicant",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "erpNextApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -288,
        -736
      ],
      "id": "7eb056ee-09ba-4fcb-8b3e-33b8f1413377",
      "name": "HTTP Request",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst outputItems = [];\n\nfunction removeCountryCode(phone) {\n  if (typeof phone !== 'string') return phone;\n  return phone.replace(/^\\+\\d{1,3}[-\\s]?/, '');\n}\n\nfunction fixDateFormat(dateStr) {\n  if (typeof dateStr !== 'string') return dateStr;\n  const match = dateStr.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/);\n  if (match) {\n    return `${match[3]}-${match[2]}-${match[1]}`;\n  }\n  return dateStr;\n}\n\nfunction cleanPhone(phone) {\n  if (typeof phone !== 'string') return '';\n  if (phone.trim().toLowerCase() === 'not specified' || phone.trim().toLowerCase() === 'not provided') {\n    return '';\n  }\n  return removeCountryCode(phone);\n}\n\nfor (const item of items) {\n  let rawText = item.json.text;\n  rawText = rawText.replace(/\\\\n/g, '');\n  let parsed;\n  try {\n    parsed = JSON.parse(rawText);\n  } catch (e) {\n    try {\n      parsed = JSON.parse(rawText.trim());\n    } catch (err) {\n      parsed = { output: {} };\n    }\n  }\n  if (parsed && parsed.output) {\n    if (Array.isArray(parsed.output.skills)) {\n      parsed.output.skills = parsed.output.skills.join(', ');\n    }\n    // Clean and validate phone fields\n    parsed.output.mobile_number_1 = cleanPhone(parsed.output.mobile_number_1);\n    parsed.output.mobile_number_2 = cleanPhone(parsed.output.mobile_number_2);\n    parsed.output.phone_number = cleanPhone(parsed.output.phone_number);\n    parsed.output.telephone_number = cleanPhone(parsed.output.telephone_number);\n\n    // Fix date fields\n    parsed.output.date_of_birth = fixDateFormat(parsed.output.date_of_birth);\n    parsed.output.passport_issue_date = fixDateFormat(parsed.output.passport_issue_date);\n    parsed.output.passport_expiry_date = fixDateFormat(parsed.output.passport_expiry_date);\n    parsed.output.driving_license_issue_date = fixDateFormat(parsed.output.driving_license_issue_date);\n    parsed.output.driving_license_expiry_date = fixDateFormat(parsed.output.driving_license_expiry_date);\n\n    outputItems.push({ json: parsed.output });\n  } else {\n    outputItems.push({ json: {} });\n  }\n}\n\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1856,
        -448
      ],
      "id": "261dbf9c-cb86-4236-9564-3c3f30a54d59",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "docType": "Designation",
        "returnAll": true,
        "options": {
          "fields": [
            "designation_name"
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        1856,
        -880
      ],
      "id": "ea6566b9-be07-44d2-8784-74bfa8822c14",
      "name": "Get many documents",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2080,
        -752
      ],
      "id": "cf21e220-a823-4edd-bbca-21c037a39e79",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "// Combine applicant data and designation names into a single object and assign all data to a variable\n\nconst input = $input.all().map(item => item.json);\n\n// Find the applicant object (has more than just designation_name)\nconst applicant = input.find(obj => !obj.designation_name);\n\n// Collect all designation names into an array\nconst designations = input\n  .filter(obj => obj.designation_name)\n  .map(obj => obj.designation_name);\n\n// Add the designations array to the applicant object\nlet result;\nif (applicant) {\n  applicant.designation_list = designations;\n  result = applicant;\n} else {\n  result = { designation_list: designations };\n}\n\n// Assign all data to a variable 'text' for LLM\nconst text = JSON.stringify(result);\n\nreturn [{ json: { ...result, text } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2304,
        -752
      ],
      "id": "b98c52e2-2805-4b22-983a-0de867ab1a27",
      "name": "Combine Designations and Candidate Data"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are given a list of designations: {{ $json.designation_list }}.\nMatch the candidate's experience, education, skills, and technical qualifications ({{ $json.skills }}, {{ $json.technical_qualification }}, {{ $json.experience }}) to each designation in the list.\n\nFor each designation, assign a score from 0 to 100 based on the candidate's fit, focusing on experience and education.\n\nSTRICT OUTPUT REQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Each key must be a designation from the provided list, and each value must be a score (number or string).\n- Do NOT include any notes, explanations, markdown, or extra text.\n- Do NOT create or invent new designations.\n- Output must start with '{' and end with '}'.\n- Do NOT include any text before or after the JSON.\n\nExample:\n{\n  \"Accountant\": \"80\",\n  \"Engineer\": \"60\",\n  \"Manager\": \"40\"\n}",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        2528,
        -752
      ],
      "id": "0258ecd9-50b0-437d-9939-3bdf0bc96a22",
      "name": "Designation Scorer"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"designation\":\"score\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2656,
        -528
      ],
      "id": "2bedf3d1-d294-480e-8470-8e1472afc115",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "jsCode": "// Check designation scores and route accordingly\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const scores = item.json.output;\n  let bestDesignation = null;\n  let bestScore = 0;\n  \n  // Find the highest scoring designation\n  for (const [designation, score] of Object.entries(scores)) {\n    const numScore = parseInt(score);\n    if (numScore > bestScore) {\n      bestScore = numScore;\n      bestDesignation = designation;\n    }\n  }\n  \n  // If best score is above 80, use it\n  if (bestScore > 80) {\n    results.push({\n      json: {\n        ...item.json,\n        selected_designation: bestDesignation,\n        designation_score: bestScore,\n        designation_source: 'ai_match',\n        route: 'direct_create'\n      }\n    });\n  } else {\n    // If no score above 80, route to AI assignment\n    results.push({\n      json: {\n        ...item.json,\n        best_designation: bestDesignation,\n        best_score: bestScore,\n        route: 'ai_assign'\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2880,
        -752
      ],
      "id": "60a6c2b2-73f2-41d4-9cc2-dfec3d75c4ef",
      "name": "Designation Logic"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route }}",
                    "rightValue": "direct_create",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-direct"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route }}",
                    "rightValue": "ai_assign",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-ai"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        3104,
        -752
      ],
      "id": "9954c51b-d5d9-4aba-b23b-f87df470b8d7",
      "name": "Route Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Based on the candidate's profile and the fact that no existing designation scored above 80%, please assign the most appropriate designation from this list: {{ $json.designation_list }}.\n\nCandidate Profile:\n- Skills: {{ $json.skills }}\n- Technical Qualification: {{ $json.technical_qualification }}\n- Experience: {{ $json.experience }}\n- Best matching designation so far: {{ $json.best_designation }} ({{ $json.best_score }}%)\n\nSTRICT OUTPUT REQUIREMENTS:\n- Output ONLY the designation name as a single string.\n- Choose ONLY from the provided designation list.\n- Do NOT include explanations, quotes, or extra text.\n- Return just the designation name.\n\nExample output: Software Developer",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        3328,
        -816
      ],
      "id": "e5cfd094-346f-4eab-b34d-c8936872da6f",
      "name": "AI Designation Assigner"
    },
    {
      "parameters": {
        "jsCode": "// Process AI designation assignment result\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const aiDesignation = item.json.text ? item.json.text.trim() : item.json.output || 'Software Developer';\n  \n  results.push({\n    json: {\n      ...item.json,\n      selected_designation: aiDesignation,\n      designation_score: 85, // Assign high score for AI-selected designation\n      designation_source: 'ai_assigned'\n    }\n  });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3680,
        -816
      ],
      "id": "1fba8a47-77e2-4876-8f89-a04367b8f5de",
      "name": "Process AI Designation"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3904,
        -672
      ],
      "id": "ecd51ca9-078b-49ab-8a5b-46dc81dcf9a4",
      "name": "Merge3"
    },
    {
      "parameters": {
        "jsCode": "// Merge the two input items: one with personal info, one with designation info\nconst items = $input.all();\nif (items.length < 2) {\n  // Fallback: just return the first item if only one present\n  return items;\n}\n\n// Find the personal info object (has applicant_name) and the designation object (has selected_designation)\nconst personalInfo = items.find(item => item.json.applicant_name);\nconst designationInfo = items.find(item => item.json.selected_designation);\n\n// Merge all fields, with designation fields overwriting if needed\nconst merged = {\n  ...personalInfo.json,\n  ...designationInfo.json\n};\n\n// Check if the selected designation exists in the designation list\n// Use case-insensitive comparison and trim whitespace for better matching\nconst designationExists = merged.designation_list && \n  merged.designation_list.some(designation => \n    designation.toLowerCase().trim() === merged.selected_designation.toLowerCase().trim()\n  );\n\n// Add routing information\nmerged.designation_exists = designationExists;\nmerged.route_action = designationExists ? 'create_applicant' : 'create_designation_first';\n\n// Add debugging information for troubleshooting\nmerged.debug_info = {\n  selected_designation: merged.selected_designation,\n  selected_normalized: merged.selected_designation ? merged.selected_designation.toLowerCase().trim() : null,\n  designation_list_count: merged.designation_list ? merged.designation_list.length : 0,\n  designation_exists: designationExists,\n  matching_designations: merged.designation_list ? \n    merged.designation_list.filter(d => \n      d.toLowerCase().trim() === merged.selected_designation.toLowerCase().trim()\n    ) : []\n};\n\nreturn [{ json: merged }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4128,
        -672
      ],
      "id": "70df8888-ff28-44c9-971f-1accbe81c9f9",
      "name": "Code3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze this resume/CV document and extract job applicant information into a structured JSON format.\n\n{% if $json.processing_method === 'vision_analysis' %}\nYou are analyzing a visual document (image or PDF page). Carefully examine all text, formatting, and layout elements in the image.\n{% elif $json.processing_method === 'text_analysis' %}\nYou are analyzing text content extracted from a document:\n{{ $json.extracted_text }}\n{% else %}\nAnalyze the provided document content (image or text) to extract information.\n{% endif %}\n\nYou must return a valid JSON object with a single \"output\" key, containing ALL the following fields:\n{{ $json.fieldnames }}\n\nSTRICT FORMAT REQUIREMENTS:\n- The response MUST be a JSON object with a single \"output\" key\n- The \"output\" object MUST contain ALL {{ $json.total_fields }} fields listed above, no more, no less\n- Known languages should be speaking languages (English, Urdu, Arabic), not programming languages\n- Field-specific formats:\n   - Dates: YYYY-MM-DD format only (convert any date format you find)\n   - Phone/mobile: Include country code if present (e.g., \"+92 300-1234567\")\n   - Email: Must be valid email format\n   - Skills/Languages: Must be arrays (e.g., [\"Skill1\", \"Skill2\"] or [])\n   - IDs (passport, CNIC, etc.): without dashes or spaces\n   - Marital Status: \"Married\" or \"Unmarried\" only\n   - Boolean fields (has_passport, has_license): true or false\n\nDefault values for missing information:\n- Names: \"Unknown Applicant\"\n- Email: \"no_email@placeholder.com\"\n- Phone/mobile: \"Not Provided\"\n- Dates: \"2000-01-01\"\n- Regular text fields: \"Not Specified\"\n- Arrays: []\n- Known languages: [\"Urdu\"]\n- Skills: []\n- Boolean fields: false\n- Country : Pakistan\nEXTRACTION GUIDELINES:\n{% if $json.processing_method === 'vision_analysis' %}\n- Carefully examine ALL text visible in the image\n- Look for headers, sections, and formatted content\n- Pay attention to layout and visual organization\n- Scan for any information in margins or headers\n{% else %}\n- Carefully read all provided text content\n- Look for structured sections and keywords\n- Extract information from any format or layout\n{% endif %}\n- Extract personal information (name, contact details, address)\n- Find education details from education/qualification sections\n- Identify work experience from employment history\n- Look for skills sections, both technical and soft skills\n- Search for passport/CNIC numbers in personal details\n- Pay attention to dates in various formats throughout the document\n- Extract phone numbers and email addresses from contact information\n- Notice any certifications or licenses mentioned\n- Look for languages mentioned in skills or personal sections\n- Be thorough in extracting all available information\n- If you see partial information, extract what you can\n\nIMPORTANT: Your response must be valid JSON that can be parsed. Do not include any explanations, comments, or markdown formatting. Return only the raw JSON object. Your response must start with '{' and end with '}'.",
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "messageType": "imageBinary",
              "binaryImageDataKey": "file"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1504,
        -448
      ],
      "id": "87f2e054-7c7e-4a0e-b9cf-57505e1a1393",
      "name": "Resume Parser"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route_action }}",
                    "rightValue": "create_applicant",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-direct-applicant"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route_action }}",
                    "rightValue": "create_designation_first",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-create-designation"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        4352,
        -672
      ],
      "id": "9e4de91b-9118-4ee5-970b-5a46c8542210",
      "name": "Designation Check Switch"
    },
    {
      "parameters": {
        "jsCode": "// After attempting to create designation, prepare data for job applicant creation\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  // Check if the designation creation was successful or failed\n  const hasError = item.json.error || item.json.errorMessage;\n  const isSuccess = !hasError && item.json.name; // ERPNext returns 'name' field on successful creation\n  \n  // Handle both success and error cases (e.g., duplicate designation)\n  let designationStatus = 'unknown';\n  let designationMessage = '';\n  \n  if (isSuccess) {\n    designationStatus = 'created';\n    designationMessage = `Designation '${item.json.designation_name || item.json.selected_designation}' created successfully`;\n  } else if (hasError) {\n    // Check if it's a duplicate error\n    const errorMsg = item.json.errorMessage || item.json.error || '';\n    if (errorMsg.toLowerCase().includes('duplicate') || \n        errorMsg.toLowerCase().includes('already exists') ||\n        errorMsg.toLowerCase().includes('unique')) {\n      designationStatus = 'already_exists';\n      designationMessage = `Designation '${item.json.selected_designation}' already exists in system`;\n    } else {\n      designationStatus = 'creation_failed';\n      designationMessage = `Failed to create designation: ${errorMsg}`;\n    }\n  }\n  \n  result.push({\n    json: {\n      ...item.json,\n      designation_creation_status: designationStatus,\n      designation_creation_message: designationMessage,\n      designation_available: isSuccess || designationStatus === 'already_exists',\n      ready_for_applicant_creation: true,\n      // Clear any error fields since we've handled them\n      error: undefined,\n      errorMessage: undefined\n    }\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4800,
        -608
      ],
      "id": "b54ea0fc-ad0e-41df-ae09-be4427493540",
      "name": "Post Designation Creation"
    },
    {
      "parameters": {
        "jsCode": "// Verify designation creation and prepare final data\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  // Add final verification and logging\n  const finalData = {\n    ...item.json,\n    workflow_step: 'designation_verified',\n    final_verification: {\n      has_selected_designation: !!item.json.selected_designation,\n      designation_source: item.json.designation_source,\n      creation_status: item.json.designation_creation_status,\n      ready_for_applicant: item.json.ready_for_applicant_creation\n    }\n  };\n  \n  result.push({ json: finalData });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5024,
        -608
      ],
      "id": "f7a4297d-eb68-4d8f-b960-df441dcf9f70",
      "name": "Designation Verification"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        5248,
        -672
      ],
      "id": "8a6772b8-1377-4178-9113-151cd7a48524",
      "name": "Final Merge"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1568,
        -224
      ],
      "id": "1df9c358-2503-4a06-9cbb-9e81f2e573fc",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "553djEfLQRobcIUg",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2528,
        -528
      ],
      "id": "b8e8f95c-9a85-4901-9f0f-4b879baac557",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "553djEfLQRobcIUg",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "docType": "Designation",
        "properties": {
          "customProperty": [
            {
              "field": "designation_name",
              "value": "={{ $json.debug_info.selected_designation }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        4576,
        -608
      ],
      "id": "4ccf684c-94c5-4e1a-bdc2-1c9f6f1d3834",
      "name": "Create a document1",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        160,
        -544
      ],
      "id": "0c2b28bd-e3c6-4f51-92c3-497afc39517b",
      "name": "Merge2"
    },
    {
      "parameters": {
        "jsCode": "// Combine file data and fieldnames, ensure binary data is preserved\nconst items = $input.all();\nconst fileData = items[0];\nconst fieldnamesData = items[1];\n\n// Preserve binary data from the file input\nconst result = {\n  json: {\n    ...fileData.json,\n    ...fieldnamesData.json\n  },\n  binary: fileData.binary || {} // Ensure binary data is preserved\n};\n\nreturn [result];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        384,
        -544
      ],
      "id": "0e454ef6-2967-43c7-9f3c-da084d5c27e2",
      "name": "Combine Data1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/extract-images",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "extracted_image"
            }
          }
        }
      },
      "id": "7ca2f4ea-e33f-447f-8168-9e2cd479f430",
      "name": "Extract Images from PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        608,
        -544
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for Resume Parser with extracted image\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  // Use extracted image if available, otherwise use original file\n  const binaryData = item.binary.extracted_image || item.binary.file;\n  \n  result.push({\n    json: {\n      ...item.json,\n      image_extracted: !!item.binary.extracted_image,\n      processing_method: item.binary.extracted_image ? 'vision_analysis' : 'direct_file'\n    },\n    binary: {\n      file: binaryData\n    }\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        832,
        -544
      ],
      "id": "5898b355-007a-42e4-9314-1d0d5dbd01b0",
      "name": "Prepare for Vision Analysis"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.image_extracted }}",
                    "rightValue": true,
                    "operator": {
                      "type": "boolean",
                      "operation": "true"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1056,
        -544
      ],
      "id": "4914c516-7321-4892-965b-947df2caeed7",
      "name": "Image Extraction Check"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/extract-text",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {}
      },
      "id": "58dd0802-a20d-436d-b85c-7bb1c17ca608",
      "name": "Extract Text Fallback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        832,
        -352
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare text data for Resume Parser when image extraction fails\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  result.push({\n    json: {\n      ...item.json,\n      processing_method: 'text_analysis',\n      extracted_text: item.json.text_content || 'No text extracted',\n      fallback_reason: 'Image extraction failed or unavailable'\n    },\n    binary: item.binary || {}\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        -352
      ],
      "id": "8c46eef3-77b3-4224-b735-87784f5e437d",
      "name": "Prepare Text Analysis"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1280,
        -448
      ],
      "id": "2ed12945-ee10-4be3-9014-fe559d29020f",
      "name": "Merge Processing Routes"
    },
    {
      "parameters": {},
      "id": "manual-test-trigger-001",
      "name": "Manual Test Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1856,
        -500
      ]
    },
    {
      "parameters": {
        "filePath": "={{ $json.test_file_path }}",
        "options": {}
      },
      "id": "read-test-file-001",
      "name": "Read Test File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        -1650,
        -500
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare test file data to match form submission format\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  // Extract filename from file path\n  const filePath = item.json.test_file_path || '';\n  const filename = filePath.split(/[\\\\\\/]/).pop() || 'test_file.pdf';\n  \n  // Create data structure that matches form submission\n  const result = {\n    json: {\n      // Add test file metadata\n      original_filename: filename,\n      fileName: filename,\n      test_mode: true,\n      test_file_path: filePath,\n      document_id: `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      quality_score: 0.85, // Default quality for testing\n      confidence: 0.9\n    },\n    binary: {\n      // Use the file data from Read Binary File node\n      file: item.binary.data\n    }\n  };\n  \n  results.push(result);\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1450,
        -500
      ],
      "id": "prepare-test-data-001",
      "name": "Prepare Test Data"
    }
  ],
  "connections": {
    "Store Classification1": {
      "main": [
        [
          {
            "node": "Classify File Type1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Convert DOCX to PDF (FastAPI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          },
          {
            "node": "Classification Engine1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get many documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classification Engine1": {
      "main": [
        [
          {
            "node": "Store Classification1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify File Type1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert DOCX to PDF (FastAPI)": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Field Names": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Get Field Names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many documents": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Combine Designations and Candidate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Designations and Candidate Data": {
      "main": [
        [
          {
            "node": "Designation Scorer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Designation Scorer": {
      "main": [
        [
          {
            "node": "Designation Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Designation Scorer",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Designation Logic": {
      "main": [
        [
          {
            "node": "Route Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Switch": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "AI Designation Assigner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Designation Assigner": {
      "main": [
        [
          {
            "node": "Process AI Designation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Designation": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Designation Check Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resume Parser": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Designation Check Switch": {
      "main": [
        [
          {
            "node": "Final Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create a document1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post Designation Creation": {
      "main": [
        [
          {
            "node": "Designation Verification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Designation Verification": {
      "main": [
        [
          {
            "node": "Final Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Final Merge": {
      "main": [
        [
          {
            "node": "Create a document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Resume Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Designation Scorer",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Designation Assigner",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create a document1": {
      "main": [
        [
          {
            "node": "Post Designation Creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Combine Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Data1": {
      "main": [
        [
          {
            "node": "Extract Images from PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Images from PDF": {
      "main": [
        [
          {
            "node": "Prepare for Vision Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Vision Analysis": {
      "main": [
        [
          {
            "node": "Image Extraction Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Extraction Check": {
      "main": [
        [
          {
            "node": "Merge Processing Routes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text Fallback": {
      "main": [
        [
          {
            "node": "Prepare Text Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Text Analysis": {
      "main": [
        [
          {
            "node": "Merge Processing Routes",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Processing Routes": {
      "main": [
        [
          {
            "node": "Resume Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Test Trigger": {
      "main": [
        [
          {
            "node": "Read Test File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Test File": {
      "main": [
        [
          {
            "node": "Prepare Test Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Test Data": {
      "main": [
        [
          {
            "node": "Classification Engine1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8dbc788362a7064be1e99adf037458c451d1265e79b52ecf653899e06c56f8d2"
  }
}