{
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/classification/store",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "document_type",
              "value": "={{ $json.document_type }}"
            },
            {
              "name": "sub_type",
              "value": "={{ $json.sub_type }}"
            },
            {
              "name": "confidence",
              "value": "={{ $json.confidence }}"
            },
            {
              "name": "classification_factors",
              "value": "={{ $json.classification_factors }}"
            },
            {
              "name": "processing_requirements",
              "value": "={{ $json.processing_requirements }}"
            },
            {
              "name": "original_filename",
              "value": "={{ $json.original_filename }}"
            },
            {
              "name": "quality_score",
              "value": "={{ $json.quality_score }}"
            },
            {
              "name": "classification_metadata",
              "value": "={{ $json.classification_metadata }}"
            }
          ]
        },
        "options": {}
      },
      "id": "38102679-9016-4035-97fb-81ccc16bedb9",
      "name": "Store Classification1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -1600,
        720
      ]
    },
    {
      "parameters": {
        "content": "## AI",
        "height": 368,
        "width": 480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        576,
        656
      ],
      "typeVersion": 1,
      "id": "f0f1b9f7-a0dd-4066-9528-d311862550a8",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## DOCX to PDF",
        "height": 224,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -656,
        832
      ],
      "typeVersion": 1,
      "id": "8f99c68b-471d-45ef-95d8-fd1c6ff574d9",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## File Format Classification",
        "height": 224,
        "width": 816,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2064,
        656
      ],
      "typeVersion": 1,
      "id": "531ce063-3115-4406-95d6-8604a057c867",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "// Move file[0] to binary.file if needed\nreturn $input.all().map(item => {\n  if (item.json.file && Array.isArray(item.json.file) && item.json.file[0]) {\n    item.binary = item.binary || {};\n    item.binary.file = item.binary.file || item.json.file[0];\n    delete item.json.file; // Clean up JSON if you want\n  }\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -608,
        896
      ],
      "id": "65f25c1a-a942-48ad-bee0-7a9bf95728c2",
      "name": "Code",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d505e596-8a4b-4118-adac-5c1be8492a60",
              "name": "original_filename",
              "value": "={{ $json.data.original_filename }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1152,
        720
      ],
      "id": "5d5f0f11-245e-41fc-a1d7-368b7b3e86fb",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d5e8589-09d6-4b11-b17a-e29fb8f032db",
              "name": "original_filename",
              "value": "={{ $json.file[0].filename }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1152,
        528
      ],
      "id": "72282f97-749c-405e-ae1f-7d541eeff632",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced classification logic with binary data preservation\nconst items = $input.all();\nconst processedItems = [];\n\nfunction extractFilename(data) {\n  if (data.converted_pdf) return data.converted_pdf.split(/[\\/]/).pop();\n  if (data.converted_docx) return data.converted_docx.split(/[\\/]/).pop();\n  if (data.original_filename && data.original_filename !== 'undefined' && data.original_filename !== 'null') return data.original_filename;\n  if (data.fileName) return data.fileName;\n  if (data.filename) return data.filename;\n  if (data.name) return data.name;\n  if (Array.isArray(data.file) && data.file.length > 0 && data.file[0].filename) return data.file[0].filename;\n  if (data.document_id) return `document_${data.document_id}.pdf`;\n  return 'document_unknown.pdf';\n}\n\nfunction preserveBinaryData(item) {\n  // Preserve all binary data properties\n  if (item.binary) {\n    return { ...item.binary };\n  }\n  return null;\n}\n\nfunction detectType(filename, mimetype) {\n  const ext = filename.split('.').pop()?.toLowerCase();\n  // Prefer mimetype if it is very specific\n  if (mimetype) {\n    const mt = mimetype.toLowerCase();\n    if (mt.includes('officedocument.wordprocessingml.document')) return 'docx';\n    if (mt.includes('msword')) {\n      // Some browsers send .docx as msword, so check extension\n      if (ext === 'docx') return 'docx';\n      return 'doc';\n    }\n    if (mt.includes('pdf')) return 'pdf';\n    if (mt.includes('image')) return 'image';\n  }\n  // Fallback to extension\n  if (ext === 'docx') return 'docx';\n  if (ext === 'doc') return 'doc';\n  if (ext === 'pdf') return 'pdf';\n  if (['jpg','jpeg','png'].includes(ext)) return 'image';\n  return 'unknown';\n}\n\nfor (const item of items) {\n  const data = item.json;\n  const documentId = data.document_id;\n  const mimetype = data.mimeType || data.mimetype || (Array.isArray(data.file) && data.file.length > 0 && data.file[0].mimetype) || undefined;\n  const preferredFilename = extractFilename(data);\n  const detectedType = detectType(preferredFilename, mimetype);\n  const qualityScore = data.quality_score || 0;\n  const confidence = data.confidence || 0;\n  let classificationFactors = [];\n  let processingRequirements = [];\n  if (detectedType === 'pdf') {\n    classificationFactors.push('PDF document detected');\n    processingRequirements.push('OCR processing', 'Text extraction');\n  } else if (detectedType === 'docx') {\n    classificationFactors.push('DOCX document detected');\n    processingRequirements.push('Direct text extraction', 'Format parsing');\n  } else if (detectedType === 'doc') {\n    classificationFactors.push('DOC document detected');\n    processingRequirements.push('Convert to DOCX', 'Direct text extraction');\n  } else if (detectedType === 'image') {\n    classificationFactors.push('Image document detected');\n    processingRequirements.push('OCR processing', 'Image enhancement');\n  } else {\n    classificationFactors.push('Unknown document type');\n    processingRequirements.push('Manual review');\n  }\n  if (qualityScore >= 0.8) {\n    classificationFactors.push('High quality document');\n    processingRequirements.push('Standard processing');\n  } else if (qualityScore >= 0.5) {\n    classificationFactors.push('Medium quality document');\n    processingRequirements.push('Enhanced processing', 'Quality improvement');\n  } else {\n    classificationFactors.push('Low quality document');\n    processingRequirements.push('Manual review', 'Quality enhancement');\n  }\n  const filename = preferredFilename.toLowerCase();\n  let subType = 'general';\n  if (filename.includes('cv') || filename.includes('resume')) {\n    classificationFactors.push('Resume/CV document identified');\n    processingRequirements.push('Personal info extraction', 'Skills parsing');\n    subType = 'resume';\n  } else if (filename.includes('application')) {\n    classificationFactors.push('Application form identified');\n    processingRequirements.push('Form field extraction', 'Structured data parsing');\n    subType = 'application_form';\n  } else if (filename.includes('certificate')) {\n    subType = 'certificate';\n  }\n  processedItems.push({\n    json: {\n      document_id: documentId,\n      document_type: detectedType,\n      sub_type: subType,\n      confidence: confidence,\n      classification_factors: classificationFactors,\n      processing_requirements: processingRequirements,\n      original_filename: preferredFilename,\n      quality_score: qualityScore,\n      classification_metadata: {\n        source_filename: preferredFilename,\n        detected_extension: preferredFilename.split('.').pop()?.toLowerCase(),\n        original_type: data.document_type || 'unknown',\n        final_type: detectedType,\n        mimetype: mimetype\n      }\n    }\n  });\n}\n\nreturn processedItems;"
      },
      "id": "fe313612-16f3-4cde-88ff-d78d2485de27",
      "name": "Classification Engine1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1824,
        720
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced file type classification with better detection\nconst items = $input.all();\nconst processedItems = [];\n\nfunction detectFormat(documentType, filename, mimetype) {\n  // Priority 1: Use backend classification if reliable\n  if (documentType && documentType !== 'unknown') {\n    return documentType;\n  }\n  \n  // Priority 2: MIME type analysis\n  if (mimetype) {\n    const mimeType = mimetype.toLowerCase();\n    if (mimeType.includes('pdf')) return 'pdf';\n    if (mimeType.includes('msword') || mimeType.includes('word')) return 'doc';\n    if (mimeType.includes('officedocument.wordprocessingml.document')) return 'docx';\n    if (mimeType.includes('image')) {\n      if (mimeType.includes('jpeg') || mimeType.includes('jpg')) return 'jpg';\n      if (mimeType.includes('png')) return 'png';\n      return 'image';\n    }\n  }\n  \n  // Priority 3: Filename extension\n  if (filename) {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    const validExtensions = ['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png'];\n    if (validExtensions.includes(ext)) {\n      return ext === 'jpeg' ? 'jpg' : ext;\n    }\n  }\n  \n  return 'unknown';\n}\n\nfor (const item of items) {\n  const data = item.json;\n  \n  const documentType = data.document_type;\n  const filename = data.original_filename || data.fileName || data.filename;\n  const mimetype = data.mimeType || data.mimetype;\n  \n  const format = detectFormat(documentType, filename, mimetype);\n  \n  // Add additional metadata for processing\n  const result = {\n    json: {\n      ...data, // Preserve all original data\n      format: format,\n      file_extension: filename ? filename.split('.').pop()?.toLowerCase() : null,\n      mime_type: mimetype,\n      classification_complete: true,\n      processing_ready: format !== 'unknown',\n      // Ensure filename is preserved\n      original_filename: filename || `document_${data.document_id || 'unknown'}`,\n      // Add debugging info\n      format_detection: {\n        input_type: documentType,\n        input_filename: filename,\n        input_mimetype: mimetype,\n        final_format: format\n      }\n    }\n  };\n  \n  processedItems.push(result);\n}\n\nreturn processedItems;"
      },
      "id": "07e0d001-5747-4d46-b527-c10c91e9c6ac",
      "name": "Classify File Type1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1376,
        720
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "doc",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "30e3bc04-df43-4991-976f-5d54389e6854"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8b5d390e-d2e6-4180-8bde-b5f9e6c18698",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "docx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3e126769-faf2-4943-859e-abe29e904eb0",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a7951a45-f1ca-4cea-89a9-b44027f36cf1",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -704,
        576
      ],
      "id": "259dca4a-5c74-42bf-942c-79244f342dd5",
      "name": "Switch1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "file"
            }
          }
        }
      },
      "id": "f119fd74-de47-4a3d-89df-b5c03abda094",
      "name": "Convert DOCX to PDF (FastAPI)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -400,
        912
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "original_filename",
              "field2": "original_filename"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -928,
        608
      ],
      "id": "32c22a6e-7a51-4ee3-ba7e-aad8dff60545",
      "name": "Merge"
    },
    {
      "parameters": {
        "docType": "Job%20Applicant",
        "properties": {
          "customProperty": [
            {
              "field": "applicant_name",
              "value": "={{ $json.applicant_name }}"
            },
            {
              "field": "email_id",
              "value": "={{ $json.email_id }}"
            },
            {
              "field": "phone_number",
              "value": "={{ $json.phone_number }}"
            },
            {
              "field": "country",
              "value": "={{ $json.country }}"
            },
            {
              "field": "date_of_birth",
              "value": "={{ $json.date_of_birth }}"
            },
            {
              "field": "cnic_number",
              "value": "={{ $json.cnic_number }}"
            },
            {
              "field": "gender",
              "value": "={{ $json.gender }}"
            },
            {
              "field": "skills",
              "value": "={{ $json.skills }}"
            },
            {
              "field": "father_name",
              "value": "={{ $json.father_name }}"
            },
            {
              "field": "mother_name",
              "value": "={{ $json.mother_name }}"
            },
            {
              "field": "street_address",
              "value": "={{ $json.street_address }}"
            },
            {
              "field": "city",
              "value": "={{ $json.city }}"
            },
            {
              "field": "province",
              "value": "={{ $json.province }}"
            },
            {
              "field": "marital_status",
              "value": "={{ $json.marital_status }}"
            },
            {
              "field": "religion",
              "value": "={{ $json.religion }}"
            },
            {
              "field": "sect",
              "value": "={{ $json.sect }}"
            },
            {
              "field": "telephone_number",
              "value": "={{ $json.telephone_number }}"
            },
            {
              "field": "known_languages",
              "value": "={{ $json.known_languages[0] }}"
            },
            {
              "field": "nationality",
              "value": "={{ $json.nationality }}"
            },
            {
              "field": "designation",
              "value": "={{ $json.selected_designation }}"
            },
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        6224,
        416
      ],
      "id": "ea75679f-ac5c-436c-a1bd-2abda879841d",
      "name": "Create a document",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Split experience data into individual Experience Certifications for ERPNext\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  const jobApplicantData = item.json;\n  const experienceArray = jobApplicantData.experience || [];\n  \n  // Store the job applicant document name for reference\n  const jobApplicantName = jobApplicantData.name;\n  \n  if (Array.isArray(experienceArray) && experienceArray.length > 0) {\n    // Create separate items for each experience entry\n    experienceArray.forEach((experience, index) => {\n      result.push({\n        json: {\n          job_applicant: jobApplicantName,\n          company: experience.company || 'Not Specified',\n          designation: experience.designation || 'Not Specified',\n          years_of_experience: experience.years_of_experience || '0',\n          experience_description: experience.experience_description || 'No description provided',\n          from_date: experience.from_date || '2000-01-01',\n          to_date: experience.to_date || '2000-01-01',\n          salary: experience.salary || 0,\n          idx: index + 1,\n          parentfield: 'experience',\n          parenttype: 'Job Applicant',\n          doctype: 'Experience Certifications'\n        }\n      });\n    });\n  } else {\n    // If no experience data, create a default entry\n    result.push({\n      json: {\n        job_applicant: jobApplicantName,\n        company: 'Not Specified',\n        designation: 'Not Specified',\n        years_of_experience: '0',\n        experience_description: 'No experience data provided',\n        from_date: '2000-01-01',\n        to_date: '2000-01-01',\n        salary: 0,\n        idx: 1,\n        parentfield: 'experience',\n        parenttype: 'Job Applicant',\n        doctype: 'Experience Certifications'\n      }\n    });\n  }\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6528,
        416
      ],
      "id": "1e8a96da-da6a-4d18-876e-1609e708cc62",
      "name": "Split Experience Data"
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Collect experience data directly from Split Experience Data and prepare for Job Applicant update\nconst items = $input.all();\nconst experienceEntries = [];\nlet jobApplicantName = '';\n\nfor (const item of items) {\n  // Get the job applicant name from the first item\n  if (!jobApplicantName && item.json.job_applicant) {\n    jobApplicantName = item.json.job_applicant;\n  }\n  \n  // Collect experience data for child table (no need to create separate documents)\n  experienceEntries.push({\n    company: item.json.company,\n    designation: item.json.designation,\n    years_of_experience: item.json.years_of_experience,\n    experience_description: item.json.experience_description,\n    from_date: item.json.from_date,\n    to_date: item.json.to_date,\n    salary: item.json.salary,\n    idx: experienceEntries.length + 1\n  });\n}\n\nreturn [{\n  json: {\n    job_applicant_name: jobApplicantName,\n    experience_certifications: experienceEntries,\n    total_experience_entries: experienceEntries.length\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        7120,
        416
      ],
      "id": "2387edcf-1bd6-4d69-afcd-4a35cb0cfdad",
      "name": "Collect Experience Data"
    },
    {
      "parameters": {
        "operation": "update",
        "docType": "Job%20Applicant",
        "properties": {
          "customProperty": [
            {
              "field": "experience",
              "value": "={{ $json.experience_certifications }}"
            },
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        7424,
        416
      ],
      "id": "e5ff90f2-9893-43a8-b241-b83f700b46a6",
      "name": "Update Job Applicant Experience",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract just the fieldnames from the doctype response\nconst response = $input.all()[0].json;\n\n// Handle different response structures\nlet fields = [];\n\n// Try to get fields from different possible response structures\nif (response.message?.docs?.[0]?.fields) {\n  fields = response.message.docs[0].fields;\n} else if (response.docs?.[0]?.fields) {\n  fields = response.docs[0].fields;\n} else if (Array.isArray(response.fields)) {\n  fields = response.fields;\n}\n\nif (fields.length > 0) {\n  const fieldnames = fields.map(field => field.fieldname).filter(name => name);\n  return [{\n    json: {\n      fieldnames: fieldnames,\n      total_fields: fieldnames.length\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    error: 'Could not retrieve field information',\n    response: response,\n    tip: 'Please check if you are properly authenticated and have permissions to access the Job Applicant doctype'\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -256,
        368
      ],
      "name": "Get Field Names",
      "id": "27d1d2b0-3e7f-4ffc-b5f3-bfd99a3bc22e"
    },
    {
      "parameters": {
        "url": "https://app.alphaworkforce.org/api/method/frappe.desk.form.load.getdoctype?doctype=Job%20Applicant",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "erpNextApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -480,
        368
      ],
      "id": "a92d3c22-bfc6-4ab8-aff8-b2824b88f362",
      "name": "HTTP Request",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst outputItems = [];\n\nfunction fixDateFormat(dateStr) {\n  if (typeof dateStr !== 'string') return dateStr;\n  const match = dateStr.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/);\n  if (match) {\n    return `${match[3]}-${match[2]}-${match[1]}`;\n  }\n  return dateStr;\n}\n\n\nfor (const item of items) {\n  let rawText = item.json.text;\n  rawText = rawText.replace(/\\\\n/g, '');\n  let parsed;\n  try {\n    parsed = JSON.parse(rawText);\n  } catch (e) {\n    try {\n      parsed = JSON.parse(rawText.trim());\n    } catch (err) {\n      parsed = { output: {} };\n    }\n  }\n  if (parsed && parsed.output) {\n    if (Array.isArray(parsed.output.skills)) {\n      parsed.output.skills = parsed.output.skills.join(', ');\n    }\n\n    // Fix date fields\n    parsed.output.date_of_birth = fixDateFormat(parsed.output.date_of_birth);\n    parsed.output.passport_issue_date = fixDateFormat(parsed.output.passport_issue_date);\n    parsed.output.passport_expiry_date = fixDateFormat(parsed.output.passport_expiry_date);\n    parsed.output.driving_license_issue_date = fixDateFormat(parsed.output.driving_license_issue_date);\n    parsed.output.driving_license_expiry_date = fixDateFormat(parsed.output.driving_license_expiry_date);\n\n    outputItems.push({ json: parsed.output });\n  } else {\n    outputItems.push({ json: {} });\n  }\n}\n\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1712,
        656
      ],
      "id": "3345f74a-b5ba-40da-8a9f-c99e9bf664ad",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "docType": "Designation",
        "returnAll": true,
        "options": {
          "fields": [
            "designation_name"
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        -656,
        64
      ],
      "id": "d12ec079-57fd-48c0-81e1-cbe1dd64a7d2",
      "name": "Get many documents",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1936,
        352
      ],
      "id": "d0b9fe5f-198b-43d8-b23b-922c84c607da",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "// Combine applicant data and designation names into a single object and assign all data to a variable\n\nconst input = $input.all().map(item => item.json);\n\n// Find the applicant object (has more than just designation_name)\nconst applicant = input.find(obj => !obj.designation_name);\n\n// Collect all designation names into an array\nconst designations = input\n  .filter(obj => obj.designation_name)\n  .map(obj => obj.designation_name);\n\n// Add the designations array to the applicant object\nlet result;\nif (applicant) {\n  applicant.designation_list = designations;\n  result = applicant;\n} else {\n  result = { designation_list: designations };\n}\n\n// Assign all data to a variable 'text' for LLM\nconst text = JSON.stringify(result);\n\nreturn [{ json: { ...result, text } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2160,
        352
      ],
      "id": "4f5b2fdb-c416-4a8b-85ce-bdc9b4393ccb",
      "name": "Combine Designations and Candidate Data"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are given a list of designations: {{ $json.designation_list }}.\nMatch the candidate's experience, education, skills, and technical qualifications ({{ $json.skills }}, {{ $json.technical_qualification }}, {{ $json.experience }}) to each designation in the list.\n\nFor each designation, assign a score from 0 to 100 based on the candidate's fit, focusing on experience and education.\n\nSTRICT OUTPUT REQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Each key must be a designation from the provided list, and each value must be a score (number or string).\n- Do NOT include any notes, explanations, markdown, or extra text.\n- Do NOT create or invent new designations.\n- Output must start with '{' and end with '}'.\n- Do NOT include any text before or after the JSON.\n\nExample:\n{\n  \"Accountant\": \"80\",\n  \"Engineer\": \"60\",\n  \"Manager\": \"40\"\n}",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        2384,
        352
      ],
      "id": "701dfd23-7e8c-44d7-bcdb-3224cde46cc3",
      "name": "Designation Scorer"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"designation\":\"score\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2512,
        576
      ],
      "id": "a4c55b2f-56cf-4991-a265-143912f6ea2c",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "jsCode": "// Check designation scores and route accordingly\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const scores = item.json.output;\n  let bestDesignation = null;\n  let bestScore = 0;\n  \n  // Find the highest scoring designation\n  for (const [designation, score] of Object.entries(scores)) {\n    const numScore = parseInt(score);\n    if (numScore > bestScore) {\n      bestScore = numScore;\n      bestDesignation = designation;\n    }\n  }\n  \n  // If best score is above 80, use it\n  if (bestScore > 80) {\n    results.push({\n      json: {\n        ...item.json,\n        selected_designation: bestDesignation,\n        designation_score: bestScore,\n        designation_source: 'ai_match',\n        route: 'direct_create'\n      }\n    });\n  } else {\n    // If no score above 80, route to AI assignment\n    results.push({\n      json: {\n        ...item.json,\n        best_designation: bestDesignation,\n        best_score: bestScore,\n        route: 'ai_assign'\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2752,
        352
      ],
      "id": "b2c4c954-47f5-429c-8ff0-562386741004",
      "name": "Designation Logic"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route }}",
                    "rightValue": "direct_create",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-direct"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route }}",
                    "rightValue": "ai_assign",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-ai"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2976,
        352
      ],
      "id": "63ac168a-75f6-4f17-a642-4ca25df939f4",
      "name": "Route Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Based on the candidate's profile and the fact that no existing designation scored above 80%, please assign the most appropriate designation from this list: {{ $json.designation_list }}.\n\nCandidate Profile:\n- Skills: {{ $json.skills }}\n- Technical Qualification: {{ $json.technical_qualification }}\n- Experience: {{ $json.experience }}\n- Best matching designation so far: {{ $json.best_designation }} ({{ $json.best_score }}%)\n\nSTRICT OUTPUT REQUIREMENTS:\n- Output ONLY the designation name as a single string.\n- Choose ONLY from the provided designation list.\n- Do NOT include explanations, quotes, or extra text.\n- Return just the designation name.\n\nExample output: Software Developer",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        3200,
        288
      ],
      "id": "a8d27ab9-a9b6-4bcc-8073-657094704e44",
      "name": "AI Designation Assigner"
    },
    {
      "parameters": {
        "jsCode": "// Process AI designation assignment result\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const aiDesignation = item.json.text ? item.json.text.trim() : item.json.output;\n  \n  results.push({\n    json: {\n      ...item.json,\n      selected_designation: aiDesignation,\n      designation_score: 85, // Assign high score for AI-selected designation\n      designation_source: 'ai_assigned'\n    }\n  });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3552,
        288
      ],
      "id": "b6593d73-d514-421a-ac25-a6e4d3f75f2d",
      "name": "Process AI Designation"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3776,
        432
      ],
      "id": "7c26a36a-0943-4292-be40-8fe6f586115c",
      "name": "Merge3"
    },
    {
      "parameters": {
        "jsCode": "// Merge the two input items: one with personal info, one with designation info\nconst items = $input.all();\nif (items.length < 2) {\n  // Fallback: just return the first item if only one present\n  return items;\n}\n\n// Find the personal info object (has applicant_name) and the designation object (has selected_designation)\nconst personalInfo = items.find(item => item.json.applicant_name);\nconst designationInfo = items.find(item => item.json.selected_designation);\n\n// Merge all fields, with designation fields overwriting if needed\nconst merged = {\n  ...personalInfo.json,\n  ...designationInfo.json\n};\n\n// Ensure designation_list is properly preserved from either source\nif (!merged.designation_list || merged.designation_list.length === 0) {\n  // Try to get designation_list from personal info first, then designation info\n  merged.designation_list = personalInfo?.json?.designation_list || designationInfo?.json?.designation_list || [];\n}\n\n// Debug: Log what we have for designation matching\nconsole.log('DEBUG - Designation matching:', {\n  selected_designation: merged.selected_designation,\n  designation_list: merged.designation_list,\n  designation_list_length: merged.designation_list ? merged.designation_list.length : 0,\n  ai_route_decision: merged.route\n});\n\n// Check if AI has already made a routing decision\nconst aiRouteDecision = merged.route;\nconst hasAIRouting = aiRouteDecision === 'direct_create' || aiRouteDecision === 'create_designation_first';\n\n// Check if the selected designation exists in the designation list\n// Use case-insensitive comparison and trim whitespace for better matching\nconst designationExists = merged.designation_list && merged.designation_list.length > 0 && \n  merged.designation_list.some(designation => \n    designation.toLowerCase().trim() === merged.selected_designation.toLowerCase().trim()\n  );\n\n// Smart routing logic: Respect AI decision when available, fallback to list checking\nlet finalRouteAction;\nlet routingReason;\n\nif (hasAIRouting) {\n  // Trust AI's routing decision\n  if (aiRouteDecision === 'direct_create') {\n    finalRouteAction = 'create_applicant';\n    routingReason = 'ai_determined_designation_exists';\n  } else {\n    finalRouteAction = 'create_designation_first';\n    routingReason = 'ai_determined_designation_missing';\n  }\n} else {\n  // Fallback to traditional list checking\n  finalRouteAction = designationExists ? 'create_applicant' : 'create_designation_first';\n  routingReason = designationExists ? 'list_check_found_match' : 'list_check_no_match';\n}\n\n// Add routing information\nmerged.designation_exists = hasAIRouting ? (aiRouteDecision === 'direct_create') : designationExists;\nmerged.route_action = finalRouteAction;\nmerged.routing_method = hasAIRouting ? 'ai_decision' : 'list_verification';\nmerged.routing_reason = routingReason;\n\n// Add debugging information for troubleshooting\nmerged.debug_info = {\n  selected_designation: merged.selected_designation,\n  selected_normalized: merged.selected_designation ? merged.selected_designation.toLowerCase().trim() : null,\n  designation_list_count: merged.designation_list ? merged.designation_list.length : 0,\n  designation_exists: merged.designation_exists,\n  designation_list_sample: merged.designation_list ? merged.designation_list.slice(0, 5) : [],\n  matching_designations: merged.designation_list ? \n    merged.designation_list.filter(d => \n      d.toLowerCase().trim() === merged.selected_designation.toLowerCase().trim()\n    ) : [],\n  // AI routing information\n  ai_route_decision: aiRouteDecision,\n  has_ai_routing: hasAIRouting,\n  final_route_action: finalRouteAction,\n  routing_method: merged.routing_method,\n  routing_reason: routingReason,\n  // Additional debugging\n  merge_sources: {\n    personal_info_has_designation_list: !!(personalInfo?.json?.designation_list),\n    designation_info_has_designation_list: !!(designationInfo?.json?.designation_list),\n    personal_info_list_count: personalInfo?.json?.designation_list ? personalInfo.json.designation_list.length : 0,\n    designation_info_list_count: designationInfo?.json?.designation_list ? designationInfo.json.designation_list.length : 0\n  }\n};\n\nreturn [{ json: merged }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4000,
        432
      ],
      "id": "4bd58c90-b5eb-4496-bd7d-f48bac64b222",
      "name": "Code3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze this resume/CV document and extract job applicant information into a structured JSON format.\n\nYou are analyzing a visual document (image or PDF page). Carefully examine all text, formatting, and layout elements in the image.\nAnalyze the provided document content image to extract information.\n\n\nYou must return a valid JSON object with a single \"output\" key, containing ALL the following fields:\n{{ $json.fieldnames }}\n\nSTRICT FORMAT REQUIREMENTS:\n- The response MUST be a JSON object with a single \"output\" key\n- The \"output\" object MUST contain ALL {{ $json.total_fields }} fields listed above, no more, no less\n- Known languages should be speaking languages (English, Urdu, Arabic), not programming languages\n- Field-specific formats:\n   - Name : Should not be in all CAPS\n   - Dates: YYYY-MM-DD format only (convert any date format you find)\n   - Phone/mobile: Does not include dashes and space \n   - Email: Must be valid email format\n   - Languages: Must be arrays\n   - IDs (passport, CNIC, etc.): without dashes or spaces\n   - Marital Status: Married/Unmarried ( if it is Single then keep it as Unmarried)\n- Boolean fields (has_passport, has_license): true or false\n\nDefault values for missing information:\n- Names: \"Unknown Applicant\"\n- Email: \"no_email@placeholder.com\"\n- Phone/mobile: 0\n- Dates: \"2000-01-01\"\n- Regular text fields: \"Not Specified\"\n- Arrays: []\n- Known languages: [\"Urdu\"]\n- Skills: \"Not Specified\"\n- Experience: \"Not Specified\"\n- Boolean fields: false\n- Country : Pakistan\n\nEXPERIENCE EXTRACTION - STRUCTURED APPROACH:\n\n**Experience Sources (Check ALL of these):**\n- Dedicated \"Experience\" or \"Work Experience\" sections\n- \"Employment History\" or \"Professional Experience\" areas\n- \"Career Summary\" or \"Work History\" sections\n- Individual job entries with dates and companies\n- Project work mentioned with duration\n- Internships, apprenticeships, and training programs\n- Freelance or contract work\n- Part-time and full-time positions\n\n**Experience Data to Extract for Each Position:**\n1. **Job Title/Position**: Extract the exact job title or role\n2. **Company/Organization**: Name of the employer or institution\n3. **Duration**: Start and end dates, or total years/months\n4. **Key Responsibilities**: Main duties and achievements\n5. **Skills Used**: Technical and soft skills demonstrated\n\n**Experience Formatting Rules:**\n- Extract EACH job/position as a separate experience entry\n- Include duration even if approximate (e.g., \"2 years\", \"6 months\")\n- Capture company names accurately\n- Include both job title and company for each entry\n- Separate multiple positions with clear delimiters\n- Format: \"[Duration] as [Job Title] at [Company] - [Key Responsibilities]\"\n\n**Example Experience Format:**\n\"3 years as Automation Technician at TECNO AUTO GLASS - Installation and troubleshooting of electrical systems; 1 year as Electrical Technician at MULTICON ENGINEERS LTD - PLC programming and HMI configuration; 1 year as Maintenance Engineer at ACCRESCENT ENGINEERING PVT LTD - VFD installation and motor control systems\"\n\nEXTRACTION GUIDELINES:\n- Pay attention to layout and visual organization\n- Scan for any information in margins or headers\n- Look for structured sections and keywords\n- Extract information from any format or layout\n- Extract personal information (name, contact details, address)\n- Find education details from education/qualification sections\n- Identify work experience from employment history\n- Search for passport/CNIC numbers in personal details\n- Pay attention to dates in various formats throughout the document\n- Extract phone numbers and email addresses from contact information\n- Notice any certifications or licenses mentioned\n- Look for languages mentioned in skills or personal sections\n- Be thorough in extracting all available information\n- If you see partial information, extract what you can\n\nSKILLS EXTRACTION - COMPREHENSIVE APPROACH:\n\n**Primary Skills Sources (Check ALL of these):**\n- Dedicated \"Skills\" section\n- \"Technical Skills\" or \"Core Competencies\" sections\n- \"Key Skills\" or \"Professional Skills\" areas\n- \"Software\" or \"Tools\" sections\n- \"Technologies\" or \"Platforms\" sections\n- Skills mentioned within job descriptions/experience\n- Skills listed in project descriptions\n- Certifications that imply skills (e.g., \"Microsoft Office Certified\" = MS Office skills)\n- Education-related skills (programming languages from CS degree, etc.)\n\n**Skills Categories to Extract:**\n\n1. **Technical/Hard Skills:**\n   - Programming languages (Python, Java, C++, JavaScript, etc.)\n   - Software applications (MS Office, AutoCAD, Photoshop, SAP, etc.)\n   - Operating systems (Windows, Linux, macOS, etc.)\n   - Databases (MySQL, Oracle, PostgreSQL, etc.)\n   - Frameworks and libraries (React, Angular, Django, etc.)\n   - Tools and platforms (Git, Docker, AWS, Azure, etc.)\n   - Industry-specific tools (PLC programming, MATLAB, SolidWorks, etc.)\n\n2. **Professional/Soft Skills:**\n   - Communication, Leadership, Project Management\n   - Problem-solving, Analytical thinking\n   - Team collaboration, Customer service\n   - Time management, Organization\n\n3. **Domain-Specific Skills:**\n   - Engineering skills (Electrical design, Circuit analysis, etc.)\n   - Finance skills (Financial analysis, Budgeting, etc.)\n   - Marketing skills (Digital marketing, SEO, etc.)\n   - Medical skills (Patient care, Medical procedures, etc.)\n\n4. **Language Skills:**\n   - Spoken languages (separate from programming languages)\n   - Language proficiency levels if mentioned\n\n**Skills Extraction Rules:**\n- Extract ALL skills mentioned, even if briefly\n- Include skills from experience descriptions (e.g., \"Managed team of 10\" = Leadership, Team Management)\n- Look for skills in bullet points, paragraphs, and lists\n- Extract skills from project descriptions\n- Include skills implied by job titles or responsibilities\n- Separate technical skills from soft skills when possible\n- Include skill variations (e.g., \"MS Word\" and \"Microsoft Word\" as \"Microsoft Word\")\n- Don't miss skills mentioned in context (e.g., \"Experienced in Python programming\")\n\n**Skill Formatting:**\n- Combine into a comprehensive skills string\n- Separate multiple skills with commas\n- Use standard names (e.g., \"Microsoft Excel\" not \"Excel\", \"Python\" not \"python\")\n- Include skill levels if mentioned (e.g., \"Advanced Excel\", \"Intermediate Python\")\n\nIMPORTANT: Your response must be valid JSON that can be parsed. Do not include any explanations, comments, or markdown formatting. Return only the raw JSON object. Your response must start with '{' and end with '}'.",
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "messageType": "imageBinary",
              "binaryImageDataKey": "file"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1360,
        656
      ],
      "id": "a888aab0-7c13-43c5-9854-6d3852c1c99a",
      "name": "Resume Parser"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route_action }}",
                    "rightValue": "create_applicant",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-direct-applicant"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route_action }}",
                    "rightValue": "create_designation_first",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-create-designation"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        4448,
        400
      ],
      "id": "e2ae5099-0c15-44db-ba8c-bb9a33effc62",
      "name": "Designation Check Switch"
    },
    {
      "parameters": {
        "jsCode": "// After attempting to create designation, prepare data for job applicant creation\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  // Check if the designation creation was successful or failed\n  const hasError = item.json.error || item.json.errorMessage;\n  const isSuccess = !hasError && item.json.name; // ERPNext returns 'name' field on successful creation\n  \n  // Handle both success and error cases (e.g., duplicate designation)\n  let designationStatus = 'unknown';\n  let designationMessage = '';\n  \n  if (isSuccess) {\n    designationStatus = 'created';\n    designationMessage = `Designation '${item.json.designation_name || item.json.selected_designation}' created successfully`;\n  } else if (hasError) {\n    // Check if it's a duplicate error\n    const errorMsg = item.json.errorMessage || item.json.error || '';\n    if (errorMsg.toLowerCase().includes('duplicate') || \n        errorMsg.toLowerCase().includes('already exists') ||\n        errorMsg.toLowerCase().includes('unique')) {\n      designationStatus = 'already_exists';\n      designationMessage = `Designation '${item.json.selected_designation}' already exists in system`;\n    } else {\n      designationStatus = 'creation_failed';\n      designationMessage = `Failed to create designation: ${errorMsg}`;\n    }\n  }\n  \n  result.push({\n    json: {\n      ...item.json,\n      designation_creation_status: designationStatus,\n      designation_creation_message: designationMessage,\n      designation_available: isSuccess || designationStatus === 'already_exists',\n      ready_for_applicant_creation: true,\n      // Clear any error fields since we've handled them\n      error: undefined,\n      errorMessage: undefined\n    }\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5600,
        656
      ],
      "id": "cbdd46ff-8c3d-44ef-9d61-d725ace35c9e",
      "name": "Post Designation Creation"
    },
    {
      "parameters": {
        "jsCode": "// Verify designation creation and prepare final data\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  // Add final verification and logging\n  const finalData = {\n    ...item.json,\n    workflow_step: 'designation_verified',\n    final_verification: {\n      has_selected_designation: !!item.json.selected_designation,\n      designation_source: item.json.designation_source,\n      creation_status: item.json.designation_creation_status,\n      ready_for_applicant: item.json.ready_for_applicant_creation\n    }\n  };\n  \n  result.push({ json: finalData });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5824,
        672
      ],
      "id": "cc511c6a-9490-48fc-8aff-4a19e1975d61",
      "name": "Designation Verification"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        6000,
        416
      ],
      "id": "0a2a81c1-4b28-4bb5-a38a-8c8cb4077976",
      "name": "Final Merge"
    },
    {
      "parameters": {
        "jsCode": "// Process experience data into ERPNext child table format\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  const data = item.json;\n  const experienceText = data.experience || \"Not Specified\";\n  \n  // Initialize experience child table array\n  let experienceChildTable = [];\n  \n  if (experienceText !== \"Not Specified\" && experienceText.trim() !== \"\") {\n    // Parse experience text into structured format\n    try {\n      // Split by common delimiters and clean up\n      const experienceEntries = experienceText\n        .split(/[;,]|\\band\\b|\\bthen\\b/i)\n        .map(entry => entry.trim())\n        .filter(entry => entry.length > 10); // Filter out very short entries\n      \n      experienceEntries.forEach((entry, index) => {\n        // Extract years/duration pattern\n        const yearPattern = /(\\d+)\\s*(year[s]?|month[s]?|yr[s]?)/i;\n        const yearMatch = entry.match(yearPattern);\n        \n        // Extract company name pattern (variations: \"at Company\", \"in Company\", \"with Company\")\n        const companyPattern = /(?:at|in|with|for)\\s+([A-Z][A-Za-z\\s&\\.,\\-]+?)(?:\\s*[-–—]|$|\\s+as\\s|\\s+doing\\s)/i;\n        const companyMatch = entry.match(companyPattern);\n        \n        // Extract job title pattern (variations: \"as Title\", \"working as Title\")\n        const titlePattern = /(?:as|working as)\\s+([A-Za-z\\s&\\.,\\-]+?)(?:\\s*at|\\s*in|\\s*with|\\s*for|\\s*[-–—]|$)/i;\n        const titleMatch = entry.match(titlePattern);\n        \n        // Alternative patterns for different formats\n        let duration = \"Not Specified\";\n        let company = \"Not Specified\";\n        let title = \"Not Specified\";\n        \n        // Extract duration\n        if (yearMatch) {\n          duration = `${yearMatch[1]} ${yearMatch[2].toLowerCase()}`;\n        }\n        \n        // Extract company\n        if (companyMatch) {\n          company = companyMatch[1].trim().replace(/[,;]$/, ''); // Remove trailing punctuation\n        }\n        \n        // Extract job title\n        if (titleMatch) {\n          title = titleMatch[1].trim().replace(/[,;]$/, ''); // Remove trailing punctuation\n        } else {\n          // Try to extract title from the beginning of the entry\n          const words = entry.split(/\\s+/);\n          const commonTitles = ['technician', 'engineer', 'manager', 'developer', 'analyst', 'assistant', 'officer', 'supervisor', 'coordinator', 'specialist'];\n          for (let i = 0; i < Math.min(5, words.length); i++) {\n            if (commonTitles.some(titleWord => words[i].toLowerCase().includes(titleWord))) {\n              title = words.slice(0, i + 1).join(' ');\n              break;\n            }\n          }\n        }\n        \n        // If we couldn't extract company or title, use fallback approach\n        if (company === \"Not Specified\" || title === \"Not Specified\") {\n          // Look for ALL CAPS words (often company names)\n          const allCapsPattern = /\\b[A-Z]{2,}(?:\\s+[A-Z]{2,})*\\b/g;\n          const allCapsMatches = entry.match(allCapsPattern);\n          \n          if (allCapsMatches && company === \"Not Specified\") {\n            company = allCapsMatches[0];\n          }\n          \n          // If still no title, use a generic extraction\n          if (title === \"Not Specified\") {\n            const firstWords = entry.split(/\\s+/).slice(0, 3).join(' ');\n            if (firstWords.length > 5) {\n              title = firstWords;\n            }\n          }\n        }\n        \n        // Create experience entry in ERPNext child table format\n        const experienceEntry = {\n          \"doctype\": \"Experience Certifications\",  // Child table doctype\n          \"company\": company,\n          \"designation\": title,\n          \"years_of_experience\": duration,\n          \"experience_description\": entry.slice(0, 200), // Limit description length\n          \"idx\": index + 1,  // Row index for child table\n          \"parentfield\": \"experience\",  // Parent field name\n          \"parenttype\": \"Job Applicant\"  // Parent doctype\n        };\n        \n        experienceChildTable.push(experienceEntry);\n      });\n      \n      // If no structured entries were created, create a single entry with all text\n      if (experienceChildTable.length === 0) {\n        experienceChildTable.push({\n          \"doctype\": \"Experience Certifications\",\n          \"company\": \"Various Companies\",\n          \"designation\": data.job_title || \"Not Specified\",\n          \"years_of_experience\": \"Not Specified\",\n          \"experience_description\": experienceText.slice(0, 200),\n          \"idx\": 1,\n          \"parentfield\": \"experience\",\n          \"parenttype\": \"Job Applicant\"\n        });\n      }\n    } catch (error) {\n      console.log('Error parsing experience:', error);\n      // Fallback to simple entry\n      experienceChildTable.push({\n        \"doctype\": \"Experience Certifications\",\n        \"company\": \"Not Specified\",\n        \"designation\": data.job_title || \"Not Specified\",\n        \"years_of_experience\": \"Not Specified\",\n        \"experience_description\": experienceText.slice(0, 200),\n        \"idx\": 1,\n        \"parentfield\": \"experience\",\n        \"parenttype\": \"Job Applicant\"\n      });\n    }\n  }\n  \n  // Add the structured experience data to the result\n  result.push({\n    json: {\n      ...data,\n      experience: experienceChildTable,  // ERPNext expects 'experience' field name\n      experience_count: experienceChildTable.length,\n      experience_processing_debug: {\n        original_experience: experienceText,\n        parsed_entries: experienceChildTable.length,\n        processing_method: \"child_table_format\"\n      }\n    }\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5744,
        160
      ],
      "id": "f63208f8-c099-40c1-91e0-4916cd7a9f21",
      "name": "Process Experience Data"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1360,
        864
      ],
      "id": "2de99053-8efc-429a-800a-68967ea3b6a1",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "553djEfLQRobcIUg",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2384,
        576
      ],
      "id": "b2e05582-3bdd-4b58-bc6a-5f0ea6af00da",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "553djEfLQRobcIUg",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "docType": "Designation",
        "properties": {
          "customProperty": [
            {
              "field": "designation_name",
              "value": "={{ $json.selected_designation }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        5152,
        512
      ],
      "id": "dbe1f528-f710-4c5a-8ba5-bc86659dc689",
      "name": "Create a document1",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Pre-check before creating designation - final safety check\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const data = item.json;\n  \n  // Final safety check before creating designation\n  if (data.designation_exists || (data.debug_info && data.debug_info.designation_exists)) {\n    // Designation already exists, skip creation\n    results.push({\n      json: {\n        ...data,\n        designation_creation_status: 'already_exists',\n        designation_creation_message: `Designation '${data.selected_designation}' already exists in system`,\n        designation_available: true,\n        ready_for_applicant_creation: true,\n        skip_creation: true\n      }\n    });\n  } else {\n    // Proceed with creation\n    results.push({\n      json: {\n        ...data,\n        proceed_with_creation: true\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4800,
        528
      ],
      "id": "eef9d458-d99d-4308-8c69-404858002294",
      "name": "Pre-Designation Check"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.proceed_with_creation }}",
                    "rightValue": true,
                    "operator": {
                      "type": "boolean",
                      "operation": "true"
                    },
                    "id": "67e3762c-295b-42ff-9ab6-bd379e2f0ca5"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6193a839-7544-428a-848a-9589963f847e",
                    "leftValue": "={{ $json.proceed_with_creation }}",
                    "rightValue": "false",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        5008,
        704
      ],
      "id": "32500ba9-5c8b-484f-90ae-6b6015cccf28",
      "name": "Skip Creation Switch"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -32,
        560
      ],
      "id": "b6a8cc8f-087b-41d9-a34c-00ff11cc8ed1",
      "name": "Merge2"
    },
    {
      "parameters": {
        "jsCode": "// Combine file data and fieldnames, ensure binary data is preserved\nconst items = $input.all();\nconst fileData = items[0];\nconst fieldnamesData = items[1];\n\n// Preserve binary data from the file input\nconst result = {\n  json: {\n    ...fileData.json,\n    ...fieldnamesData.json\n  },\n  binary: fileData.binary || {} // Ensure binary data is preserved\n};\n\nreturn [result];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        224,
        560
      ],
      "id": "8eb1f11c-e357-4def-91d6-aae6b0e17e94",
      "name": "Combine Data1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/extract-images",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "extracted_image"
            }
          }
        }
      },
      "id": "628f742a-f86f-41f2-9637-e605f7b8de82",
      "name": "Extract Images from PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        464,
        560
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for Resume Parser with extracted image\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  // Use extracted image if available, otherwise use original file\n  const binaryData = item.binary.extracted_image || item.binary.file;\n  \n  result.push({\n    json: {\n      ...item.json,\n      image_extracted: !!item.binary.extracted_image,\n      processing_method: item.binary.extracted_image ? 'vision_analysis' : 'direct_file'\n    },\n    binary: {\n      file: binaryData\n    }\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        688,
        560
      ],
      "id": "1a64f5c8-7adf-4ad4-a3ee-917079fc9e23",
      "name": "Prepare for Vision Analysis"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.image_extracted }}",
                    "rightValue": true,
                    "operator": {
                      "type": "boolean",
                      "operation": "true"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        912,
        560
      ],
      "id": "a248e875-7ba9-49a5-a597-4548f313ab67",
      "name": "Image Extraction Check"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/extract-text",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {}
      },
      "id": "41a093ed-2e4b-4af8-af80-00b673a31020",
      "name": "Extract Text Fallback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        480,
        752
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare text data for Resume Parser when image extraction fails\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  result.push({\n    json: {\n      ...item.json,\n      processing_method: 'text_analysis',\n      extracted_text: item.json.text_content || 'No text extracted',\n      fallback_reason: 'Image extraction failed or unavailable'\n    },\n    binary: item.binary || {}\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        704,
        752
      ],
      "id": "9d7678ad-7fb7-464b-9e10-165eb0e203bc",
      "name": "Prepare Text Analysis"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1136,
        656
      ],
      "id": "a27cbd14-716f-4bf3-8e15-a7570bc347db",
      "name": "Merge Processing Routes"
    },
    {
      "parameters": {
        "path": "df313a6d-b069-4028-b4cb-d49ae75b69e9",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -2752,
        640
      ],
      "id": "725ae412-a822-4db2-964d-453bf36fb83d",
      "name": "Webhook",
      "webhookId": "df313a6d-b069-4028-b4cb-d49ae75b69e9"
    },
    {
      "parameters": {
        "formTitle": "upload",
        "formFields": {
          "values": [
            {
              "fieldLabel": "file",
              "fieldType": "file"
            }
          ]
        },
        "responseMode": "lastNode",
        "options": {
          "buttonLabel": "Submit"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -2912,
        496
      ],
      "id": "62c98e95-a65a-45e0-af9e-1602338594f2",
      "name": "On form submission",
      "webhookId": "e5dee929-3e06-407f-aac1-3a32bf6a505e"
    }
  ],
  "connections": {
    "Store Classification1": {
      "main": [
        [
          {
            "node": "Classify File Type1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Convert DOCX to PDF (FastAPI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classification Engine1": {
      "main": [
        [
          {
            "node": "Store Classification1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify File Type1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert DOCX to PDF (FastAPI)": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a document": {
      "main": [
        [
          {
            "node": "Split Experience Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Experience Data": {
      "main": [
        [
          {
            "node": "Collect Experience Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Experience Data": {
      "main": [
        []
      ]
    },
    "Get Field Names": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Get Field Names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many documents": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Combine Designations and Candidate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Designations and Candidate Data": {
      "main": [
        [
          {
            "node": "Designation Scorer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Designation Scorer": {
      "main": [
        [
          {
            "node": "Designation Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Designation Scorer",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Designation Logic": {
      "main": [
        [
          {
            "node": "Route Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Switch": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "AI Designation Assigner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Designation Assigner": {
      "main": [
        [
          {
            "node": "Process AI Designation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Designation": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Designation Check Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resume Parser": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Designation Check Switch": {
      "main": [
        [
          {
            "node": "Final Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create a document1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post Designation Creation": {
      "main": [
        [
          {
            "node": "Designation Verification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Designation Verification": {
      "main": [
        []
      ]
    },
    "Final Merge": {
      "main": [
        [
          {
            "node": "Process Experience Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Experience Data": {
      "main": [
        [
          {
            "node": "Create a document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Resume Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Designation Scorer",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Designation Assigner",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create a document1": {
      "main": [
        [
          {
            "node": "Final Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Pre-Designation Check": {
      "main": [
        [
          {
            "node": "Skip Creation Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Skip Creation Switch": {
      "main": [
        [
          {
            "node": "Post Designation Creation",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Combine Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Data1": {
      "main": [
        [
          {
            "node": "Extract Images from PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Images from PDF": {
      "main": [
        [
          {
            "node": "Prepare for Vision Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Vision Analysis": {
      "main": [
        [
          {
            "node": "Image Extraction Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Extraction Check": {
      "main": [
        [
          {
            "node": "Merge Processing Routes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text Fallback": {
      "main": [
        [
          {
            "node": "Prepare Text Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Text Analysis": {
      "main": [
        [
          {
            "node": "Merge Processing Routes",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Processing Routes": {
      "main": [
        [
          {
            "node": "Resume Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Classification Engine1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get many documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Get many documents",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          },
          {
            "node": "Classification Engine1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8dbc788362a7064be1e99adf037458c451d1265e79b52ecf653899e06c56f8d2"
  }
}