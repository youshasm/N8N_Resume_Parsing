{
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/classification/store",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "document_type",
              "value": "={{ $json.document_type }}"
            },
            {
              "name": "sub_type",
              "value": "={{ $json.sub_type }}"
            },
            {
              "name": "confidence",
              "value": "={{ $json.confidence }}"
            },
            {
              "name": "classification_factors",
              "value": "={{ $json.classification_factors }}"
            },
            {
              "name": "processing_requirements",
              "value": "={{ $json.processing_requirements }}"
            },
            {
              "name": "original_filename",
              "value": "={{ $json.original_filename }}"
            },
            {
              "name": "quality_score",
              "value": "={{ $json.quality_score }}"
            },
            {
              "name": "classification_metadata",
              "value": "={{ $json.classification_metadata }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a97ce149-0c37-4af1-928e-7e7d4475f500",
      "name": "Store Classification1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -544,
        -208
      ]
    },
    {
      "parameters": {
        "content": "## AI",
        "height": 368,
        "width": 480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1760,
        -336
      ],
      "typeVersion": 1,
      "id": "c32daa3e-c8d1-49f2-a6c6-85b1a1181049",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## DOCX to PDF",
        "height": 224,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        576,
        -288
      ],
      "typeVersion": 1,
      "id": "bd6bd10b-b92b-4485-95c9-84f4c7bced5e",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## File Format Classification",
        "height": 224,
        "width": 816,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -896,
        -272
      ],
      "typeVersion": 1,
      "id": "41bce4a3-cfd3-4001-bf8a-9e203eaf3f26",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d505e596-8a4b-4118-adac-5c1be8492a60",
              "name": "original_filename",
              "value": "={{ $json.data.original_filename }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -96,
        -208
      ],
      "id": "33a39c0e-ce8e-4b68-9762-b15ef8483c42",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d5e8589-09d6-4b11-b17a-e29fb8f032db",
              "name": "original_filename",
              "value": "={{ $json.file[0].filename }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -768,
        -400
      ],
      "id": "da2fabec-dba1-4875-8b1d-6803f4a78684",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced classification logic with binary data preservation\nconst items = $input.all();\nconst processedItems = [];\n\nfunction extractFilename(data) {\n  if (data.converted_pdf) return data.converted_pdf.split(/[\\/]/).pop();\n  if (data.converted_docx) return data.converted_docx.split(/[\\/]/).pop();\n  if (data.original_filename && data.original_filename !== 'undefined' && data.original_filename !== 'null') return data.original_filename;\n  if (data.fileName) return data.fileName;\n  if (data.filename) return data.filename;\n  if (data.name) return data.name;\n  if (Array.isArray(data.file) && data.file.length > 0 && data.file[0].filename) return data.file[0].filename;\n  if (data.document_id) return `document_${data.document_id}.pdf`;\n  return 'document_unknown.pdf';\n}\n\nfunction preserveBinaryData(item) {\n  // Preserve all binary data properties\n  if (item.binary) {\n    return { ...item.binary };\n  }\n  return null;\n}\n\nfunction detectType(filename, mimetype) {\n  const ext = filename.split('.').pop()?.toLowerCase();\n  // Prefer mimetype if it is very specific\n  if (mimetype) {\n    const mt = mimetype.toLowerCase();\n    if (mt.includes('officedocument.wordprocessingml.document')) return 'docx';\n    if (mt.includes('msword')) {\n      // Some browsers send .docx as msword, so check extension\n      if (ext === 'docx') return 'docx';\n      return 'doc';\n    }\n    if (mt.includes('pdf')) return 'pdf';\n    if (mt.includes('image')) return 'image';\n  }\n  // Fallback to extension\n  if (ext === 'docx') return 'docx';\n  if (ext === 'doc') return 'doc';\n  if (ext === 'pdf') return 'pdf';\n  if (['jpg','jpeg','png'].includes(ext)) return 'image';\n  return 'unknown';\n}\n\nfor (const item of items) {\n  const data = item.json;\n  const documentId = data.document_id;\n  const mimetype = data.mimeType || data.mimetype || (Array.isArray(data.file) && data.file.length > 0 && data.file[0].mimetype) || undefined;\n  const preferredFilename = extractFilename(data);\n  const detectedType = detectType(preferredFilename, mimetype);\n  const qualityScore = data.quality_score || 0;\n  const confidence = data.confidence || 0;\n  let classificationFactors = [];\n  let processingRequirements = [];\n  if (detectedType === 'pdf') {\n    classificationFactors.push('PDF document detected');\n    processingRequirements.push('OCR processing', 'Text extraction');\n  } else if (detectedType === 'docx') {\n    classificationFactors.push('DOCX document detected');\n    processingRequirements.push('Direct text extraction', 'Format parsing');\n  } else if (detectedType === 'doc') {\n    classificationFactors.push('DOC document detected');\n    processingRequirements.push('Convert to DOCX', 'Direct text extraction');\n  } else if (detectedType === 'image') {\n    classificationFactors.push('Image document detected');\n    processingRequirements.push('OCR processing', 'Image enhancement');\n  } else {\n    classificationFactors.push('Unknown document type');\n    processingRequirements.push('Manual review');\n  }\n  if (qualityScore >= 0.8) {\n    classificationFactors.push('High quality document');\n    processingRequirements.push('Standard processing');\n  } else if (qualityScore >= 0.5) {\n    classificationFactors.push('Medium quality document');\n    processingRequirements.push('Enhanced processing', 'Quality improvement');\n  } else {\n    classificationFactors.push('Low quality document');\n    processingRequirements.push('Manual review', 'Quality enhancement');\n  }\n  const filename = preferredFilename.toLowerCase();\n  let subType = 'general';\n  if (filename.includes('cv') || filename.includes('resume')) {\n    classificationFactors.push('Resume/CV document identified');\n    processingRequirements.push('Personal info extraction', 'Skills parsing');\n    subType = 'resume';\n  } else if (filename.includes('application')) {\n    classificationFactors.push('Application form identified');\n    processingRequirements.push('Form field extraction', 'Structured data parsing');\n    subType = 'application_form';\n  } else if (filename.includes('certificate')) {\n    subType = 'certificate';\n  }\n  processedItems.push({\n    json: {\n      document_id: documentId,\n      document_type: detectedType,\n      sub_type: subType,\n      confidence: confidence,\n      classification_factors: classificationFactors,\n      processing_requirements: processingRequirements,\n      original_filename: preferredFilename,\n      quality_score: qualityScore,\n      classification_metadata: {\n        source_filename: preferredFilename,\n        detected_extension: preferredFilename.split('.').pop()?.toLowerCase(),\n        original_type: data.document_type || 'unknown',\n        final_type: detectedType,\n        mimetype: mimetype\n      }\n    }\n  });\n}\n\nreturn processedItems;"
      },
      "id": "8ff17489-3abc-4a80-9cc0-0e0995d4e40c",
      "name": "Classification Engine1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -768,
        -208
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced file type classification with better detection\nconst items = $input.all();\nconst processedItems = [];\n\nfunction detectFormat(documentType, filename, mimetype) {\n  // Priority 1: Use backend classification if reliable\n  if (documentType && documentType !== 'unknown') {\n    return documentType;\n  }\n  \n  // Priority 2: MIME type analysis\n  if (mimetype) {\n    const mimeType = mimetype.toLowerCase();\n    if (mimeType.includes('pdf')) return 'pdf';\n    if (mimeType.includes('msword') || mimeType.includes('word')) return 'doc';\n    if (mimeType.includes('officedocument.wordprocessingml.document')) return 'docx';\n    if (mimeType.includes('image')) {\n      if (mimeType.includes('jpeg') || mimeType.includes('jpg')) return 'jpg';\n      if (mimeType.includes('png')) return 'png';\n      return 'image';\n    }\n  }\n  \n  // Priority 3: Filename extension\n  if (filename) {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    const validExtensions = ['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png'];\n    if (validExtensions.includes(ext)) {\n      return ext === 'jpeg' ? 'jpg' : ext;\n    }\n  }\n  \n  return 'unknown';\n}\n\nfor (const item of items) {\n  const data = item.json;\n  \n  const documentType = data.document_type;\n  const filename = data.original_filename || data.fileName || data.filename;\n  const mimetype = data.mimeType || data.mimetype;\n  \n  const format = detectFormat(documentType, filename, mimetype);\n  \n  // Add additional metadata for processing\n  const result = {\n    json: {\n      ...data, // Preserve all original data\n      format: format,\n      file_extension: filename ? filename.split('.').pop()?.toLowerCase() : null,\n      mime_type: mimetype,\n      classification_complete: true,\n      processing_ready: format !== 'unknown',\n      // Ensure filename is preserved\n      original_filename: filename || `document_${data.document_id || 'unknown'}`,\n      // Add debugging info\n      format_detection: {\n        input_type: documentType,\n        input_filename: filename,\n        input_mimetype: mimetype,\n        final_format: format\n      }\n    }\n  };\n  \n  processedItems.push(result);\n}\n\nreturn processedItems;"
      },
      "id": "d2050b93-c516-41d2-aeed-17c54375600c",
      "name": "Classify File Type1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        -208
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "doc",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "30e3bc04-df43-4991-976f-5d54389e6854"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8b5d390e-d2e6-4180-8bde-b5f9e6c18698",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "docx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3e126769-faf2-4943-859e-abe29e904eb0",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a7951a45-f1ca-4cea-89a9-b44027f36cf1",
                    "leftValue": "={{ $json.data.document_type }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        384,
        -336
      ],
      "id": "9d3544d2-8fda-47aa-baa6-937cc4d33b8e",
      "name": "Switch1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "file"
            }
          }
        }
      },
      "id": "32e6f7fa-a783-4140-a2c8-9ee788022b72",
      "name": "Convert DOCX to PDF (FastAPI)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        832,
        -224
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "original_filename",
              "field2": "original_filename"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        160,
        -304
      ],
      "id": "ccc25793-068b-48cc-90c8-86d9b9136ae5",
      "name": "Merge"
    },
    {
      "parameters": {
        "docType": "Job%20Applicant",
        "properties": {
          "customProperty": [
            {
              "field": "applicant_name",
              "value": "={{ $json.applicant_name }}"
            },
            {
              "field": "email_id",
              "value": "={{ $json.email_id }}"
            },
            {
              "field": "phone_number",
              "value": "={{ $json.phone_number }}"
            },
            {
              "field": "country",
              "value": "={{ $json.country }}"
            },
            {
              "field": "date_of_birth",
              "value": "={{ $json.date_of_birth }}"
            },
            {
              "field": "cnic_number",
              "value": "={{ $json.cnic_number }}"
            },
            {
              "field": "gender",
              "value": "={{ $json.gender }}"
            },
            {
              "field": "skills",
              "value": "={{ $json.skills }}"
            },
            {
              "field": "father_name",
              "value": "={{ $json.father_name }}"
            },
            {
              "field": "mother_name",
              "value": "={{ $json.mother_name }}"
            },
            {
              "field": "street_address",
              "value": "={{ $json.street_address }}"
            },
            {
              "field": "city",
              "value": "={{ $json.city }}"
            },
            {
              "field": "province",
              "value": "={{ $json.province }}"
            },
            {
              "field": "marital_status",
              "value": "={{ $json.marital_status }}"
            },
            {
              "field": "religion",
              "value": "={{ $json.religion }}"
            },
            {
              "field": "sect",
              "value": "={{ $json.sect }}"
            },
            {
              "field": "telephone_number",
              "value": "={{ $json.telephone_number }}"
            },
            {
              "field": "known_languages",
              "value": "={{ $json.known_languages[0] }}"
            },
            {
              "field": "nationality",
              "value": "={{ $json.nationality }}"
            },
            {
              "field": "designation",
              "value": "={{ $json.selected_designation }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        6144,
        -416
      ],
      "id": "7922ffb1-042a-4169-acae-7f6694fa2145",
      "name": "Create a document",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Split experience data into individual Experience Certifications for ERPNext\n// Skip processing if no meaningful experience is provided\nconst items = $input.all();\nconst result = [];\n\nconsole.log(`Split Experience Data received ${items.length} items`);\n\nfor (const item of items) {\n  const jobApplicantData = item.json;\n  \n  // Log all available fields for debugging\n  console.log(`Job Applicant Data Keys: ${Object.keys(jobApplicantData).join(', ')}`);\n  \n  const experienceArray = jobApplicantData.experience || [];\n  \n  // Get the ERPNext document identifiers from the created Job Applicant\n  const documentName = jobApplicantData.name; // ERPNext document name\n  const registrationNumber = jobApplicantData.imp_registration_number; // Custom field\n  const applicantName = jobApplicantData.applicant_name; // Applicant's actual name\n  \n  // Debug: Log the captured identifiers\n  console.log(`Captured Document Name: ${documentName}`);\n  console.log(`Captured Registration Number: ${registrationNumber}`);\n  console.log(`Captured Applicant Name: ${applicantName}`);\n  console.log(`Experience Array Length: ${experienceArray.length}`);\n  \n  // Check if we have valid experience data\n  const hasValidExperience = Array.isArray(experienceArray) && \n    experienceArray.length > 0 && \n    experienceArray.some(exp => \n      exp.company && exp.company.trim() !== '' && exp.company !== 'Not Specified' &&\n      exp.designation && exp.designation.trim() !== '' && exp.designation !== 'Not Specified'\n    );\n  \n  if (hasValidExperience) {\n    console.log(`Processing ${experienceArray.length} experience entries for ${documentName}`);\n    \n    // Create separate items for each valid experience entry\n    experienceArray.forEach((experience, index) => {\n      // Only include experience entries with meaningful data\n      if (experience.company && experience.company.trim() !== '' && experience.company !== 'Not Specified' &&\n          experience.designation && experience.designation.trim() !== '' && experience.designation !== 'Not Specified') {\n        result.push({\n          json: {\n            job_applicant_document_name: documentName, // ERPNext document identifier\n            job_applicant_registration: registrationNumber, // Registration number\n            job_applicant_name: applicantName, // Applicant's name\n            company: experience.company,\n            designation: experience.designation,\n            years_of_experience: experience.years_of_experience || '0',\n            experience_description: experience.experience_description || 'No description provided',\n            from_date: experience.from_date || '2000-01-01',\n            to_date: experience.to_date || '2000-01-01',\n            salary: experience.salary || 0,\n            idx: index + 1,\n            parentfield: 'experience',\n            parenttype: 'Job Applicant',\n            doctype: 'Experience Certifications'\n          }\n        });\n      }\n    });\n  } else {\n    console.log(`No valid experience found for ${documentName}. Experience array: ${JSON.stringify(experienceArray)}`);\n  }\n  \n  // If no valid experience found, return empty result\n  // This will cause the workflow to skip experience processing\n}\n\n// Return results only if we have valid experience data\nif (result.length === 0) {\n  console.log('No valid experience data found - workflow will stop here');\n  return [];\n}\n\nconsole.log(`Returning ${result.length} experience entries`);\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6352,
        -640
      ],
      "id": "157c89a2-4adb-486a-a745-8975215c1bd2",
      "name": "Split Experience Data"
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Collect experience data directly from Split Experience Data and prepare for Job Applicant update\n// Only process if we have valid experience data\nconst items = $input.all();\nconst experienceEntries = [];\nlet jobApplicantDocumentName = '';\nlet jobApplicantRegistration = '';\nlet jobApplicantName = '';\n\n// Function to extract years as integer from strings like \"13 years\", \"5 months\", etc.\nfunction extractYearsAsInteger(yearsString) {\n  if (!yearsString || typeof yearsString !== 'string') {\n    return 0;\n  }\n  \n  // Extract numbers from the string\n  const numbers = yearsString.match(/\\d+/g);\n  if (!numbers || numbers.length === 0) {\n    return 0;\n  }\n  \n  const value = parseInt(numbers[0]);\n  \n  // If the string contains \"month\" or \"months\", convert to fraction of year\n  if (yearsString.toLowerCase().includes('month')) {\n    return Math.round(value / 12 * 10) / 10; // Round to 1 decimal place\n  }\n  \n  // Otherwise, assume it's years\n  return value;\n}\n\nconsole.log(`Collect Experience Data received ${items.length} items`);\n\n// If no items received, it means no valid experience was found\nif (items.length === 0) {\n  console.log('No experience items received - skipping experience processing');\n  // Skip experience processing entirely\n  return [];\n}\n\nfor (const item of items) {\n  // Get the job applicant document name (for ERPNext updates)\n  if (!jobApplicantDocumentName && item.json.job_applicant_document_name) {\n    jobApplicantDocumentName = item.json.job_applicant_document_name;\n  }\n  \n  // Get the job applicant registration number from the first item\n  if (!jobApplicantRegistration && item.json.job_applicant_registration) {\n    jobApplicantRegistration = item.json.job_applicant_registration;\n  }\n  \n  // Get the job applicant name from the first item\n  if (!jobApplicantName && item.json.job_applicant_name) {\n    jobApplicantName = item.json.job_applicant_name;\n  }\n  \n  // Collect experience data for child table (no need to create separate documents)\n  experienceEntries.push({\n    designation: item.json.designation,           // Experience Title in ERPNext \n    years_of_experience: extractYearsAsInteger(item.json.years_of_experience),\n    company:item.json.company                // Institution in ERPNext  \n                // Parent doctype\n  });\n}\n\n// Only return data if we have valid experience entries\nif (experienceEntries.length === 0) {\n  console.log('No valid experience entries collected');\n  return [];\n}\n\nconsole.log(`Collected identifiers:`);\nconsole.log(`- Document Name: ${jobApplicantDocumentName}`);\nconsole.log(`- Registration: ${jobApplicantRegistration}`);\nconsole.log(`- Applicant Name: ${jobApplicantName}`);\nconsole.log(`- Experience Entries: ${experienceEntries.length}`);\n\nreturn [{\n  json: {\n    job_applicant_document_name: jobApplicantDocumentName,\n    job_applicant_registration: jobApplicantRegistration,\n    job_applicant_name: jobApplicantName,\n    experience_certifications: experienceEntries,\n    total_experience_entries: experienceEntries.length,\n    processing_note: `Processing ${experienceEntries.length} valid experience entries for document: ${jobApplicantDocumentName} (Registration: ${jobApplicantRegistration})`\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6592,
        -640
      ],
      "id": "b2ee947e-c537-4b4e-b805-20c20a01bebe",
      "name": "Collect Experience Data"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        6752,
        -400
      ],
      "id": "fd82153d-66a6-41e2-9889-f67d792f6f32",
      "name": "Merge Job Applicant and Experience"
    },
    {
      "parameters": {
        "jsCode": "// Generated by Copilot\n// Process merged data from Create Job Applicant and Collect Experience Data\n// Combine both outputs into a single JSON structure for ERPNext update\n\nconst items = $input.all();\nlet jobApplicantData = {};\nlet experienceData = {};\n\nconsole.log(`Processing ${items.length} items from merge node`);\n\n// Process all items from the merge node\nfor (const item of items) {\n  const data = item.json;\n  \n  console.log(`Processing item with keys: ${Object.keys(data).join(', ')}`);\n  \n  // Identify Job Applicant data (from Create a document node)\n  // Job Applicant data typically has ERPNext fields like name, creation, modified, etc.\n  if (data.name && (data.creation || data.modified) && !data.experience_certifications) {\n    jobApplicantData = data;\n    console.log(`Found Job Applicant data with name: ${data.name}`);\n    console.log(`Job Applicant fields: ${Object.keys(data).slice(0, 10).join(', ')}...`);\n  }\n  \n  // Identify Experience data (from Collect Experience Data node)\n  if (data.experience_certifications && Array.isArray(data.experience_certifications)) {\n    experienceData = data;\n    console.log(`Found Experience data with ${data.experience_certifications.length} entries`);\n  }\n}\n\n// Validate we have both data sources\nif (!jobApplicantData.name) {\n  console.error('ERROR: No Job Applicant data found in merged items!');\n  console.log('Available items:', items.map(item => Object.keys(item.json)));\n  return [{ json: { error: 'Missing Job Applicant data', items: items.map(item => Object.keys(item.json)) } }];\n}\n\nif (!experienceData.experience_certifications) {\n  console.log('WARNING: No experience data found, proceeding with Job Applicant data only');\n  experienceData = { experience_certifications: [], total_experience_entries: 0 };\n}\n\n// Combine the data - include ALL Job Applicant fields plus experience\nconst combinedData = {\n  // Spread all Job Applicant data first\n  ...jobApplicantData,\n  \n  // Add/override with experience data (MUST come after spread to override empty arrays)\n  experience: experienceData.experience_certifications || [],\n  experience_certifications: experienceData.experience_certifications || [],\n  total_experience_entries: experienceData.total_experience_entries || 0,\n  \n  // Processing metadata\n  processing_note: `Updating Job Applicant ${jobApplicantData.name} with ${experienceData.experience_certifications?.length || 0} experience entries`,\n  job_applicant_created: jobApplicantData.creation,\n  experience_processing_note: experienceData.processing_note || 'No experience processing note'\n};\n\n// IMPORTANT: Ensure experience field is not empty even if Job Applicant had empty experience\nif (experienceData.experience_certifications && experienceData.experience_certifications.length > 0) {\n  combinedData.experience = experienceData.experience_certifications;\n  console.log(`FORCED experience field with ${experienceData.experience_certifications.length} entries`);\n}\n\nconsole.log(`Merged data ready for ERPNext update:`);\nconsole.log(`- Document Name: ${combinedData.name}`);\nconsole.log(`- Registration Number: ${combinedData.imp_registration_number}`);\nconsole.log(`- Experience Entries: ${combinedData.experience_certifications.length}`);\nconsole.log(`- Experience Field Length: ${combinedData.experience.length}`);\nconsole.log(`- Experience Field Content: ${JSON.stringify(combinedData.experience.slice(0, 2))}`);\nconsole.log(`- All fields: ${Object.keys(combinedData).slice(0, 15).join(', ')}...`);\n\nreturn [{ json: combinedData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6976,
        -688
      ],
      "id": "bf22aa06-baa2-4bf0-828e-bd73a54c0086",
      "name": "Process Merged Data"
    },
    {
      "parameters": {
        "operation": "update",
        "docType": "Job%20Applicant",
        "documentName": "={{ $json.name }}",
        "properties": {
          "customProperty": [
            {
              "field": "experience",
              "value": "={{ $json.experience_certifications }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        7248,
        -544
      ],
      "id": "827bae8e-acc2-4bd7-84ff-4c7cfee07953",
      "name": "Update Job Applicant Experience",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract just the fieldnames from the doctype response\nconst response = $input.all()[0].json;\n\n// Handle different response structures\nlet fields = [];\n\n// Try to get fields from different possible response structures\nif (response.message?.docs?.[0]?.fields) {\n  fields = response.message.docs[0].fields;\n} else if (response.docs?.[0]?.fields) {\n  fields = response.docs[0].fields;\n} else if (Array.isArray(response.fields)) {\n  fields = response.fields;\n}\n\nif (fields.length > 0) {\n  const fieldnames = fields.map(field => field.fieldname).filter(name => name);\n  return [{\n    json: {\n      fieldnames: fieldnames,\n      total_fields: fieldnames.length\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    error: 'Could not retrieve field information',\n    response: response,\n    tip: 'Please check if you are properly authenticated and have permissions to access the Job Applicant doctype'\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -544,
        -592
      ],
      "name": "Get Field Names",
      "id": "411a2e07-4b57-41bf-b5ac-524018207c66"
    },
    {
      "parameters": {
        "url": "https://app.alphaworkforce.org/api/method/frappe.desk.form.load.getdoctype?doctype=Job%20Applicant",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "erpNextApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -768,
        -592
      ],
      "id": "2cce4d37-b130-4920-bc9c-2090bfd3401f",
      "name": "HTTP Request",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst outputItems = [];\n\nfunction fixDateFormat(dateStr) {\n  if (typeof dateStr !== 'string') return dateStr;\n  const match = dateStr.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/);\n  if (match) {\n    return `${match[3]}-${match[2]}-${match[1]}`;\n  }\n  return dateStr;\n}\n\n\nfor (const item of items) {\n  let rawText = item.json.text;\n  rawText = rawText.replace(/\\\\n/g, '');\n  let parsed;\n  try {\n    parsed = JSON.parse(rawText);\n  } catch (e) {\n    try {\n      parsed = JSON.parse(rawText.trim());\n    } catch (err) {\n      parsed = { output: {} };\n    }\n  }\n  if (parsed && parsed.output) {\n    if (Array.isArray(parsed.output.skills)) {\n      parsed.output.skills = parsed.output.skills.join(', ');\n    }\n\n    // Fix date fields\n    parsed.output.date_of_birth = fixDateFormat(parsed.output.date_of_birth);\n    parsed.output.passport_issue_date = fixDateFormat(parsed.output.passport_issue_date);\n    parsed.output.passport_expiry_date = fixDateFormat(parsed.output.passport_expiry_date);\n    parsed.output.driving_license_issue_date = fixDateFormat(parsed.output.driving_license_issue_date);\n    parsed.output.driving_license_expiry_date = fixDateFormat(parsed.output.driving_license_expiry_date);\n\n    outputItems.push({ json: parsed.output });\n  } else {\n    outputItems.push({ json: {} });\n  }\n}\n\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2752,
        -224
      ],
      "id": "592137a6-a330-42e8-ba09-6711a636b373",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "docType": "Designation",
        "returnAll": true,
        "options": {
          "fields": [
            "designation_name"
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        -768,
        -816
      ],
      "id": "8b2f9f26-893d-463a-a202-23ad64d5edb5",
      "name": "Get many documents",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2976,
        -544
      ],
      "id": "2cb1b551-1c3f-4fc4-90ec-afaaa36fae55",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "// Combine applicant data and designation names into a single object and assign all data to a variable\n\nconst input = $input.all().map(item => item.json);\n\n// Find the applicant object (has more than just designation_name)\nconst applicant = input.find(obj => !obj.designation_name);\n\n// Collect all designation names into an array\nconst designations = input\n  .filter(obj => obj.designation_name)\n  .map(obj => obj.designation_name);\n\n// Add the designations array to the applicant object\nlet result;\nif (applicant) {\n  applicant.designation_list = designations;\n  result = applicant;\n} else {\n  result = { designation_list: designations };\n}\n\n// Assign all data to a variable 'text' for LLM\nconst text = JSON.stringify(result);\n\nreturn [{ json: { ...result, text } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3200,
        -544
      ],
      "id": "11d54085-49ec-4d90-997d-03cc5113144f",
      "name": "Combine Designations and Candidate Data"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are given a list of designations: {{ $json.designation_list }}.\nMatch the candidate's experience, education, skills, and technical qualifications ({{ $json.skills }}, {{ $json.technical_qualification }}, {{ $json.experience }}) to each designation in the list.\n\nFor each designation, assign a score from 0 to 100 based on the candidate's fit, focusing on experience and education.\n\nSTRICT OUTPUT REQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Each key must be a designation from the provided list, and each value must be a score (number or string).\n- Do NOT include any notes, explanations, markdown, or extra text.\n- Do NOT create or invent new designations.\n- Output must start with '{' and end with '}'.\n- Do NOT include any text before or after the JSON.\n\nExample:\n{\n  \"Accountant\": \"80\",\n  \"Engineer\": \"60\",\n  \"Manager\": \"40\"\n}",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        3424,
        -544
      ],
      "id": "b219221b-a700-4371-b510-ba5b682f375e",
      "name": "Designation Scorer"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"designation\":\"score\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        3504,
        -320
      ],
      "id": "a8aa9a6b-c2ce-49d4-ac81-7e75cfce5c94",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "jsCode": "// Check designation scores and route accordingly\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const scores = item.json.output;\n  let bestDesignation = null;\n  let bestScore = 0;\n  \n  // Find the highest scoring designation\n  for (const [designation, score] of Object.entries(scores)) {\n    const numScore = parseInt(score);\n    if (numScore > bestScore) {\n      bestScore = numScore;\n      bestDesignation = designation;\n    }\n  }\n  \n  // If best score is above 80, use it\n  if (bestScore > 80) {\n    results.push({\n      json: {\n        ...item.json,\n        selected_designation: bestDesignation,\n        designation_score: bestScore,\n        designation_source: 'ai_match',\n        route: 'direct_create'\n      }\n    });\n  } else {\n    // If no score above 80, route to AI assignment\n    results.push({\n      json: {\n        ...item.json,\n        best_designation: bestDesignation,\n        best_score: bestScore,\n        route: 'ai_assign'\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3776,
        -544
      ],
      "id": "bcce1a16-0fc6-411c-a775-8bf1bbe5a2ff",
      "name": "Designation Logic"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route }}",
                    "rightValue": "direct_create",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-direct"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route }}",
                    "rightValue": "ai_assign",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-ai"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        4000,
        -544
      ],
      "id": "e5125596-e176-45b7-ad68-0b4b794478bf",
      "name": "Route Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Based on the candidate's profile and the fact that no existing designation scored above 80%, please assign the most appropriate designation from this list: {{ $json.designation_list }}.\n\nCandidate Profile:\n- Skills: {{ $json.skills }}\n- Technical Qualification: {{ $json.technical_qualification }}\n- Experience: {{ $json.experience }}\n- Best matching designation so far: {{ $json.best_designation }} ({{ $json.best_score }}%)\n\nSTRICT OUTPUT REQUIREMENTS:\n- Output ONLY the designation name as a single string.\n- Choose ONLY from the provided designation list.\n- Do NOT include explanations, quotes, or extra text.\n- Return just the designation name.\n\nExample output: Software Developer",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        4224,
        -672
      ],
      "id": "6c519678-ba54-4c85-86c1-6b817ccdbc92",
      "name": "AI Designation Assigner"
    },
    {
      "parameters": {
        "jsCode": "// Process AI designation assignment result\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const aiDesignation = item.json.text ? item.json.text.trim() : item.json.output;\n  \n  results.push({\n    json: {\n      ...item.json,\n      selected_designation: aiDesignation,\n      designation_score: 85, // Assign high score for AI-selected designation\n      designation_source: 'ai_assigned'\n    }\n  });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4576,
        -672
      ],
      "id": "353cf6e4-2bf3-49a4-857b-3907057282cd",
      "name": "Process AI Designation"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4800,
        -416
      ],
      "id": "b1525293-87e5-476c-a30a-89bf37797d7e",
      "name": "Merge3"
    },
    {
      "parameters": {
        "jsCode": "// Merge the two input items: one with personal info, one with designation info\nconst items = $input.all();\nif (items.length < 2) {\n  // Fallback: just return the first item if only one present\n  return items;\n}\n\n// Find the personal info object (has applicant_name) and the designation object (has selected_designation)\nconst personalInfo = items.find(item => item.json.applicant_name);\nconst designationInfo = items.find(item => item.json.selected_designation);\n\n// Merge all fields, with designation fields overwriting if needed\nconst merged = {\n  ...personalInfo.json,\n  ...designationInfo.json\n};\n\n// Ensure designation_list is properly preserved from either source\nif (!merged.designation_list || merged.designation_list.length === 0) {\n  // Try to get designation_list from personal info first, then designation info\n  merged.designation_list = personalInfo?.json?.designation_list || designationInfo?.json?.designation_list || [];\n}\n\n// Debug: Log what we have for designation matching\nconsole.log('DEBUG - Designation matching:', {\n  selected_designation: merged.selected_designation,\n  designation_list: merged.designation_list,\n  designation_list_length: merged.designation_list ? merged.designation_list.length : 0,\n  ai_route_decision: merged.route\n});\n\n// Check if AI has already made a routing decision\nconst aiRouteDecision = merged.route;\nconst hasAIRouting = aiRouteDecision === 'direct_create' || aiRouteDecision === 'create_designation_first';\n\n// Check if the selected designation exists in the designation list\n// Use case-insensitive comparison and trim whitespace for better matching\nconst designationExists = merged.designation_list && merged.designation_list.length > 0 && \n  merged.designation_list.some(designation => \n    designation.toLowerCase().trim() === merged.selected_designation.toLowerCase().trim()\n  );\n\n// Smart routing logic: Respect AI decision when available, fallback to list checking\nlet finalRouteAction;\nlet routingReason;\n\nif (hasAIRouting) {\n  // Trust AI's routing decision\n  if (aiRouteDecision === 'direct_create') {\n    finalRouteAction = 'create_applicant';\n    routingReason = 'ai_determined_designation_exists';\n  } else {\n    finalRouteAction = 'create_designation_first';\n    routingReason = 'ai_determined_designation_missing';\n  }\n} else {\n  // Fallback to traditional list checking\n  finalRouteAction = designationExists ? 'create_applicant' : 'create_designation_first';\n  routingReason = designationExists ? 'list_check_found_match' : 'list_check_no_match';\n}\n\n// Add routing information\nmerged.designation_exists = hasAIRouting ? (aiRouteDecision === 'direct_create') : designationExists;\nmerged.route_action = finalRouteAction;\nmerged.routing_method = hasAIRouting ? 'ai_decision' : 'list_verification';\nmerged.routing_reason = routingReason;\n\n// Add debugging information for troubleshooting\nmerged.debug_info = {\n  selected_designation: merged.selected_designation,\n  selected_normalized: merged.selected_designation ? merged.selected_designation.toLowerCase().trim() : null,\n  designation_list_count: merged.designation_list ? merged.designation_list.length : 0,\n  designation_exists: merged.designation_exists,\n  designation_list_sample: merged.designation_list ? merged.designation_list.slice(0, 5) : [],\n  matching_designations: merged.designation_list ? \n    merged.designation_list.filter(d => \n      d.toLowerCase().trim() === merged.selected_designation.toLowerCase().trim()\n    ) : [],\n  // AI routing information\n  ai_route_decision: aiRouteDecision,\n  has_ai_routing: hasAIRouting,\n  final_route_action: finalRouteAction,\n  routing_method: merged.routing_method,\n  routing_reason: routingReason,\n  // Additional debugging\n  merge_sources: {\n    personal_info_has_designation_list: !!(personalInfo?.json?.designation_list),\n    designation_info_has_designation_list: !!(designationInfo?.json?.designation_list),\n    personal_info_list_count: personalInfo?.json?.designation_list ? personalInfo.json.designation_list.length : 0,\n    designation_info_list_count: designationInfo?.json?.designation_list ? designationInfo.json.designation_list.length : 0\n  }\n};\n\nreturn [{ json: merged }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5024,
        -416
      ],
      "id": "67f8a1fc-7f39-4d6b-bcee-1b899f3f40f3",
      "name": "Code3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze this resume/CV document and extract job applicant information into a structured JSON format.\n\nYou are analyzing a visual document (image or PDF page). Carefully examine all text, formatting, and layout elements in the image.\nAnalyze the provided document content image to extract information.\n\n\nYou must return a valid JSON object with a single \"output\" key, containing ALL the following fields:\n{{ $json.fieldnames }}\n\nSTRICT FORMAT REQUIREMENTS:\n- The response MUST be a JSON object with a single \"output\" key\n- The \"output\" object MUST contain ALL {{ $json.total_fields }} fields listed above, no more, no less\n- Known languages should be speaking languages (English, Urdu, Arabic), not programming languages\n- Field-specific formats:\n   - Name : Should not be in all CAPS\n   - Dates: YYYY-MM-DD format only (convert any date format you find)\n   - Phone/mobile: Does not include dashes and space \n   - Email: Must be valid email format\n   - Languages: Must be arrays\n   - IDs (passport, CNIC, etc.): without dashes or spaces\n   - Marital Status: Married/Unmarried ( if it is Single then keep it as Unmarried)\n- Boolean fields (has_passport, has_license): true or false\n\nDefault values for missing information:\n- Names: \"Unknown Applicant\"\n- Email: \"no_email@placeholder.com\"\n- Phone/mobile: 0\n- Dates: \"2000-01-01\"\n- Regular text fields: \"Not Specified\"\n- Arrays: []\n- Known languages: [\"Urdu\"]\n- Skills: \"Not Specified\"\n- Experience: \"Not Specified\"\n- Boolean fields: false\n- Country : Pakistan\n\nEXPERIENCE EXTRACTION - STRUCTURED APPROACH:\n\n**Experience Sources (Check ALL of these):**\n- Dedicated \"Experience\" or \"Work Experience\" sections\n- \"Employment History\" or \"Professional Experience\" areas\n- \"Career Summary\" or \"Work History\" sections\n- Individual job entries with dates and companies\n- Project work mentioned with duration\n- Internships, apprenticeships, and training programs\n- Freelance or contract work\n- Part-time and full-time positions\n\n**Experience Data to Extract for Each Position:**\n1. **Job Title/Position**: Extract the exact job title or role\n2. **Company/Organization**: Name of the employer or institution\n3. **Duration**: Start and end dates, or total years/months\n4. **Key Responsibilities**: Main duties and achievements\n5. **Skills Used**: Technical and soft skills demonstrated\n\n**Experience Formatting Rules:**\n- Extract EACH job/position as a separate experience entry\n- Include duration even if approximate (e.g., \"2 years\", \"6 months\")\n- Capture company names accurately\n- Include both job title and company for each entry\n- Separate multiple positions with clear delimiters\n- Format: \"[Duration] as [Job Title] at [Company] - [Key Responsibilities]\"\n\n**Example Experience Format:**\n\"3 years as Automation Technician at TECNO AUTO GLASS - Installation and troubleshooting of electrical systems; 1 year as Electrical Technician at MULTICON ENGINEERS LTD - PLC programming and HMI configuration; 1 year as Maintenance Engineer at ACCRESCENT ENGINEERING PVT LTD - VFD installation and motor control systems\"\n\nEXTRACTION GUIDELINES:\n- Pay attention to layout and visual organization\n- Scan for any information in margins or headers\n- Look for structured sections and keywords\n- Extract information from any format or layout\n- Extract personal information (name, contact details, address)\n- Find education details from education/qualification sections\n- Identify work experience from employment history\n- Search for passport/CNIC numbers in personal details\n- Pay attention to dates in various formats throughout the document\n- Extract phone numbers and email addresses from contact information\n- Notice any certifications or licenses mentioned\n- Look for languages mentioned in skills or personal sections\n- Be thorough in extracting all available information\n- If you see partial information, extract what you can\n\nSKILLS EXTRACTION - COMPREHENSIVE APPROACH:\n\n**Primary Skills Sources (Check ALL of these):**\n- Dedicated \"Skills\" section\n- \"Technical Skills\" or \"Core Competencies\" sections\n- \"Key Skills\" or \"Professional Skills\" areas\n- \"Software\" or \"Tools\" sections\n- \"Technologies\" or \"Platforms\" sections\n- Skills mentioned within job descriptions/experience\n- Skills listed in project descriptions\n- Certifications that imply skills (e.g., \"Microsoft Office Certified\" = MS Office skills)\n- Education-related skills (programming languages from CS degree, etc.)\n\n**Skills Categories to Extract:**\n\n1. **Technical/Hard Skills:**\n   - Programming languages (Python, Java, C++, JavaScript, etc.)\n   - Software applications (MS Office, AutoCAD, Photoshop, SAP, etc.)\n   - Operating systems (Windows, Linux, macOS, etc.)\n   - Databases (MySQL, Oracle, PostgreSQL, etc.)\n   - Frameworks and libraries (React, Angular, Django, etc.)\n   - Tools and platforms (Git, Docker, AWS, Azure, etc.)\n   - Industry-specific tools (PLC programming, MATLAB, SolidWorks, etc.)\n\n2. **Professional/Soft Skills:**\n   - Communication, Leadership, Project Management\n   - Problem-solving, Analytical thinking\n   - Team collaboration, Customer service\n   - Time management, Organization\n\n3. **Domain-Specific Skills:**\n   - Engineering skills (Electrical design, Circuit analysis, etc.)\n   - Finance skills (Financial analysis, Budgeting, etc.)\n   - Marketing skills (Digital marketing, SEO, etc.)\n   - Medical skills (Patient care, Medical procedures, etc.)\n\n4. **Language Skills:**\n   - Spoken languages (separate from programming languages)\n   - Language proficiency levels if mentioned\n\n**Skills Extraction Rules:**\n- Extract ALL skills mentioned, even if briefly\n- Include skills from experience descriptions (e.g., \"Managed team of 10\" = Leadership, Team Management)\n- Look for skills in bullet points, paragraphs, and lists\n- Extract skills from project descriptions\n- Include skills implied by job titles or responsibilities\n- Separate technical skills from soft skills when possible\n- Include skill variations (e.g., \"MS Word\" and \"Microsoft Word\" as \"Microsoft Word\")\n- Don't miss skills mentioned in context (e.g., \"Experienced in Python programming\")\n\n**Skill Formatting:**\n- Combine into a comprehensive skills string\n- Separate multiple skills with commas\n- Use standard names (e.g., \"Microsoft Excel\" not \"Excel\", \"Python\" not \"python\")\n- Include skill levels if mentioned (e.g., \"Advanced Excel\", \"Intermediate Python\")\n\nIMPORTANT: Your response must be valid JSON that can be parsed. Do not include any explanations, comments, or markdown formatting. Return only the raw JSON object. Your response must start with '{' and end with '}'.",
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "messageType": "imageBinary",
              "binaryImageDataKey": "file"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        2400,
        -224
      ],
      "id": "3bbe99d7-8ae4-40ed-bb55-04abac228d04",
      "name": "Resume Parser"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route_action }}",
                    "rightValue": "create_applicant",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-direct-applicant"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.route_action }}",
                    "rightValue": "create_designation_first",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-create-designation"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        5248,
        -416
      ],
      "id": "718378e6-9786-4b66-9fbb-9cf007a4fef7",
      "name": "Designation Check Switch"
    },
    {
      "parameters": {
        "jsCode": "// After attempting to create designation, prepare data for job applicant creation\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  // Check if the designation creation was successful or failed\n  const hasError = item.json.error || item.json.errorMessage;\n  const isSuccess = !hasError && item.json.name; // ERPNext returns 'name' field on successful creation\n  \n  // Handle both success and error cases (e.g., duplicate designation)\n  let designationStatus = 'unknown';\n  let designationMessage = '';\n  \n  if (isSuccess) {\n    designationStatus = 'created';\n    designationMessage = `Designation '${item.json.designation_name || item.json.selected_designation}' created successfully`;\n  } else if (hasError) {\n    // Check if it's a duplicate error\n    const errorMsg = item.json.errorMessage || item.json.error || '';\n    if (errorMsg.toLowerCase().includes('duplicate') || \n        errorMsg.toLowerCase().includes('already exists') ||\n        errorMsg.toLowerCase().includes('unique')) {\n      designationStatus = 'already_exists';\n      designationMessage = `Designation '${item.json.selected_designation}' already exists in system`;\n    } else {\n      designationStatus = 'creation_failed';\n      designationMessage = `Failed to create designation: ${errorMsg}`;\n    }\n  }\n  \n  result.push({\n    json: {\n      ...item.json,\n      designation_creation_status: designationStatus,\n      designation_creation_message: designationMessage,\n      designation_available: isSuccess || designationStatus === 'already_exists',\n      ready_for_applicant_creation: true,\n      // Clear any error fields since we've handled them\n      error: undefined,\n      errorMessage: undefined\n    }\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -544,
        144
      ],
      "id": "57d6d3d5-2c4d-4f15-952b-dc84e07e6738",
      "name": "Post Designation Creation"
    },
    {
      "parameters": {
        "jsCode": "// Verify designation creation and prepare final data\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  // Add final verification and logging\n  const finalData = {\n    ...item.json,\n    workflow_step: 'designation_verified',\n    final_verification: {\n      has_selected_designation: !!item.json.selected_designation,\n      designation_source: item.json.designation_source,\n      creation_status: item.json.designation_creation_status,\n      ready_for_applicant: item.json.ready_for_applicant_creation\n    }\n  };\n  \n  result.push({ json: finalData });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        144
      ],
      "id": "ae11fece-824b-46d0-9ed8-c9c14aa7bec8",
      "name": "Designation Verification"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        5696,
        -416
      ],
      "id": "f5d460d3-ca86-464f-ab91-16708e5c33bd",
      "name": "Final Merge"
    },
    {
      "parameters": {
        "jsCode": "// Process experience data into ERPNext child table format\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  const data = item.json;\n  const experienceText = data.experience || \"Not Specified\";\n  \n  // Initialize experience child table array\n  let experienceChildTable = [];\n  \n  // Check if experience is already an array (from our previous processing)\n  if (Array.isArray(data.experience) && data.experience.length > 0) {\n    // Experience is already processed as array, use it directly\n    experienceChildTable = data.experience.map((exp, index) => ({\n      \"doctype\": \"Experience Certifications\",\n      \"company\": exp.company || \"Not Specified\",\n      \"designation\": exp.designation || \"Not Specified\", \n      \"years_of_experience\": exp.years_of_experience || 0,\n      \"experience_description\": exp.experience_description || \"No description\",\n      \"from_date\": exp.from_date || \"2000-01-01\",\n      \"to_date\": exp.to_date || \"2000-01-01\",\n      \"salary\": exp.salary || 0,\n      \"idx\": index + 1,\n      \"parentfield\": \"experience\",\n      \"parenttype\": \"Job Applicant\"\n    }));\n    \n    console.log(`Experience already processed as array with ${experienceChildTable.length} entries`);\n  } else if (typeof experienceText === 'string' && experienceText !== \"Not Specified\" && experienceText.trim() !== \"\") {\n    // Parse experience text into structured format\n    try {\n      // Split by common delimiters and clean up\n      const experienceEntries = experienceText\n        .split(/[;,]|\\band\\b|\\bthen\\b/i)\n        .map(entry => entry.trim())\n        .filter(entry => entry.length > 10); // Filter out very short entries\n      \n      experienceEntries.forEach((entry, index) => {\n        // Extract years/duration pattern\n        const yearPattern = /(\\d+)\\s*(year[s]?|month[s]?|yr[s]?)/i;\n        const yearMatch = entry.match(yearPattern);\n        \n        // Extract company name pattern (variations: \"at Company\", \"in Company\", \"with Company\")\n        const companyPattern = /(?:at|in|with|for)\\s+([A-Z][A-Za-z\\s&\\.,\\-]+?)(?:\\s*[-–—]|$|\\s+as\\s|\\s+doing\\s)/i;\n        const companyMatch = entry.match(companyPattern);\n        \n        // Extract job title pattern (variations: \"as Title\", \"working as Title\")\n        const titlePattern = /(?:as|working as)\\s+([A-Za-z\\s&\\.,\\-]+?)(?:\\s*at|\\s*in|\\s*with|\\s*for|\\s*[-–—]|$)/i;\n        const titleMatch = entry.match(titlePattern);\n        \n        // Alternative patterns for different formats\n        let duration = \"Not Specified\";\n        let company = \"Not Specified\";\n        let title = \"Not Specified\";\n        \n        // Extract duration\n        if (yearMatch) {\n          duration = `${yearMatch[1]} ${yearMatch[2].toLowerCase()}`;\n        }\n        \n        // Extract company\n        if (companyMatch) {\n          company = companyMatch[1].trim().replace(/[,;]$/, ''); // Remove trailing punctuation\n        }\n        \n        // Extract job title\n        if (titleMatch) {\n          title = titleMatch[1].trim().replace(/[,;]$/, ''); // Remove trailing punctuation\n        } else {\n          // Try to extract title from the beginning of the entry\n          const words = entry.split(/\\s+/);\n          const commonTitles = ['technician', 'engineer', 'manager', 'developer', 'analyst', 'assistant', 'officer', 'supervisor', 'coordinator', 'specialist'];\n          for (let i = 0; i < Math.min(5, words.length); i++) {\n            if (commonTitles.some(titleWord => words[i].toLowerCase().includes(titleWord))) {\n              title = words.slice(0, i + 1).join(' ');\n              break;\n            }\n          }\n        }\n        \n        // If we couldn't extract company or title, use fallback approach\n        if (company === \"Not Specified\" || title === \"Not Specified\") {\n          // Look for ALL CAPS words (often company names)\n          const allCapsPattern = /\\b[A-Z]{2,}(?:\\s+[A-Z]{2,})*\\b/g;\n          const allCapsMatches = entry.match(allCapsPattern);\n          \n          if (allCapsMatches && company === \"Not Specified\") {\n            company = allCapsMatches[0];\n          }\n          \n          // If still no title, use a generic extraction\n          if (title === \"Not Specified\") {\n            const firstWords = entry.split(/\\s+/).slice(0, 3).join(' ');\n            if (firstWords.length > 5) {\n              title = firstWords;\n            }\n          }\n        }\n        \n        // Create experience entry in ERPNext child table format\n        const experienceEntry = {\n          \"doctype\": \"Experience Certifications\",  // Child table doctype\n          \"company\": company,\n          \"designation\": title,\n          \"years_of_experience\": duration,\n          \"experience_description\": entry.slice(0, 200), // Limit description length\n          \"idx\": index + 1,  // Row index for child table\n          \"parentfield\": \"experience\",  // Parent field name\n          \"parenttype\": \"Job Applicant\"  // Parent doctype\n        };\n        \n        experienceChildTable.push(experienceEntry);\n      });\n      \n      // If no structured entries were created, create a single entry with all text\n      if (experienceChildTable.length === 0) {\n        experienceChildTable.push({\n          \"doctype\": \"Experience Certifications\",\n          \"company\": \"Various Companies\",\n          \"designation\": data.job_title || \"Not Specified\",\n          \"years_of_experience\": \"Not Specified\",\n          \"experience_description\": experienceText.slice(0, 200),\n          \"idx\": 1,\n          \"parentfield\": \"experience\",\n          \"parenttype\": \"Job Applicant\"\n        });\n      }\n    } catch (error) {\n      console.log('Error parsing experience:', error);\n      // Fallback to simple entry\n      experienceChildTable.push({\n        \"doctype\": \"Experience Certifications\",\n        \"company\": \"Not Specified\",\n        \"designation\": data.job_title || \"Not Specified\",\n        \"years_of_experience\": \"Not Specified\",\n        \"experience_description\": experienceText.slice(0, 200),\n        \"idx\": 1,\n        \"parentfield\": \"experience\",\n        \"parenttype\": \"Job Applicant\"\n      });\n    }\n  } else {\n    // No experience data or empty experience\n    console.log('No experience data found or data is empty');\n    experienceChildTable = [];\n  }\n  \n  // Add the structured experience data to the result\n  result.push({\n    json: {\n      ...data,\n      experience: experienceChildTable,  // ERPNext expects 'experience' field name\n      experience_count: experienceChildTable.length,\n      experience_processing_debug: {\n        original_experience: experienceText,\n        parsed_entries: experienceChildTable.length,\n        processing_method: \"child_table_format\"\n      }\n    }\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5920,
        -416
      ],
      "id": "c27fa548-0401-4530-b430-27e741ccfc89",
      "name": "Process Experience Data"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2480,
        32
      ],
      "id": "8d44da1c-fb61-43c2-ac0c-2472bd6342c1",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "553djEfLQRobcIUg",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        4304,
        -448
      ],
      "id": "9b9ca839-836f-4471-87f9-e0bb4be5f9a1",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "553djEfLQRobcIUg",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "docType": "Designation",
        "properties": {
          "customProperty": [
            {
              "field": "designation_name",
              "value": "={{ $json.selected_designation }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.erpNext",
      "typeVersion": 1,
      "position": [
        5472,
        -352
      ],
      "id": "daa05c6b-d2a6-4299-84ac-244cd54a7bf8",
      "name": "Create a document1",
      "credentials": {
        "erpNextApi": {
          "id": "PCyfMt7tI6h55Qt2",
          "name": "ERPNext account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Pre-check before creating designation - final safety check\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const data = item.json;\n  \n  // Final safety check before creating designation\n  if (data.designation_exists || (data.debug_info && data.debug_info.designation_exists)) {\n    // Designation already exists, skip creation\n    results.push({\n      json: {\n        ...data,\n        designation_creation_status: 'already_exists',\n        designation_creation_message: `Designation '${data.selected_designation}' already exists in system`,\n        designation_available: true,\n        ready_for_applicant_creation: true,\n        skip_creation: true\n      }\n    });\n  } else {\n    // Proceed with creation\n    results.push({\n      json: {\n        ...data,\n        proceed_with_creation: true\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -992,
        144
      ],
      "id": "47d58467-8f93-40ef-a0d4-6dd4ec816585",
      "name": "Pre-Designation Check"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.proceed_with_creation }}",
                    "rightValue": true,
                    "operator": {
                      "type": "boolean",
                      "operation": "true"
                    },
                    "id": "67e3762c-295b-42ff-9ab6-bd379e2f0ca5"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6193a839-7544-428a-848a-9589963f847e",
                    "leftValue": "={{ $json.proceed_with_creation }}",
                    "rightValue": "false",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -768,
        144
      ],
      "id": "4508256f-149b-4bcc-abca-20f0b94169f4",
      "name": "Skip Creation Switch"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1056,
        -368
      ],
      "id": "e3418fa6-543b-45a6-9f8f-1d0d7c5ec494",
      "name": "Merge2"
    },
    {
      "parameters": {
        "jsCode": "// Combine file data and fieldnames, ensure binary data is preserved\nconst items = $input.all();\nconst fileData = items[0];\nconst fieldnamesData = items[1];\n\n// Preserve binary data from the file input\nconst result = {\n  json: {\n    ...fileData.json,\n    ...fieldnamesData.json\n  },\n  binary: fileData.binary || {} // Ensure binary data is preserved\n};\n\nreturn [result];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        -368
      ],
      "id": "3e7a2bf1-4c13-469b-8a17-945428baad2e",
      "name": "Combine Data1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/extract-images",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "extracted_image"
            }
          }
        }
      },
      "id": "83785174-bbdc-405c-99fa-a20602eb6a08",
      "name": "Extract Images from PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1504,
        -368
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for Resume Parser with extracted image\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  // Use extracted image if available, otherwise use original file\n  const binaryData = item.binary.extracted_image || item.binary.file;\n  \n  result.push({\n    json: {\n      ...item.json,\n      image_extracted: !!item.binary.extracted_image,\n      processing_method: item.binary.extracted_image ? 'vision_analysis' : 'direct_file'\n    },\n    binary: {\n      file: binaryData\n    }\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1728,
        -368
      ],
      "id": "d1e8c4e1-d0b2-4937-8b7b-7fbadbd5d677",
      "name": "Prepare for Vision Analysis"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.image_extracted }}",
                    "rightValue": true,
                    "operator": {
                      "type": "boolean",
                      "operation": "true"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1952,
        -368
      ],
      "id": "9b8ba8e5-0fe6-478b-8ec8-70f033664a69",
      "name": "Image Extraction Check"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://imp-fastapi:8000/api/documents/extract-text",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {}
      },
      "id": "4b2095c3-e84d-4d6a-8fe4-3ad1fdef9d00",
      "name": "Extract Text Fallback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1728,
        -128
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare text data for Resume Parser when image extraction fails\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  result.push({\n    json: {\n      ...item.json,\n      processing_method: 'text_analysis',\n      extracted_text: item.json.text_content || 'No text extracted',\n      fallback_reason: 'Image extraction failed or unavailable'\n    },\n    binary: item.binary || {}\n  });\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1952,
        -128
      ],
      "id": "4202799e-6788-4c6c-af07-f27f6e364106",
      "name": "Prepare Text Analysis"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2176,
        -224
      ],
      "id": "01ab190d-793b-4d96-ad09-0719ad816391",
      "name": "Merge Processing Routes"
    },
    {
      "parameters": {
        "path": "df313a6d-b069-4028-b4cb-d49ae75b69e9",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -992,
        -160
      ],
      "id": "76cf39c1-6192-4246-88c2-3d9f2fea3e59",
      "name": "Webhook",
      "webhookId": "df313a6d-b069-4028-b4cb-d49ae75b69e9"
    },
    {
      "parameters": {
        "formTitle": "upload",
        "formFields": {
          "values": [
            {
              "fieldLabel": "file",
              "fieldType": "file"
            }
          ]
        },
        "responseMode": "lastNode",
        "options": {
          "buttonLabel": "Submit"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -992,
        -800
      ],
      "id": "00475ae5-124b-4946-bfb6-9294fbf93abb",
      "name": "On form submission",
      "webhookId": "e5dee929-3e06-407f-aac1-3a32bf6a505e"
    }
  ],
  "connections": {
    "Store Classification1": {
      "main": [
        [
          {
            "node": "Classify File Type1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classification Engine1": {
      "main": [
        [
          {
            "node": "Store Classification1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify File Type1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Convert DOCX to PDF (FastAPI)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert DOCX to PDF (FastAPI)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert DOCX to PDF (FastAPI)": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a document": {
      "main": [
        [
          {
            "node": "Merge Job Applicant and Experience",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Experience Data": {
      "main": [
        [
          {
            "node": "Collect Experience Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Experience Data": {
      "main": [
        [
          {
            "node": "Merge Job Applicant and Experience",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Job Applicant and Experience": {
      "main": [
        [
          {
            "node": "Update Job Applicant Experience",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Field Names": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Get Field Names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many documents": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Combine Designations and Candidate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Designations and Candidate Data": {
      "main": [
        [
          {
            "node": "Designation Scorer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Designation Scorer": {
      "main": [
        [
          {
            "node": "Designation Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Designation Scorer",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Designation Logic": {
      "main": [
        [
          {
            "node": "Route Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Switch": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "AI Designation Assigner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Designation Assigner": {
      "main": [
        [
          {
            "node": "Process AI Designation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Designation": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Designation Check Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resume Parser": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Designation Check Switch": {
      "main": [
        [
          {
            "node": "Final Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create a document1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post Designation Creation": {
      "main": [
        [
          {
            "node": "Designation Verification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Merge": {
      "main": [
        [
          {
            "node": "Process Experience Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Experience Data": {
      "main": [
        [
          {
            "node": "Create a document",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Experience Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Resume Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Designation Scorer",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Designation Assigner",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create a document1": {
      "main": [
        [
          {
            "node": "Final Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Pre-Designation Check": {
      "main": [
        [
          {
            "node": "Skip Creation Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Skip Creation Switch": {
      "main": [
        [
          {
            "node": "Post Designation Creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Combine Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Data1": {
      "main": [
        [
          {
            "node": "Extract Images from PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Images from PDF": {
      "main": [
        [
          {
            "node": "Prepare for Vision Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Vision Analysis": {
      "main": [
        [
          {
            "node": "Image Extraction Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Extraction Check": {
      "main": [
        [
          {
            "node": "Merge Processing Routes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text Fallback": {
      "main": [
        [
          {
            "node": "Prepare Text Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Text Analysis": {
      "main": [
        [
          {
            "node": "Merge Processing Routes",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Processing Routes": {
      "main": [
        [
          {
            "node": "Resume Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Classification Engine1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get many documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Get many documents",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          },
          {
            "node": "Classification Engine1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8dbc788362a7064be1e99adf037458c451d1265e79b52ecf653899e06c56f8d2"
  }
}