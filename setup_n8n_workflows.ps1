# Generated by Copilot
# IMP n8n Workflows Setup and Testing Script
# Phase 1 Implementation

param(
    [string]$Action = "setup",
    [string]$N8nUrl = "http://localhost:5678",
    [string]$FastApiUrl = "http://localhost:8000",
    [string]$TestFile = ""
)

# Color output functions
function Write-Success { param($Message) Write-Host "‚úÖ $Message" -ForegroundColor Green }
function Write-Error { param($Message) Write-Host "‚ùå $Message" -ForegroundColor Red }
function Write-Info { param($Message) Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Cyan }
function Write-Warning { param($Message) Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow }

# Main script execution
Write-Host "üöÄ IMP n8n Workflows - Phase 1 Setup" -ForegroundColor Magenta
Write-Host "=================================" -ForegroundColor Magenta

switch ($Action.ToLower()) {
    "setup" {
        Write-Info "Setting up n8n workflows for IMP Phase 1..."
        Setup-Workflows
    }
    "test" {
        Write-Info "Testing n8n workflows..."
        Test-Workflows
    }
    "status" {
        Write-Info "Checking workflow status..."
        Check-Status
    }
    "import" {
        Write-Info "Importing workflows to n8n..."
        Import-Workflows
    }
    default {
        Show-Help
    }
}

function Show-Help {
    Write-Host @"
IMP n8n Workflows Setup Script

Usage:
    .\setup_n8n_workflows.ps1 -Action <action> [options]

Actions:
    setup    - Complete setup including Docker and workflow import
    test     - Test all workflows with sample data
    status   - Check status of n8n and workflows
    import   - Import workflow JSON files to n8n

Options:
    -N8nUrl <url>        - n8n instance URL (default: http://localhost:5678)
    -FastApiUrl <url>    - FastAPI backend URL (default: http://localhost:8000)
    -TestFile <path>     - Test file for upload testing

Examples:
    .\setup_n8n_workflows.ps1 -Action setup
    .\setup_n8n_workflows.ps1 -Action test -TestFile "sample_cv.pdf"
    .\setup_n8n_workflows.ps1 -Action status

"@ -ForegroundColor Yellow
}

function Setup-Workflows {
    Write-Info "üîß Starting IMP n8n Workflows setup..."

    # Step 1: Check Docker and services
    Write-Info "Checking Docker services..."
    
    try {
        $dockerStatus = docker ps --format "table {{.Names}}\t{{.Status}}" | Select-String "imp-"
        if ($dockerStatus) {
            Write-Success "Docker services are running:"
            $dockerStatus | ForEach-Object { Write-Host "  $($_.Line)" -ForegroundColor White }
        } else {
            Write-Warning "IMP Docker services not found. Starting them..."
            Start-DockerServices
        }
    } catch {
        Write-Error "Docker is not available. Please install Docker first."
        return
    }

    # Step 2: Wait for services to be ready
    Write-Info "Waiting for services to be ready..."
    Wait-ForServices

    # Step 3: Check n8n accessibility
    Write-Info "Checking n8n accessibility..."
    if (Test-N8nConnection) {
        Write-Success "n8n is accessible at $N8nUrl"
    } else {
        Write-Error "Cannot connect to n8n. Please check the service."
        return
    }

    # Step 4: Import workflows
    Write-Info "Importing workflows..."
    Import-Workflows

    # Step 5: Validate workflows
    Write-Info "Validating imported workflows..."
    Validate-Workflows

    Write-Success "üéâ Setup completed successfully!"
    Write-Info "Next steps:"
    Write-Host "  1. Access n8n at: $N8nUrl (admin/admin123)" -ForegroundColor Yellow
    Write-Host "  2. Test workflows: .\setup_n8n_workflows.ps1 -Action test" -ForegroundColor Yellow
    Write-Host "  3. Upload test document: .\setup_n8n_workflows.ps1 -Action test -TestFile 'path\to\file.pdf'" -ForegroundColor Yellow
}

function Start-DockerServices {
    Write-Info "Starting IMP Docker services..."
    
    try {
        # Start core services
        docker-compose up -d imp-postgres imp-n8n imp-fastapi
        
        Write-Success "Docker services started"
        Start-Sleep -Seconds 10
    } catch {
        Write-Error "Failed to start Docker services: $($_.Exception.Message)"
        throw
    }
}

function Wait-ForServices {
    $maxAttempts = 30
    $attempt = 0
    
    Write-Info "Waiting for services to be ready (max 60 seconds)..."
    
    while ($attempt -lt $maxAttempts) {
        $attempt++
        Write-Host "." -NoNewline
        
        # Check n8n
        try {
            $n8nResponse = Invoke-WebRequest -Uri "$N8nUrl/rest/login" -Method GET -TimeoutSec 2 -UseBasicParsing
            if ($n8nResponse.StatusCode -eq 200) {
                Write-Success "`nn8n is ready!"
                break
            }
        } catch {
            # Service not ready yet
        }
        
        Start-Sleep -Seconds 2
    }
    
    if ($attempt -eq $maxAttempts) {
        Write-Error "Services did not start within timeout period"
        throw "Service startup timeout"
    }
}

function Test-N8nConnection {
    try {
        $response = Invoke-WebRequest -Uri "$N8nUrl/rest/login" -Method GET -TimeoutSec 5 -UseBasicParsing
        return $response.StatusCode -eq 200
    } catch {
        return $false
    }
}

function Import-Workflows {
    Write-Info "Importing workflow JSON files..."
    
    $workflowFiles = @(
        "Document_Upload_Handler.json",
        "Quality_Assessment.json", 
        "Document_Classification.json",
        "Data_Extraction_Primary.json",
        "Smart_Router.json"
    )
    
    $workflowDir = "n8n\workflows"
    
    foreach ($file in $workflowFiles) {
        $filePath = Join-Path $workflowDir $file
        
        if (Test-Path $filePath) {
            Write-Info "Importing $file..."
            
            try {
                # Read workflow JSON
                $workflowContent = Get-Content $filePath -Raw | ConvertFrom-Json
                
                # For Phase 1, we'll provide manual import instructions
                Write-Success "‚úì $file is ready for import"
                
            } catch {
                Write-Error "Failed to process $file : $($_.Exception.Message)"
            }
        } else {
            Write-Error "Workflow file not found: $filePath"
        }
    }
    
    Write-Warning "Manual Import Required:"
    Write-Host "  1. Go to $N8nUrl" -ForegroundColor Yellow
    Write-Host "  2. Login with admin/admin123" -ForegroundColor Yellow
    Write-Host "  3. For each workflow file:" -ForegroundColor Yellow
    Write-Host "     - Click 'Import' > 'From File'" -ForegroundColor White
    Write-Host "     - Select the JSON file" -ForegroundColor White
    Write-Host "     - Click 'Import'" -ForegroundColor White
    Write-Host "  4. Activate each imported workflow" -ForegroundColor Yellow
}

function Validate-Workflows {
    Write-Info "Validating workflow setup..."
    
    $expectedWebhooks = @(
        "/webhook/imp-upload-handler",
        "/webhook/imp-quality-assessment", 
        "/webhook/imp-classification",
        "/webhook/imp-data-extraction",
        "/webhook/imp-smart-router"
    )
    
    foreach ($webhook in $expectedWebhooks) {
        $testUrl = "$N8nUrl$webhook"
        Write-Info "Checking webhook: $webhook"
        
        try {
            # Test webhook existence (expect 405 Method Not Allowed for GET on POST webhook)
            $response = Invoke-WebRequest -Uri $testUrl -Method GET -UseBasicParsing -ErrorAction SilentlyContinue
        } catch {
            if ($_.Exception.Response.StatusCode -eq 405) {
                Write-Success "‚úì Webhook exists: $webhook"
            } else {
                Write-Warning "‚ö† Webhook may not be active: $webhook"
            }
        }
    }
}

function Test-Workflows {
    Write-Info "üß™ Testing n8n workflows..."
    
    # Test 1: Check service health
    Write-Info "Testing service connectivity..."
    Test-ServiceHealth
    
    # Test 2: Test document upload workflow
    Write-Info "Testing document upload workflow..."
    Test-DocumentUpload
    
    # Test 3: Test quality assessment
    Write-Info "Testing quality assessment workflow..."
    Test-QualityAssessment
    
    # Test 4: Test classification
    Write-Info "Testing classification workflow..."
    Test-Classification
    
    # Test 5: Test complete pipeline
    if ($TestFile -and (Test-Path $TestFile)) {
        Write-Info "Testing complete pipeline with file: $TestFile"
        Test-CompletePipeline $TestFile
    } else {
        Write-Warning "No test file provided. Use -TestFile parameter to test file upload."
    }
    
    Write-Success "üéâ Workflow testing completed!"
}

function Test-ServiceHealth {
    # Test n8n
    try {
        $n8nHealth = Invoke-WebRequest -Uri "$N8nUrl/rest/login" -UseBasicParsing -TimeoutSec 5
        Write-Success "n8n service is healthy"
    } catch {
        Write-Error "n8n service is not responding"
    }
    
    # Test FastAPI
    try {
        $fastApiHealth = Invoke-WebRequest -Uri "$FastApiUrl/api/v1/health" -UseBasicParsing -TimeoutSec 5
        Write-Success "FastAPI service is healthy"
    } catch {
        Write-Error "FastAPI service is not responding"
    }
}

function Test-DocumentUpload {
    $testData = @{
        document = @{
            id = "test_doc_$(Get-Random)"
            mime_type = "application/pdf"
            file_size_mb = 2.5
            original_filename = "test_document.pdf"
        }
    } | ConvertTo-Json -Depth 3
    
    try {
        $response = Invoke-WebRequest -Uri "$N8nUrl/webhook/imp-upload-handler" -Method POST -Body $testData -ContentType "application/json" -UseBasicParsing -TimeoutSec 10
        
        if ($response.StatusCode -eq 200) {
            Write-Success "Document upload workflow test passed"
            $result = $response.Content | ConvertFrom-Json
            Write-Host "  Response: $($result.message)" -ForegroundColor White
        } else {
            Write-Warning "Document upload returned status: $($response.StatusCode)"
        }
    } catch {
        Write-Error "Document upload test failed: $($_.Exception.Message)"
    }
}

function Test-QualityAssessment {
    $testData = @{
        document_id = "test_quality_$(Get-Random)"
        quality_score = 75
        processing_tier = "high_quality"
    } | ConvertTo-Json
    
    try {
        $response = Invoke-WebRequest -Uri "$N8nUrl/webhook/imp-quality-assessment" -Method POST -Body $testData -ContentType "application/json" -UseBasicParsing -TimeoutSec 10
        
        if ($response.StatusCode -eq 200) {
            Write-Success "Quality assessment workflow test passed"
        } else {
            Write-Warning "Quality assessment returned status: $($response.StatusCode)"
        }
    } catch {
        Write-Error "Quality assessment test failed: $($_.Exception.Message)"
    }
}

function Test-Classification {
    $testData = @{
        document_id = "test_classify_$(Get-Random)"
        quality_score = 80
        processing_tier = "high_quality"
    } | ConvertTo-Json
    
    try {
        $response = Invoke-WebRequest -Uri "$N8nUrl/webhook/imp-classification" -Method POST -Body $testData -ContentType "application/json" -UseBasicParsing -TimeoutSec 10
        
        if ($response.StatusCode -eq 200) {
            Write-Success "Classification workflow test passed"
            $result = $response.Content | ConvertFrom-Json
            Write-Host "  Document Type: $($result.classification.primary_prediction.document_type)" -ForegroundColor White
        } else {
            Write-Warning "Classification returned status: $($response.StatusCode)"
        }
    } catch {
        Write-Error "Classification test failed: $($_.Exception.Message)"
    }
}

function Test-CompletePipeline {
    param($FilePath)
    
    if (-not (Test-Path $FilePath)) {
        Write-Error "Test file not found: $FilePath"
        return
    }
    
    Write-Info "Testing complete pipeline with file: $FilePath"
    
    try {
        # Test via FastAPI endpoint (which should trigger n8n workflows)
        $form = @{
            file = Get-Item $FilePath
        }
        
        $response = Invoke-RestMethod -Uri "$FastApiUrl/api/v1/documents/upload" -Method POST -Form $form -TimeoutSec 30
        
        if ($response.success) {
            Write-Success "Complete pipeline test passed"
            Write-Host "  Document ID: $($response.document_id)" -ForegroundColor White
            Write-Host "  Quality Score: $($response.quality_score)" -ForegroundColor White
            Write-Host "  Processing Tier: $($response.processing_tier)" -ForegroundColor White
        } else {
            Write-Warning "Pipeline test completed with issues"
            Write-Host "  Error: $($response.error)" -ForegroundColor Red
        }
    } catch {
        Write-Error "Complete pipeline test failed: $($_.Exception.Message)"
    }
}

function Check-Status {
    Write-Info "üìä Checking IMP system status..."
    
    # Docker services status
    Write-Info "Docker Services:"
    try {
        $services = docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | Select-String "imp-"
        if ($services) {
            $services | ForEach-Object { 
                $line = $_.Line
                if ($line -like "*Up*") {
                    Write-Success "  $line"
                } else {
                    Write-Warning "  $line"
                }
            }
        } else {
            Write-Warning "  No IMP services found"
        }
    } catch {
        Write-Error "  Cannot check Docker services"
    }
    
    # Service health checks
    Write-Info "Service Health:"
    
    # n8n health
    try {
        $n8nResponse = Invoke-WebRequest -Uri "$N8nUrl/rest/login" -UseBasicParsing -TimeoutSec 5
        Write-Success "  n8n: Healthy ($N8nUrl)"
    } catch {
        Write-Error "  n8n: Not responding ($N8nUrl)"
    }
    
    # FastAPI health
    try {
        $fastApiResponse = Invoke-WebRequest -Uri "$FastApiUrl/api/v1/health" -UseBasicParsing -TimeoutSec 5
        Write-Success "  FastAPI: Healthy ($FastApiUrl)"
    } catch {
        Write-Error "  FastAPI: Not responding ($FastApiUrl)"
    }
    
    # Database health (via FastAPI)
    try {
        $dbResponse = Invoke-WebRequest -Uri "$FastApiUrl/api/v1/processing/stats" -UseBasicParsing -TimeoutSec 5
        Write-Success "  Database: Connected"
    } catch {
        Write-Warning "  Database: Cannot verify connection"
    }
    
    Write-Info "Workflow Files:"
    $workflowFiles = Get-ChildItem "n8n\workflows\*.json" -ErrorAction SilentlyContinue
    if ($workflowFiles) {
        $workflowFiles | ForEach-Object {
            Write-Success "  ‚úì $($_.Name)"
        }
    } else {
        Write-Warning "  No workflow files found"
    }
}

# Execute the script
if ($MyInvocation.InvocationName -ne '.') {
    # Script is being run directly, not dot-sourced
    try {
        switch ($Action.ToLower()) {
            "setup" { Setup-Workflows }
            "test" { Test-Workflows }
            "status" { Check-Status }
            "import" { Import-Workflows }
            default { Show-Help }
        }
    } catch {
        Write-Error "Script execution failed: $($_.Exception.Message)"
        exit 1
    }
}
