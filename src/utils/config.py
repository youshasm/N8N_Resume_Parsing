# Generated by Copilot
import os
from typing import Dict, Any

class Config:
    """Configuration settings for the IMP document processing system"""
    
    # Database Configuration
    DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://user:pass@localhost:5432/imp_db')
    REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379')
    
    # File Processing Configuration
    MAX_FILE_SIZE_MB = int(os.getenv('MAX_FILE_SIZE_MB', '50'))
    UPLOAD_FOLDER = os.getenv('UPLOAD_FOLDER', './documents/uploads')
    TEMP_FOLDER = os.getenv('TEMP_FOLDER', './documents/temp')
    PROCESSED_FOLDER = os.getenv('PROCESSED_FOLDER', './documents/processed')
    
    # Quality Thresholds
    QUALITY_THRESHOLD_HIGH = float(os.getenv('QUALITY_THRESHOLD_HIGH', '75'))
    QUALITY_THRESHOLD_MEDIUM = float(os.getenv('QUALITY_THRESHOLD_MEDIUM', '50'))
    QUALITY_THRESHOLD_LOW = float(os.getenv('QUALITY_THRESHOLD_LOW', '25'))
    
    # AI Models Configuration
    HUGGINGFACE_TOKEN = os.getenv('HUGGINGFACE_TOKEN', '')
    MODEL_CACHE_DIR = os.getenv('MODEL_CACHE_DIR', './models')
    
    # Premium OCR APIs
    GOOGLE_CLOUD_VISION_API_KEY = os.getenv('GOOGLE_CLOUD_VISION_API_KEY', '')
    GOOGLE_APPLICATION_CREDENTIALS = os.getenv('GOOGLE_APPLICATION_CREDENTIALS', '')
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
    AZURE_COMPUTER_VISION_KEY = os.getenv('AZURE_COMPUTER_VISION_KEY', '')
    AZURE_COMPUTER_VISION_ENDPOINT = os.getenv('AZURE_COMPUTER_VISION_ENDPOINT', '')
    
    # Processing Configuration
    BATCH_SIZE = int(os.getenv('BATCH_SIZE', '10'))
    WORKER_THREADS = int(os.getenv('WORKER_THREADS', '4'))
    
    # Cost Control
    DAILY_PREMIUM_API_BUDGET = float(os.getenv('DAILY_PREMIUM_API_BUDGET', '100.00'))
    MONTHLY_PREMIUM_API_BUDGET = float(os.getenv('MONTHLY_PREMIUM_API_BUDGET', '2000.00'))
    ENABLE_PREMIUM_FALLBACK = os.getenv('ENABLE_PREMIUM_FALLBACK', 'true').lower() == 'true'
    MAX_PREMIUM_RETRIES = int(os.getenv('MAX_PREMIUM_RETRIES', '2'))
    
    # Security
    SECRET_KEY = os.getenv('SECRET_KEY', 'your_secret_key_here')
    JWT_SECRET = os.getenv('JWT_SECRET', 'your_jwt_secret_here')
    
    # n8n Configuration
    N8N_BASE_URL = os.getenv('N8N_BASE_URL', 'http://localhost:5678')
    N8N_API_KEY = os.getenv('N8N_API_KEY', '')
    N8N_WEBHOOK_URL = os.getenv('N8N_WEBHOOK_URL', 'http://localhost:5678/webhook')
    
    # Supported File Types
    SUPPORTED_IMAGE_FORMATS = ['.jpg', '.jpeg', '.png', '.tiff', '.bmp', '.webp']
    SUPPORTED_DOCUMENT_FORMATS = ['.pdf', '.doc', '.docx', '.txt']
    SUPPORTED_FORMATS = SUPPORTED_IMAGE_FORMATS + SUPPORTED_DOCUMENT_FORMATS
    
    # OCR Engine Costs (per document)
    OCR_COSTS = {
        'huggingface_donut': 0.02,
        'google_vision': 0.15,
        'openai_gpt4v': 0.25,
        'azure_vision': 0.12
    }
    
    # Document Type Templates
    DOCUMENT_TEMPLATES = {
        'cv_resume': {
            'fields': ['full_name', 'email', 'phone', 'address', 'experience', 'education', 'skills'],
            'required_fields': ['full_name', 'email', 'phone']
        },
        'passport': {
            'fields': ['full_name', 'passport_number', 'nationality', 'date_of_birth', 'expiry_date', 'place_of_birth'],
            'required_fields': ['full_name', 'passport_number', 'nationality', 'date_of_birth']
        },
        'education_certificate': {
            'fields': ['student_name', 'institution', 'degree', 'graduation_date', 'grade'],
            'required_fields': ['student_name', 'institution', 'degree']
        },
        'experience_letter': {
            'fields': ['employee_name', 'company', 'position', 'start_date', 'end_date', 'salary'],
            'required_fields': ['employee_name', 'company', 'position']
        },
        'national_id': {
            'fields': ['full_name', 'id_number', 'date_of_birth', 'address', 'expiry_date'],
            'required_fields': ['full_name', 'id_number', 'date_of_birth']
        }
    }
    
    @classmethod
    def get_supported_formats(cls) -> list:
        """Get list of all supported file formats"""
        return cls.SUPPORTED_FORMATS
    
    @classmethod
    def is_supported_format(cls, file_extension: str) -> bool:
        """Check if file format is supported"""
        return file_extension.lower() in cls.SUPPORTED_FORMATS
    
    @classmethod
    def get_ocr_cost(cls, engine_name: str) -> float:
        """Get cost for specific OCR engine"""
        return cls.OCR_COSTS.get(engine_name, 0.0)
    
    @classmethod
    def get_document_template(cls, doc_type: str) -> Dict[str, Any]:
        """Get template for specific document type"""
        return cls.DOCUMENT_TEMPLATES.get(doc_type, {
            'fields': [],
            'required_fields': []
        })
    
    @classmethod
    def validate_config(cls) -> Dict[str, bool]:
        """Validate configuration settings"""
        validation_results = {
            'database_url_set': bool(cls.DATABASE_URL),
            'upload_folder_exists': os.path.exists(cls.UPLOAD_FOLDER),
            'huggingface_token_set': bool(cls.HUGGINGFACE_TOKEN),
            'quality_thresholds_valid': (
                0 <= cls.QUALITY_THRESHOLD_LOW <= 
                cls.QUALITY_THRESHOLD_MEDIUM <= 
                cls.QUALITY_THRESHOLD_HIGH <= 100
            ),
            'budget_limits_valid': (
                cls.DAILY_PREMIUM_API_BUDGET > 0 and 
                cls.MONTHLY_PREMIUM_API_BUDGET > 0
            )
        }
        return validation_results
