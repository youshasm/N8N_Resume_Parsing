# Generated by Copilot
import logging
import os
from datetime import datetime
from typing import Optional

class Logger:
    """Custom logger for IMP document processing system"""
    
    def __init__(self, name: str, log_level: str = "INFO"):
        self.name = name
        self.logger = logging.getLogger(name)
        
        # Set log level
        log_levels = {
            "DEBUG": logging.DEBUG,
            "INFO": logging.INFO,
            "WARNING": logging.WARNING,
            "ERROR": logging.ERROR,
            "CRITICAL": logging.CRITICAL
        }
        
        self.logger.setLevel(log_levels.get(log_level.upper(), logging.INFO))
        
        # Create logs directory if it doesn't exist
        log_dir = "logs"
        os.makedirs(log_dir, exist_ok=True)
        
        # Create file handler
        log_filename = os.path.join(log_dir, f"imp_{datetime.now().strftime('%Y%m%d')}.log")
        file_handler = logging.FileHandler(log_filename)
        file_handler.setLevel(logging.DEBUG)
        
        # Create console handler
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        
        # Create formatter
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        file_handler.setFormatter(formatter)
        console_handler.setFormatter(formatter)
        
        # Add handlers to logger (avoid duplicate handlers)
        if not self.logger.handlers:
            self.logger.addHandler(file_handler)
            self.logger.addHandler(console_handler)
    
    def debug(self, message: str, extra: Optional[dict] = None):
        """Log debug message"""
        if extra:
            message = f"{message} | Extra: {extra}"
        self.logger.debug(message)
    
    def info(self, message: str, extra: Optional[dict] = None):
        """Log info message"""
        if extra:
            message = f"{message} | Extra: {extra}"
        self.logger.info(message)
    
    def warning(self, message: str, extra: Optional[dict] = None):
        """Log warning message"""
        if extra:
            message = f"{message} | Extra: {extra}"
        self.logger.warning(message)
    
    def error(self, message: str, extra: Optional[dict] = None):
        """Log error message"""
        if extra:
            message = f"{message} | Extra: {extra}"
        self.logger.error(message)
    
    def critical(self, message: str, extra: Optional[dict] = None):
        """Log critical message"""
        if extra:
            message = f"{message} | Extra: {extra}"
        self.logger.critical(message)
