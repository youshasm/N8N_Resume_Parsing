-- Generated by Copilot
-- Database initialization for IMP Document Processing System
-- This script creates all necessary tables for the complete workflow

-- Create processed_documents table
CREATE TABLE IF NOT EXISTS processed_documents (
    id SERIAL PRIMARY KEY,
    document_id VARCHAR(255) UNIQUE NOT NULL,
    filename VARCHAR(500) NOT NULL,
    document_type VARCHAR(100),
    quality_score INTEGER,
    processing_tier VARCHAR(50),
    extraction_confidence DECIMAL(5,2),
    data_quality_score INTEGER,
    standardized_data JSONB,
    validation_results JSONB,
    file_size BIGINT,
    mime_type VARCHAR(100),
    processing_status VARCHAR(50),
    estimated_cost DECIMAL(8,4),
    uploaded_at TIMESTAMP,
    processed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create manual_review_queue table
CREATE TABLE IF NOT EXISTS manual_review_queue (
    id SERIAL PRIMARY KEY,
    document_id VARCHAR(255) UNIQUE NOT NULL,
    filename VARCHAR(500) NOT NULL,
    document_type VARCHAR(100),
    quality_score INTEGER,
    reason TEXT,
    priority VARCHAR(20) DEFAULT 'medium',
    estimated_time_minutes INTEGER,
    status VARCHAR(50) DEFAULT 'pending',
    assigned_to VARCHAR(100),
    file_size BIGINT,
    mime_type VARCHAR(100),
    uploaded_at TIMESTAMP,
    queued_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    reviewed_at TIMESTAMP,
    completed_at TIMESTAMP,
    notes TEXT
);

-- Create processing_statistics table for monitoring
CREATE TABLE IF NOT EXISTS processing_statistics (
    id SERIAL PRIMARY KEY,
    date DATE DEFAULT CURRENT_DATE,
    total_documents INTEGER DEFAULT 0,
    high_quality_count INTEGER DEFAULT 0,
    medium_quality_count INTEGER DEFAULT 0,
    low_quality_count INTEGER DEFAULT 0,
    successful_extractions INTEGER DEFAULT 0,
    failed_extractions INTEGER DEFAULT 0,
    manual_reviews INTEGER DEFAULT 0,
    total_processing_cost DECIMAL(10,4) DEFAULT 0,
    average_quality_score DECIMAL(5,2),
    average_processing_time DECIMAL(8,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create document_types table for classification reference
CREATE TABLE IF NOT EXISTS document_types (
    id SERIAL PRIMARY KEY,
    type_name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    expected_fields JSONB,
    validation_rules JSONB,
    processing_priority INTEGER DEFAULT 1,
    active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert default document types
INSERT INTO document_types (type_name, description, expected_fields, validation_rules) VALUES
('cv', 'Curriculum Vitae/Resume', 
 '{"personal_info": ["name", "email", "phone"], "experience": ["company", "position", "duration"], "education": ["degree", "institution"]}',
 '{"required_fields": ["personal_info.name"], "min_sections": 2}'),
('passport', 'Passport Document', 
 '{"mrz_data": ["passport_number", "nationality", "date_of_birth"], "personal_info": ["full_name", "gender"]}',
 '{"required_fields": ["mrz_data.passport_number", "personal_info.full_name"], "format_checks": ["passport_number_format"]}'),
('certificate', 'Educational/Professional Certificate', 
 '{"certificate_info": ["certificate_type", "institution", "degree", "year_issued", "student_name"]}',
 '{"required_fields": ["certificate_info.certificate_type"], "min_confidence": 80}'),
('experience_letter', 'Work Experience Letter', 
 '{"employment_info": ["company", "position", "duration", "employee_name"]}',
 '{"required_fields": ["employment_info.company", "employment_info.position"], "min_confidence": 75}'),
('national_id', 'National ID/CNIC', 
 '{"identity_info": ["id_number", "full_name", "father_name", "date_of_birth"]}',
 '{"required_fields": ["identity_info.id_number", "identity_info.full_name"], "format_checks": ["id_number_format"]}'),
('medical_certificate', 'Medical Certificate', 
 '{"medical_info": ["certificate_type", "patient_name", "doctor_name", "issue_date"]}',
 '{"required_fields": ["medical_info.certificate_type"], "min_confidence": 70}');

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_processed_documents_document_id ON processed_documents(document_id);
CREATE INDEX IF NOT EXISTS idx_processed_documents_type ON processed_documents(document_type);
CREATE INDEX IF NOT EXISTS idx_processed_documents_status ON processed_documents(processing_status);
CREATE INDEX IF NOT EXISTS idx_processed_documents_created_at ON processed_documents(created_at);

CREATE INDEX IF NOT EXISTS idx_manual_review_status ON manual_review_queue(status);
CREATE INDEX IF NOT EXISTS idx_manual_review_priority ON manual_review_queue(priority);
CREATE INDEX IF NOT EXISTS idx_manual_review_assigned ON manual_review_queue(assigned_to);
CREATE INDEX IF NOT EXISTS idx_manual_review_queued_at ON manual_review_queue(queued_at);

CREATE INDEX IF NOT EXISTS idx_processing_stats_date ON processing_statistics(date);

-- Create triggers for updated_at timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_processed_documents_updated_at 
    BEFORE UPDATE ON processed_documents 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_processing_statistics_updated_at 
    BEFORE UPDATE ON processing_statistics 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Create views for easier querying
CREATE OR REPLACE VIEW high_quality_documents AS
SELECT * FROM processed_documents 
WHERE quality_score >= 75 AND processing_status = 'validated';

CREATE OR REPLACE VIEW pending_reviews AS
SELECT * FROM manual_review_queue 
WHERE status = 'pending' 
ORDER BY priority DESC, estimated_time_minutes ASC, queued_at ASC;

CREATE OR REPLACE VIEW processing_summary AS
SELECT 
    date,
    total_documents,
    high_quality_count,
    medium_quality_count,
    low_quality_count,
    ROUND((high_quality_count::decimal / NULLIF(total_documents, 0)) * 100, 2) as high_quality_percentage,
    ROUND((successful_extractions::decimal / NULLIF(total_documents, 0)) * 100, 2) as success_rate,
    total_processing_cost,
    average_quality_score
FROM processing_statistics
ORDER BY date DESC;

-- Sample data for testing (optional)
-- Uncomment the following lines to insert test data

/*
INSERT INTO processing_statistics (date, total_documents, high_quality_count, medium_quality_count, low_quality_count, successful_extractions, failed_extractions, manual_reviews, total_processing_cost, average_quality_score)
VALUES 
    (CURRENT_DATE, 0, 0, 0, 0, 0, 0, 0, 0.00, 0.00),
    (CURRENT_DATE - INTERVAL '1 day', 25, 18, 5, 2, 22, 1, 2, 4.50, 78.5);
*/

-- Grant permissions (adjust as needed)
-- GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO n8n_user;
-- GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO n8n_user;

COMMENT ON TABLE processed_documents IS 'Stores successfully processed documents with extracted data';
COMMENT ON TABLE manual_review_queue IS 'Queue for documents requiring human verification';
COMMENT ON TABLE processing_statistics IS 'Daily statistics for monitoring system performance';
COMMENT ON TABLE document_types IS 'Reference table for supported document types and their validation rules';
